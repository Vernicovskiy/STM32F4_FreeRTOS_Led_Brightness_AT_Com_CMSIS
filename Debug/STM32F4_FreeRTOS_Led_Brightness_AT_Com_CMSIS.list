
STM32F4_FreeRTOS_Led_Brightness_AT_Com_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000290c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bcc  08002bcc  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002bcc  08002bcc  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bcc  08002bcc  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004164  20000058  08002c2c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041bc  08002c2c  000241bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c9d  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000153b  00000000  00000000  00026d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000528  00000000  00000000  000282a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ce  00000000  00000000  000287d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f1a4  00000000  00000000  00028b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000742b  00000000  00000000  00037d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005afbd  00000000  00000000  0003f16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001670  00000000  00000000  0009a12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0009b79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000058 	.word	0x20000058
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a94 	.word	0x08002a94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	08002a94 	.word	0x08002a94

080001e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <SystemInit+0x20>)
 80001e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001ea:	4a05      	ldr	r2, [pc, #20]	; (8000200 <SystemInit+0x20>)
 80001ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetIdleTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetIdleTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2280      	movs	r2, #128	; 0x80
 8000220:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000074 	.word	0x20000074
 8000234:	20000114 	.word	0x20000114

08000238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	; 0x28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000244:	f001 fb66 	bl	8001914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000248:	4b5b      	ldr	r3, [pc, #364]	; (80003b8 <pvPortMalloc+0x180>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d101      	bne.n	8000254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000250:	f000 f920 	bl	8000494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000254:	4b59      	ldr	r3, [pc, #356]	; (80003bc <pvPortMalloc+0x184>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4013      	ands	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	f040 8093 	bne.w	8000388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d01d      	beq.n	80002a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000268:	2208      	movs	r2, #8
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f003 0307 	and.w	r3, r3, #7
 8000276:	2b00      	cmp	r3, #0
 8000278:	d014      	beq.n	80002a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f023 0307 	bic.w	r3, r3, #7
 8000280:	3308      	adds	r3, #8
 8000282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f003 0307 	and.w	r3, r3, #7
 800028a:	2b00      	cmp	r3, #0
 800028c:	d00a      	beq.n	80002a4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000292:	f383 8811 	msr	BASEPRI, r3
 8000296:	f3bf 8f6f 	isb	sy
 800029a:	f3bf 8f4f 	dsb	sy
 800029e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80002a0:	bf00      	nop
 80002a2:	e7fe      	b.n	80002a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d06e      	beq.n	8000388 <pvPortMalloc+0x150>
 80002aa:	4b45      	ldr	r3, [pc, #276]	; (80003c0 <pvPortMalloc+0x188>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d869      	bhi.n	8000388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80002b4:	4b43      	ldr	r3, [pc, #268]	; (80003c4 <pvPortMalloc+0x18c>)
 80002b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80002b8:	4b42      	ldr	r3, [pc, #264]	; (80003c4 <pvPortMalloc+0x18c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80002be:	e004      	b.n	80002ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80002c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80002c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80002ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d903      	bls.n	80002dc <pvPortMalloc+0xa4>
 80002d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1f1      	bne.n	80002c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80002dc:	4b36      	ldr	r3, [pc, #216]	; (80003b8 <pvPortMalloc+0x180>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d050      	beq.n	8000388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80002e6:	6a3b      	ldr	r3, [r7, #32]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2208      	movs	r2, #8
 80002ec:	4413      	add	r3, r2
 80002ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80002f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	6a3b      	ldr	r3, [r7, #32]
 80002f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80002f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fa:	685a      	ldr	r2, [r3, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	1ad2      	subs	r2, r2, r3
 8000300:	2308      	movs	r3, #8
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	429a      	cmp	r2, r3
 8000306:	d91f      	bls.n	8000348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	2b00      	cmp	r3, #0
 8000318:	d00a      	beq.n	8000330 <pvPortMalloc+0xf8>
	__asm volatile
 800031a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800031e:	f383 8811 	msr	BASEPRI, r3
 8000322:	f3bf 8f6f 	isb	sy
 8000326:	f3bf 8f4f 	dsb	sy
 800032a:	613b      	str	r3, [r7, #16]
}
 800032c:	bf00      	nop
 800032e:	e7fe      	b.n	800032e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1ad2      	subs	r2, r2, r3
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000342:	69b8      	ldr	r0, [r7, #24]
 8000344:	f000 f908 	bl	8000558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <pvPortMalloc+0x188>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <pvPortMalloc+0x188>)
 8000354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <pvPortMalloc+0x188>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <pvPortMalloc+0x190>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d203      	bcs.n	800036a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <pvPortMalloc+0x188>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <pvPortMalloc+0x190>)
 8000368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <pvPortMalloc+0x184>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	431a      	orrs	r2, r3
 8000374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <pvPortMalloc+0x194>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	3301      	adds	r3, #1
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <pvPortMalloc+0x194>)
 8000386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000388:	f001 fad2 	bl	8001930 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800038c:	69fb      	ldr	r3, [r7, #28]
 800038e:	f003 0307 	and.w	r3, r3, #7
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00a      	beq.n	80003ac <pvPortMalloc+0x174>
	__asm volatile
 8000396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800039a:	f383 8811 	msr	BASEPRI, r3
 800039e:	f3bf 8f6f 	isb	sy
 80003a2:	f3bf 8f4f 	dsb	sy
 80003a6:	60fb      	str	r3, [r7, #12]
}
 80003a8:	bf00      	nop
 80003aa:	e7fe      	b.n	80003aa <pvPortMalloc+0x172>
	return pvReturn;
 80003ac:	69fb      	ldr	r3, [r7, #28]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3728      	adds	r7, #40	; 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20003f1c 	.word	0x20003f1c
 80003bc:	20003f30 	.word	0x20003f30
 80003c0:	20003f20 	.word	0x20003f20
 80003c4:	20003f14 	.word	0x20003f14
 80003c8:	20003f24 	.word	0x20003f24
 80003cc:	20003f28 	.word	0x20003f28

080003d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d04d      	beq.n	800047e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80003e2:	2308      	movs	r3, #8
 80003e4:	425b      	negs	r3, r3
 80003e6:	697a      	ldr	r2, [r7, #20]
 80003e8:	4413      	add	r3, r2
 80003ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	685a      	ldr	r2, [r3, #4]
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <vPortFree+0xb8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4013      	ands	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d10a      	bne.n	8000414 <vPortFree+0x44>
	__asm volatile
 80003fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000402:	f383 8811 	msr	BASEPRI, r3
 8000406:	f3bf 8f6f 	isb	sy
 800040a:	f3bf 8f4f 	dsb	sy
 800040e:	60fb      	str	r3, [r7, #12]
}
 8000410:	bf00      	nop
 8000412:	e7fe      	b.n	8000412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d00a      	beq.n	8000432 <vPortFree+0x62>
	__asm volatile
 800041c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000420:	f383 8811 	msr	BASEPRI, r3
 8000424:	f3bf 8f6f 	isb	sy
 8000428:	f3bf 8f4f 	dsb	sy
 800042c:	60bb      	str	r3, [r7, #8]
}
 800042e:	bf00      	nop
 8000430:	e7fe      	b.n	8000430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <vPortFree+0xb8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4013      	ands	r3, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	d01e      	beq.n	800047e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d11a      	bne.n	800047e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	685a      	ldr	r2, [r3, #4]
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <vPortFree+0xb8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	43db      	mvns	r3, r3
 8000452:	401a      	ands	r2, r3
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000458:	f001 fa5c 	bl	8001914 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <vPortFree+0xbc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4413      	add	r3, r2
 8000466:	4a09      	ldr	r2, [pc, #36]	; (800048c <vPortFree+0xbc>)
 8000468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800046a:	6938      	ldr	r0, [r7, #16]
 800046c:	f000 f874 	bl	8000558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <vPortFree+0xc0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	4a06      	ldr	r2, [pc, #24]	; (8000490 <vPortFree+0xc0>)
 8000478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800047a:	f001 fa59 	bl	8001930 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20003f30 	.word	0x20003f30
 800048c:	20003f20 	.word	0x20003f20
 8000490:	20003f2c 	.word	0x20003f2c

08000494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800049a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800049e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <prvHeapInit+0xac>)
 80004a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f003 0307 	and.w	r3, r3, #7
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d00c      	beq.n	80004c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3307      	adds	r3, #7
 80004b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 0307 	bic.w	r3, r3, #7
 80004ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	4a1f      	ldr	r2, [pc, #124]	; (8000540 <prvHeapInit+0xac>)
 80004c4:	4413      	add	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <prvHeapInit+0xb0>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <prvHeapInit+0xb0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68ba      	ldr	r2, [r7, #8]
 80004dc:	4413      	add	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80004e0:	2208      	movs	r2, #8
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f023 0307 	bic.w	r3, r3, #7
 80004ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a15      	ldr	r2, [pc, #84]	; (8000548 <prvHeapInit+0xb4>)
 80004f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <prvHeapInit+0xb4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <prvHeapInit+0xb4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <prvHeapInit+0xb4>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <prvHeapInit+0xb8>)
 8000522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <prvHeapInit+0xbc>)
 800052a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <prvHeapInit+0xc0>)
 800052e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	20000314 	.word	0x20000314
 8000544:	20003f14 	.word	0x20003f14
 8000548:	20003f1c 	.word	0x20003f1c
 800054c:	20003f24 	.word	0x20003f24
 8000550:	20003f20 	.word	0x20003f20
 8000554:	20003f30 	.word	0x20003f30

08000558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <prvInsertBlockIntoFreeList+0xac>)
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e002      	b.n	800056c <prvInsertBlockIntoFreeList+0x14>
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	d8f7      	bhi.n	8000566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	4413      	add	r3, r2
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	d108      	bne.n	800059a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	441a      	add	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	441a      	add	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d118      	bne.n	80005e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <prvInsertBlockIntoFreeList+0xb0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d00d      	beq.n	80005d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	441a      	add	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e008      	b.n	80005e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <prvInsertBlockIntoFreeList+0xb0>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	e003      	b.n	80005e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d002      	beq.n	80005f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20003f14 	.word	0x20003f14
 8000608:	20003f1c 	.word	0x20003f1c

0800060c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f103 0208 	add.w	r2, r3, #8
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f04f 32ff 	mov.w	r2, #4294967295
 8000624:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f103 0208 	add.w	r2, r3, #8
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0208 	add.w	r2, r3, #8
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80006ae:	b480      	push	{r7}
 80006b0:	b085      	sub	sp, #20
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c4:	d103      	bne.n	80006ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e00c      	b.n	80006e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3308      	adds	r3, #8
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e002      	b.n	80006dc <vListInsert+0x2e>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d2f6      	bcs.n	80006d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	6892      	ldr	r2, [r2, #8]
 8000736:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	6852      	ldr	r2, [r2, #4]
 8000740:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	d103      	bne.n	8000754 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1e5a      	subs	r2, r3, #1
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3b04      	subs	r3, #4
 8000784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800078c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3b04      	subs	r3, #4
 8000792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	f023 0201 	bic.w	r2, r3, #1
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3b04      	subs	r3, #4
 80007a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <pxPortInitialiseStack+0x64>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	3b14      	subs	r3, #20
 80007ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3b04      	subs	r3, #4
 80007ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f06f 0202 	mvn.w	r2, #2
 80007c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3b20      	subs	r3, #32
 80007c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	080007dd 	.word	0x080007dd

080007dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <prvTaskExitError+0x54>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ee:	d00a      	beq.n	8000806 <prvTaskExitError+0x2a>
	__asm volatile
 80007f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f4:	f383 8811 	msr	BASEPRI, r3
 80007f8:	f3bf 8f6f 	isb	sy
 80007fc:	f3bf 8f4f 	dsb	sy
 8000800:	60fb      	str	r3, [r7, #12]
}
 8000802:	bf00      	nop
 8000804:	e7fe      	b.n	8000804 <prvTaskExitError+0x28>
	__asm volatile
 8000806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080a:	f383 8811 	msr	BASEPRI, r3
 800080e:	f3bf 8f6f 	isb	sy
 8000812:	f3bf 8f4f 	dsb	sy
 8000816:	60bb      	str	r3, [r7, #8]
}
 8000818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800081a:	bf00      	nop
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0fc      	beq.n	800081c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	20000004 	.word	0x20000004
	...

08000840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <pxCurrentTCBConst2>)
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	6808      	ldr	r0, [r1, #0]
 8000846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800084a:	f380 8809 	msr	PSP, r0
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f380 8811 	msr	BASEPRI, r0
 800085a:	4770      	bx	lr
 800085c:	f3af 8000 	nop.w

08000860 <pxCurrentTCBConst2>:
 8000860:	20003f3c 	.word	0x20003f3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop

08000868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <prvPortStartFirstTask+0x24>)
 800086a:	6800      	ldr	r0, [r0, #0]
 800086c:	6800      	ldr	r0, [r0, #0]
 800086e:	f380 8808 	msr	MSP, r0
 8000872:	f04f 0000 	mov.w	r0, #0
 8000876:	f380 8814 	msr	CONTROL, r0
 800087a:	b662      	cpsie	i
 800087c:	b661      	cpsie	f
 800087e:	f3bf 8f4f 	dsb	sy
 8000882:	f3bf 8f6f 	isb	sy
 8000886:	df00      	svc	0
 8000888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800088a:	bf00      	nop
 800088c:	e000ed08 	.word	0xe000ed08

08000890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000896:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <xPortStartScheduler+0x120>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a46      	ldr	r2, [pc, #280]	; (80009b4 <xPortStartScheduler+0x124>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10a      	bne.n	80008b6 <xPortStartScheduler+0x26>
	__asm volatile
 80008a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a4:	f383 8811 	msr	BASEPRI, r3
 80008a8:	f3bf 8f6f 	isb	sy
 80008ac:	f3bf 8f4f 	dsb	sy
 80008b0:	613b      	str	r3, [r7, #16]
}
 80008b2:	bf00      	nop
 80008b4:	e7fe      	b.n	80008b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80008b6:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <xPortStartScheduler+0x120>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <xPortStartScheduler+0x128>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d10a      	bne.n	80008d6 <xPortStartScheduler+0x46>
	__asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	60fb      	str	r3, [r7, #12]
}
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <xPortStartScheduler+0x12c>)
 80008d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	22ff      	movs	r2, #255	; 0xff
 80008e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <xPortStartScheduler+0x130>)
 80008fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <xPortStartScheduler+0x134>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000904:	e009      	b.n	800091a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <xPortStartScheduler+0x134>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3b01      	subs	r3, #1
 800090c:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <xPortStartScheduler+0x134>)
 800090e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	2b80      	cmp	r3, #128	; 0x80
 8000924:	d0ef      	beq.n	8000906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <xPortStartScheduler+0x134>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	d00a      	beq.n	8000948 <xPortStartScheduler+0xb8>
	__asm volatile
 8000932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000936:	f383 8811 	msr	BASEPRI, r3
 800093a:	f3bf 8f6f 	isb	sy
 800093e:	f3bf 8f4f 	dsb	sy
 8000942:	60bb      	str	r3, [r7, #8]
}
 8000944:	bf00      	nop
 8000946:	e7fe      	b.n	8000946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <xPortStartScheduler+0x134>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <xPortStartScheduler+0x134>)
 8000950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <xPortStartScheduler+0x134>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800095a:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <xPortStartScheduler+0x134>)
 800095c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <xPortStartScheduler+0x138>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <xPortStartScheduler+0x138>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <xPortStartScheduler+0x138>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <xPortStartScheduler+0x138>)
 8000978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800097c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800097e:	f000 f8dd 	bl	8000b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <xPortStartScheduler+0x13c>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000988:	f000 f8fc 	bl	8000b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <xPortStartScheduler+0x140>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <xPortStartScheduler+0x140>)
 8000992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000998:	f7ff ff66 	bl	8000868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800099c:	f001 f91c 	bl	8001bd8 <vTaskSwitchContext>
	prvTaskExitError();
 80009a0:	f7ff ff1c 	bl	80007dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00
 80009b4:	410fc271 	.word	0x410fc271
 80009b8:	410fc270 	.word	0x410fc270
 80009bc:	e000e400 	.word	0xe000e400
 80009c0:	20003f34 	.word	0x20003f34
 80009c4:	20003f38 	.word	0x20003f38
 80009c8:	e000ed20 	.word	0xe000ed20
 80009cc:	20000004 	.word	0x20000004
 80009d0:	e000ef34 	.word	0xe000ef34

080009d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
	__asm volatile
 80009da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009de:	f383 8811 	msr	BASEPRI, r3
 80009e2:	f3bf 8f6f 	isb	sy
 80009e6:	f3bf 8f4f 	dsb	sy
 80009ea:	607b      	str	r3, [r7, #4]
}
 80009ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <vPortEnterCritical+0x58>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <vPortEnterCritical+0x58>)
 80009f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <vPortEnterCritical+0x58>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10f      	bne.n	8000a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <vPortEnterCritical+0x5c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00a      	beq.n	8000a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8000a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0e:	f383 8811 	msr	BASEPRI, r3
 8000a12:	f3bf 8f6f 	isb	sy
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	603b      	str	r3, [r7, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	e7fe      	b.n	8000a1e <vPortEnterCritical+0x4a>
	}
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000004 	.word	0x20000004
 8000a30:	e000ed04 	.word	0xe000ed04

08000a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <vPortExitCritical+0x50>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10a      	bne.n	8000a58 <vPortExitCritical+0x24>
	__asm volatile
 8000a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a46:	f383 8811 	msr	BASEPRI, r3
 8000a4a:	f3bf 8f6f 	isb	sy
 8000a4e:	f3bf 8f4f 	dsb	sy
 8000a52:	607b      	str	r3, [r7, #4]
}
 8000a54:	bf00      	nop
 8000a56:	e7fe      	b.n	8000a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <vPortExitCritical+0x50>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <vPortExitCritical+0x50>)
 8000a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <vPortExitCritical+0x50>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <vPortExitCritical+0x42>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000004 	.word	0x20000004
	...

08000a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000a90:	f3ef 8009 	mrs	r0, PSP
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <pxCurrentTCBConst>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	f01e 0f10 	tst.w	lr, #16
 8000aa0:	bf08      	it	eq
 8000aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aaa:	6010      	str	r0, [r2, #0]
 8000aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ab4:	f380 8811 	msr	BASEPRI, r0
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
 8000ac0:	f001 f88a 	bl	8001bd8 <vTaskSwitchContext>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	f380 8811 	msr	BASEPRI, r0
 8000acc:	bc09      	pop	{r0, r3}
 8000ace:	6819      	ldr	r1, [r3, #0]
 8000ad0:	6808      	ldr	r0, [r1, #0]
 8000ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad6:	f01e 0f10 	tst.w	lr, #16
 8000ada:	bf08      	it	eq
 8000adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000ae0:	f380 8809 	msr	PSP, r0
 8000ae4:	f3bf 8f6f 	isb	sy
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	f3af 8000 	nop.w

08000af0 <pxCurrentTCBConst>:
 8000af0:	20003f3c 	.word	0x20003f3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop

08000af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	__asm volatile
 8000afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b02:	f383 8811 	msr	BASEPRI, r3
 8000b06:	f3bf 8f6f 	isb	sy
 8000b0a:	f3bf 8f4f 	dsb	sy
 8000b0e:	607b      	str	r3, [r7, #4]
}
 8000b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000b12:	f000 ffa9 	bl	8001a68 <xTaskIncrementTick>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SysTick_Handler+0x40>)
 8000b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f383 8811 	msr	BASEPRI, r3
}
 8000b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	e000ed04 	.word	0xe000ed04

08000b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <vPortSetupTimerInterrupt+0x34>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <vPortSetupTimerInterrupt+0x38>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <vPortSetupTimerInterrupt+0x3c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <vPortSetupTimerInterrupt+0x40>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	099b      	lsrs	r3, r3, #6
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <vPortSetupTimerInterrupt+0x44>)
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <vPortSetupTimerInterrupt+0x34>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010
 8000b74:	e000e018 	.word	0xe000e018
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	10624dd3 	.word	0x10624dd3
 8000b80:	e000e014 	.word	0xe000e014

08000b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000b94 <vPortEnableVFP+0x10>
 8000b88:	6801      	ldr	r1, [r0, #0]
 8000b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b8e:	6001      	str	r1, [r0, #0]
 8000b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000b92:	bf00      	nop
 8000b94:	e000ed88 	.word	0xe000ed88

08000b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000b9e:	f3ef 8305 	mrs	r3, IPSR
 8000ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d914      	bls.n	8000bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <vPortValidateInterruptPriority+0x70>)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <vPortValidateInterruptPriority+0x74>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	7afa      	ldrb	r2, [r7, #11]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d20a      	bcs.n	8000bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8000bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc2:	f383 8811 	msr	BASEPRI, r3
 8000bc6:	f3bf 8f6f 	isb	sy
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	607b      	str	r3, [r7, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	e7fe      	b.n	8000bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <vPortValidateInterruptPriority+0x78>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <vPortValidateInterruptPriority+0x7c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d90a      	bls.n	8000bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8000be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be8:	f383 8811 	msr	BASEPRI, r3
 8000bec:	f3bf 8f6f 	isb	sy
 8000bf0:	f3bf 8f4f 	dsb	sy
 8000bf4:	603b      	str	r3, [r7, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	e7fe      	b.n	8000bf8 <vPortValidateInterruptPriority+0x60>
	}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e3f0 	.word	0xe000e3f0
 8000c0c:	20003f34 	.word	0x20003f34
 8000c10:	e000ed0c 	.word	0xe000ed0c
 8000c14:	20003f38 	.word	0x20003f38

08000c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10a      	bne.n	8000c42 <xQueueGenericReset+0x2a>
	__asm volatile
 8000c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c30:	f383 8811 	msr	BASEPRI, r3
 8000c34:	f3bf 8f6f 	isb	sy
 8000c38:	f3bf 8f4f 	dsb	sy
 8000c3c:	60bb      	str	r3, [r7, #8]
}
 8000c3e:	bf00      	nop
 8000c40:	e7fe      	b.n	8000c40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000c42:	f7ff fec7 	bl	80009d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	68f9      	ldr	r1, [r7, #12]
 8000c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c52:	fb01 f303 	mul.w	r3, r1, r3
 8000c56:	441a      	add	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c72:	3b01      	subs	r3, #1
 8000c74:	68f9      	ldr	r1, [r7, #12]
 8000c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c78:	fb01 f303 	mul.w	r3, r1, r3
 8000c7c:	441a      	add	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	22ff      	movs	r2, #255	; 0xff
 8000c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d114      	bne.n	8000cc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d01a      	beq.n	8000cd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3310      	adds	r3, #16
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 f81d 	bl	8001ce4 <xTaskRemoveFromEventList>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d012      	beq.n	8000cd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <xQueueGenericReset+0xcc>)
 8000cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	f3bf 8f4f 	dsb	sy
 8000cbc:	f3bf 8f6f 	isb	sy
 8000cc0:	e009      	b.n	8000cd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3310      	adds	r3, #16
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fca0 	bl	800060c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3324      	adds	r3, #36	; 0x24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc9b 	bl	800060c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000cd6:	f7ff fead 	bl	8000a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	e000ed04 	.word	0xe000ed04

08000ce8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10a      	bne.n	8000d12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8000cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d00:	f383 8811 	msr	BASEPRI, r3
 8000d04:	f3bf 8f6f 	isb	sy
 8000d08:	f3bf 8f4f 	dsb	sy
 8000d0c:	613b      	str	r3, [r7, #16]
}
 8000d0e:	bf00      	nop
 8000d10:	e7fe      	b.n	8000d10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	3348      	adds	r3, #72	; 0x48
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fa89 	bl	8000238 <pvPortMalloc>
 8000d26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d011      	beq.n	8000d52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3348      	adds	r3, #72	; 0x48
 8000d36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	4613      	mov	r3, r2
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 f805 	bl	8000d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000d52:	69bb      	ldr	r3, [r7, #24]
	}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d103      	bne.n	8000d78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e002      	b.n	8000d7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff ff43 	bl	8000c18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10a      	bne.n	8000dce <xQueueGenericSend+0x32>
	__asm volatile
 8000db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dbc:	f383 8811 	msr	BASEPRI, r3
 8000dc0:	f3bf 8f6f 	isb	sy
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000dca:	bf00      	nop
 8000dcc:	e7fe      	b.n	8000dcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d103      	bne.n	8000ddc <xQueueGenericSend+0x40>
 8000dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <xQueueGenericSend+0x44>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <xQueueGenericSend+0x46>
 8000de0:	2300      	movs	r3, #0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10a      	bne.n	8000dfc <xQueueGenericSend+0x60>
	__asm volatile
 8000de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dea:	f383 8811 	msr	BASEPRI, r3
 8000dee:	f3bf 8f6f 	isb	sy
 8000df2:	f3bf 8f4f 	dsb	sy
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000df8:	bf00      	nop
 8000dfa:	e7fe      	b.n	8000dfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d103      	bne.n	8000e0a <xQueueGenericSend+0x6e>
 8000e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d101      	bne.n	8000e0e <xQueueGenericSend+0x72>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <xQueueGenericSend+0x74>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <xQueueGenericSend+0x8e>
	__asm volatile
 8000e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	623b      	str	r3, [r7, #32]
}
 8000e26:	bf00      	nop
 8000e28:	e7fe      	b.n	8000e28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e2a:	f001 f91b 	bl	8002064 <xTaskGetSchedulerState>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <xQueueGenericSend+0x9e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <xQueueGenericSend+0xa2>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <xQueueGenericSend+0xa4>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10a      	bne.n	8000e5a <xQueueGenericSend+0xbe>
	__asm volatile
 8000e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	61fb      	str	r3, [r7, #28]
}
 8000e56:	bf00      	nop
 8000e58:	e7fe      	b.n	8000e58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e5a:	f7ff fdbb 	bl	80009d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d302      	bcc.n	8000e70 <xQueueGenericSend+0xd4>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d129      	bne.n	8000ec4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e76:	f000 fa29 	bl	80012cc <prvCopyDataToQueue>
 8000e7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d010      	beq.n	8000ea6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e86:	3324      	adds	r3, #36	; 0x24
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 ff2b 	bl	8001ce4 <xTaskRemoveFromEventList>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e94:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <xQueueGenericSend+0x1f8>)
 8000e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	f3bf 8f4f 	dsb	sy
 8000ea0:	f3bf 8f6f 	isb	sy
 8000ea4:	e00a      	b.n	8000ebc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <xQueueGenericSend+0x1f8>)
 8000eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ebc:	f7ff fdba 	bl	8000a34 <vPortExitCritical>
				return pdPASS;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e063      	b.n	8000f8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000eca:	f7ff fdb3 	bl	8000a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e05c      	b.n	8000f8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 ff63 	bl	8001da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ee6:	f7ff fda5 	bl	8000a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000eea:	f000 fd13 	bl	8001914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000eee:	f7ff fd71 	bl	80009d4 <vPortEnterCritical>
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efe:	d103      	bne.n	8000f08 <xQueueGenericSend+0x16c>
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d103      	bne.n	8000f1e <xQueueGenericSend+0x182>
 8000f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f1e:	f7ff fd89 	bl	8000a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f22:	1d3a      	adds	r2, r7, #4
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 ff52 	bl	8001dd4 <xTaskCheckForTimeOut>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d124      	bne.n	8000f80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f38:	f000 fac0 	bl	80014bc <prvIsQueueFull>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d018      	beq.n	8000f74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f44:	3310      	adds	r3, #16
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fea6 	bl	8001c9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f52:	f000 fa4b 	bl	80013ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f56:	f000 fceb 	bl	8001930 <xTaskResumeAll>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f47f af7c 	bne.w	8000e5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <xQueueGenericSend+0x1f8>)
 8000f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	f3bf 8f4f 	dsb	sy
 8000f6e:	f3bf 8f6f 	isb	sy
 8000f72:	e772      	b.n	8000e5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f76:	f000 fa39 	bl	80013ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f7a:	f000 fcd9 	bl	8001930 <xTaskResumeAll>
 8000f7e:	e76c      	b.n	8000e5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f82:	f000 fa33 	bl	80013ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f86:	f000 fcd3 	bl	8001930 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000f8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	e000ed04 	.word	0xe000ed04

08000f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b090      	sub	sp, #64	; 0x40
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10a      	bne.n	8000fc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <xQueueGenericSendFromISR+0x3c>
 8000fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <xQueueGenericSendFromISR+0x40>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <xQueueGenericSendFromISR+0x42>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10a      	bne.n	8000ff4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000ff0:	bf00      	nop
 8000ff2:	e7fe      	b.n	8000ff2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d103      	bne.n	8001002 <xQueueGenericSendFromISR+0x6a>
 8000ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <xQueueGenericSendFromISR+0x6e>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <xQueueGenericSendFromISR+0x70>
 8001006:	2300      	movs	r3, #0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10a      	bne.n	8001022 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800100c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001010:	f383 8811 	msr	BASEPRI, r3
 8001014:	f3bf 8f6f 	isb	sy
 8001018:	f3bf 8f4f 	dsb	sy
 800101c:	623b      	str	r3, [r7, #32]
}
 800101e:	bf00      	nop
 8001020:	e7fe      	b.n	8001020 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001022:	f7ff fdb9 	bl	8000b98 <vPortValidateInterruptPriority>
	__asm volatile
 8001026:	f3ef 8211 	mrs	r2, BASEPRI
 800102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800102e:	f383 8811 	msr	BASEPRI, r3
 8001032:	f3bf 8f6f 	isb	sy
 8001036:	f3bf 8f4f 	dsb	sy
 800103a:	61fa      	str	r2, [r7, #28]
 800103c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800103e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104a:	429a      	cmp	r2, r3
 800104c:	d302      	bcc.n	8001054 <xQueueGenericSendFromISR+0xbc>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d12f      	bne.n	80010b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800105a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800106a:	f000 f92f 	bl	80012cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800106e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001076:	d112      	bne.n	800109e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	2b00      	cmp	r3, #0
 800107e:	d016      	beq.n	80010ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001082:	3324      	adds	r3, #36	; 0x24
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fe2d 	bl	8001ce4 <xTaskRemoveFromEventList>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00e      	beq.n	80010ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e007      	b.n	80010ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800109e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	b25a      	sxtb	r2, r3
 80010a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80010ae:	2301      	movs	r3, #1
 80010b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80010b2:	e001      	b.n	80010b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	617b      	str	r3, [r7, #20]
	__asm volatile
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f383 8811 	msr	BASEPRI, r3
}
 80010c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3740      	adds	r7, #64	; 0x40
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10a      	bne.n	8001100 <xQueueReceive+0x30>
	__asm volatile
 80010ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ee:	f383 8811 	msr	BASEPRI, r3
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	623b      	str	r3, [r7, #32]
}
 80010fc:	bf00      	nop
 80010fe:	e7fe      	b.n	80010fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <xQueueReceive+0x3e>
 8001106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <xQueueReceive+0x42>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <xQueueReceive+0x44>
 8001112:	2300      	movs	r3, #0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <xQueueReceive+0x5e>
	__asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	61fb      	str	r3, [r7, #28]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800112e:	f000 ff99 	bl	8002064 <xTaskGetSchedulerState>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <xQueueReceive+0x6e>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <xQueueReceive+0x72>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <xQueueReceive+0x74>
 8001142:	2300      	movs	r3, #0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10a      	bne.n	800115e <xQueueReceive+0x8e>
	__asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	61bb      	str	r3, [r7, #24]
}
 800115a:	bf00      	nop
 800115c:	e7fe      	b.n	800115c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800115e:	f7ff fc39 	bl	80009d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001166:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01f      	beq.n	80011ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001172:	f000 f915 	bl	80013a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00f      	beq.n	80011a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	3310      	adds	r3, #16
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fdaa 	bl	8001ce4 <xTaskRemoveFromEventList>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <xQueueReceive+0x1bc>)
 8001198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	f3bf 8f4f 	dsb	sy
 80011a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80011a6:	f7ff fc45 	bl	8000a34 <vPortExitCritical>
				return pdPASS;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e069      	b.n	8001282 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d103      	bne.n	80011bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80011b4:	f7ff fc3e 	bl	8000a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e062      	b.n	8001282 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fdee 	bl	8001da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011d0:	f7ff fc30 	bl	8000a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011d4:	f000 fb9e 	bl	8001914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80011d8:	f7ff fbfc 	bl	80009d4 <vPortEnterCritical>
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d103      	bne.n	80011f2 <xQueueReceive+0x122>
 80011ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fe:	d103      	bne.n	8001208 <xQueueReceive+0x138>
 8001200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001208:	f7ff fc14 	bl	8000a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800120c:	1d3a      	adds	r2, r7, #4
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fddd 	bl	8001dd4 <xTaskCheckForTimeOut>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d123      	bne.n	8001268 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001222:	f000 f935 	bl	8001490 <prvIsQueueEmpty>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d017      	beq.n	800125c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	3324      	adds	r3, #36	; 0x24
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fd31 	bl	8001c9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800123a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800123c:	f000 f8d6 	bl	80013ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001240:	f000 fb76 	bl	8001930 <xTaskResumeAll>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d189      	bne.n	800115e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <xQueueReceive+0x1bc>)
 800124c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	f3bf 8f4f 	dsb	sy
 8001256:	f3bf 8f6f 	isb	sy
 800125a:	e780      	b.n	800115e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800125c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800125e:	f000 f8c5 	bl	80013ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001262:	f000 fb65 	bl	8001930 <xTaskResumeAll>
 8001266:	e77a      	b.n	800115e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800126a:	f000 f8bf 	bl	80013ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800126e:	f000 fb5f 	bl	8001930 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001274:	f000 f90c 	bl	8001490 <prvIsQueueEmpty>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	f43f af6f 	beq.w	800115e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001280:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001282:	4618      	mov	r0, r3
 8001284:	3730      	adds	r7, #48	; 0x30
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000ed04 	.word	0xe000ed04

08001290 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10a      	bne.n	80012b4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a2:	f383 8811 	msr	BASEPRI, r3
 80012a6:	f3bf 8f6f 	isb	sy
 80012aa:	f3bf 8f4f 	dsb	sy
 80012ae:	60bb      	str	r3, [r7, #8]
}
 80012b0:	bf00      	nop
 80012b2:	e7fe      	b.n	80012b2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80012b4:	f7ff fb8e 	bl	80009d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012bc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80012be:	f7ff fbb9 	bl	8000a34 <vPortExitCritical>

	return uxReturn;
 80012c2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10d      	bne.n	8001306 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d14d      	bne.n	800138e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fed2 	bl	80020a0 <xTaskPriorityDisinherit>
 80012fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	e043      	b.n	800138e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d119      	bne.n	8001340 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6858      	ldr	r0, [r3, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	461a      	mov	r2, r3
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	f001 fb56 	bl	80029c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	441a      	add	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	429a      	cmp	r2, r3
 8001334:	d32b      	bcc.n	800138e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	e026      	b.n	800138e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68d8      	ldr	r0, [r3, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	461a      	mov	r2, r3
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	f001 fb3c 	bl	80029c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	425b      	negs	r3, r3
 800135a:	441a      	add	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	425b      	negs	r3, r3
 8001376:	441a      	add	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d105      	bne.n	800138e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	3b01      	subs	r3, #1
 800138c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001396:	697b      	ldr	r3, [r7, #20]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d018      	beq.n	80013e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	441a      	add	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d303      	bcc.n	80013d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68d9      	ldr	r1, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	461a      	mov	r2, r3
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f001 faf2 	bl	80029c8 <memcpy>
	}
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80013f4:	f7ff faee 	bl	80009d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001400:	e011      	b.n	8001426 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	2b00      	cmp	r3, #0
 8001408:	d012      	beq.n	8001430 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3324      	adds	r3, #36	; 0x24
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fc68 	bl	8001ce4 <xTaskRemoveFromEventList>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800141a:	f000 fd3d 	bl	8001e98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3b01      	subs	r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dce9      	bgt.n	8001402 <prvUnlockQueue+0x16>
 800142e:	e000      	b.n	8001432 <prvUnlockQueue+0x46>
					break;
 8001430:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	22ff      	movs	r2, #255	; 0xff
 8001436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800143a:	f7ff fafb 	bl	8000a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800143e:	f7ff fac9 	bl	80009d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001448:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800144a:	e011      	b.n	8001470 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d012      	beq.n	800147a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3310      	adds	r3, #16
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fc43 	bl	8001ce4 <xTaskRemoveFromEventList>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001464:	f000 fd18 	bl	8001e98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	3b01      	subs	r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001474:	2b00      	cmp	r3, #0
 8001476:	dce9      	bgt.n	800144c <prvUnlockQueue+0x60>
 8001478:	e000      	b.n	800147c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800147a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	22ff      	movs	r2, #255	; 0xff
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001484:	f7ff fad6 	bl	8000a34 <vPortExitCritical>
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001498:	f7ff fa9c 	bl	80009d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e001      	b.n	80014ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014ae:	f7ff fac1 	bl	8000a34 <vPortExitCritical>

	return xReturn;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014c4:	f7ff fa86 	bl	80009d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d102      	bne.n	80014da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e001      	b.n	80014de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014de:	f7ff faa9 	bl	8000a34 <vPortExitCritical>

	return xReturn;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af04      	add	r7, sp, #16
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80014fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10a      	bne.n	8001516 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001504:	f383 8811 	msr	BASEPRI, r3
 8001508:	f3bf 8f6f 	isb	sy
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	623b      	str	r3, [r7, #32]
}
 8001512:	bf00      	nop
 8001514:	e7fe      	b.n	8001514 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10a      	bne.n	8001532 <xTaskCreateStatic+0x46>
	__asm volatile
 800151c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001520:	f383 8811 	msr	BASEPRI, r3
 8001524:	f3bf 8f6f 	isb	sy
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	61fb      	str	r3, [r7, #28]
}
 800152e:	bf00      	nop
 8001530:	e7fe      	b.n	8001530 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001532:	23a0      	movs	r3, #160	; 0xa0
 8001534:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2ba0      	cmp	r3, #160	; 0xa0
 800153a:	d00a      	beq.n	8001552 <xTaskCreateStatic+0x66>
	__asm volatile
 800153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	61bb      	str	r3, [r7, #24]
}
 800154e:	bf00      	nop
 8001550:	e7fe      	b.n	8001550 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001552:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01e      	beq.n	8001598 <xTaskCreateStatic+0xac>
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01b      	beq.n	8001598 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001568:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	2202      	movs	r2, #2
 800156e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001572:	2300      	movs	r3, #0
 8001574:	9303      	str	r3, [sp, #12]
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f850 	bl	8001630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001592:	f000 f8eb 	bl	800176c <prvAddNewTaskToReadyList>
 8001596:	e001      	b.n	800159c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800159c:	697b      	ldr	r3, [r7, #20]
	}
 800159e:	4618      	mov	r0, r3
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b08c      	sub	sp, #48	; 0x30
 80015aa:	af04      	add	r7, sp, #16
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4613      	mov	r3, r2
 80015b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fe3c 	bl	8000238 <pvPortMalloc>
 80015c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00e      	beq.n	80015e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80015c8:	20a0      	movs	r0, #160	; 0xa0
 80015ca:	f7fe fe35 	bl	8000238 <pvPortMalloc>
 80015ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
 80015dc:	e005      	b.n	80015ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7fe fef6 	bl	80003d0 <vPortFree>
 80015e4:	e001      	b.n	80015ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d017      	beq.n	8001620 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80015f8:	88fa      	ldrh	r2, [r7, #6]
 80015fa:	2300      	movs	r3, #0
 80015fc:	9303      	str	r3, [sp, #12]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 f80e 	bl	8001630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001614:	69f8      	ldr	r0, [r7, #28]
 8001616:	f000 f8a9 	bl	800176c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800161a:	2301      	movs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	e002      	b.n	8001626 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001626:	69bb      	ldr	r3, [r7, #24]
	}
 8001628:	4618      	mov	r0, r3
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001648:	3b01      	subs	r3, #1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f023 0307 	bic.w	r3, r3, #7
 8001656:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00a      	beq.n	8001678 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001666:	f383 8811 	msr	BASEPRI, r3
 800166a:	f3bf 8f6f 	isb	sy
 800166e:	f3bf 8f4f 	dsb	sy
 8001672:	617b      	str	r3, [r7, #20]
}
 8001674:	bf00      	nop
 8001676:	e7fe      	b.n	8001676 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01f      	beq.n	80016be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	e012      	b.n	80016aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	7819      	ldrb	r1, [r3, #0]
 800168c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	3334      	adds	r3, #52	; 0x34
 8001694:	460a      	mov	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	3301      	adds	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d9e9      	bls.n	8001684 <prvInitialiseNewTask+0x54>
 80016b0:	e000      	b.n	80016b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80016b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016bc:	e003      	b.n	80016c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d901      	bls.n	80016d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016cc:	2306      	movs	r3, #6
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80016d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80016d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	2200      	movs	r2, #0
 80016e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	3304      	adds	r3, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ffb0 	bl	800064c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ee:	3318      	adds	r3, #24
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ffab 	bl	800064c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	f1c3 0207 	rsb	r2, r3, #7
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	2200      	movs	r2, #0
 8001710:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	2200      	movs	r2, #0
 8001718:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	334c      	adds	r3, #76	; 0x4c
 8001720:	224c      	movs	r2, #76	; 0x4c
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f001 f8b3 	bl	8002890 <memset>
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <prvInitialiseNewTask+0x130>)
 800172e:	651a      	str	r2, [r3, #80]	; 0x50
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <prvInitialiseNewTask+0x134>)
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <prvInitialiseNewTask+0x138>)
 800173a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	68f9      	ldr	r1, [r7, #12]
 8001740:	69b8      	ldr	r0, [r7, #24]
 8001742:	f7ff f817 	bl	8000774 <pxPortInitialiseStack>
 8001746:	4602      	mov	r2, r0
 8001748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001756:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000407c 	.word	0x2000407c
 8001764:	200040e4 	.word	0x200040e4
 8001768:	2000414c 	.word	0x2000414c

0800176c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001774:	f7ff f92e 	bl	80009d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <prvAddNewTaskToReadyList+0xb8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a29      	ldr	r2, [pc, #164]	; (8001824 <prvAddNewTaskToReadyList+0xb8>)
 8001780:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <prvAddNewTaskToReadyList+0xbc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800178a:	4a27      	ldr	r2, [pc, #156]	; (8001828 <prvAddNewTaskToReadyList+0xbc>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <prvAddNewTaskToReadyList+0xb8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d110      	bne.n	80017ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001798:	f000 fba2 	bl	8001ee0 <prvInitialiseTaskLists>
 800179c:	e00d      	b.n	80017ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <prvAddNewTaskToReadyList+0xc0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <prvAddNewTaskToReadyList+0xbc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d802      	bhi.n	80017ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <prvAddNewTaskToReadyList+0xbc>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <prvAddNewTaskToReadyList+0xc4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <prvAddNewTaskToReadyList+0xc4>)
 80017c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	2201      	movs	r2, #1
 80017ca:	409a      	lsls	r2, r3
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <prvAddNewTaskToReadyList+0xc8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <prvAddNewTaskToReadyList+0xc8>)
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <prvAddNewTaskToReadyList+0xcc>)
 80017e4:	441a      	add	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f7fe ff3a 	bl	8000666 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80017f2:	f7ff f91f 	bl	8000a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <prvAddNewTaskToReadyList+0xc0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00e      	beq.n	800181c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <prvAddNewTaskToReadyList+0xbc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <prvAddNewTaskToReadyList+0xd0>)
 800180e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000403c 	.word	0x2000403c
 8001828:	20003f3c 	.word	0x20003f3c
 800182c:	20004048 	.word	0x20004048
 8001830:	20004058 	.word	0x20004058
 8001834:	20004044 	.word	0x20004044
 8001838:	20003f40 	.word	0x20003f40
 800183c:	e000ed04 	.word	0xe000ed04

08001840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800184e:	463a      	mov	r2, r7
 8001850:	1d39      	adds	r1, r7, #4
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fcd4 	bl	8000204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	9202      	str	r2, [sp, #8]
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2300      	movs	r3, #0
 800186c:	460a      	mov	r2, r1
 800186e:	4921      	ldr	r1, [pc, #132]	; (80018f4 <vTaskStartScheduler+0xb4>)
 8001870:	4821      	ldr	r0, [pc, #132]	; (80018f8 <vTaskStartScheduler+0xb8>)
 8001872:	f7ff fe3b 	bl	80014ec <xTaskCreateStatic>
 8001876:	4603      	mov	r3, r0
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <vTaskStartScheduler+0xbc>)
 800187a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <vTaskStartScheduler+0xbc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e001      	b.n	800188e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d11b      	bne.n	80018cc <vTaskStartScheduler+0x8c>
	__asm volatile
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	613b      	str	r3, [r7, #16]
}
 80018a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <vTaskStartScheduler+0xc0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	334c      	adds	r3, #76	; 0x4c
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <vTaskStartScheduler+0xc4>)
 80018b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <vTaskStartScheduler+0xc8>)
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <vTaskStartScheduler+0xcc>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <vTaskStartScheduler+0xd0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80018c6:	f7fe ffe3 	bl	8000890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80018ca:	e00e      	b.n	80018ea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d2:	d10a      	bne.n	80018ea <vTaskStartScheduler+0xaa>
	__asm volatile
 80018d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d8:	f383 8811 	msr	BASEPRI, r3
 80018dc:	f3bf 8f6f 	isb	sy
 80018e0:	f3bf 8f4f 	dsb	sy
 80018e4:	60fb      	str	r3, [r7, #12]
}
 80018e6:	bf00      	nop
 80018e8:	e7fe      	b.n	80018e8 <vTaskStartScheduler+0xa8>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	08002aac 	.word	0x08002aac
 80018f8:	08001eb1 	.word	0x08001eb1
 80018fc:	20004060 	.word	0x20004060
 8001900:	20003f3c 	.word	0x20003f3c
 8001904:	20000054 	.word	0x20000054
 8001908:	2000405c 	.word	0x2000405c
 800190c:	20004048 	.word	0x20004048
 8001910:	20004040 	.word	0x20004040

08001914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <vTaskSuspendAll+0x18>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	4a03      	ldr	r2, [pc, #12]	; (800192c <vTaskSuspendAll+0x18>)
 8001920:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	20004064 	.word	0x20004064

08001930 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <xTaskResumeAll+0x114>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <xTaskResumeAll+0x2c>
	__asm volatile
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	603b      	str	r3, [r7, #0]
}
 8001958:	bf00      	nop
 800195a:	e7fe      	b.n	800195a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800195c:	f7ff f83a 	bl	80009d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <xTaskResumeAll+0x114>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3b01      	subs	r3, #1
 8001966:	4a37      	ldr	r2, [pc, #220]	; (8001a44 <xTaskResumeAll+0x114>)
 8001968:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <xTaskResumeAll+0x114>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d161      	bne.n	8001a36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <xTaskResumeAll+0x118>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d05d      	beq.n	8001a36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800197a:	e02e      	b.n	80019da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <xTaskResumeAll+0x11c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3318      	adds	r3, #24
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fec9 	bl	8000720 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fec4 	bl	8000720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	2201      	movs	r2, #1
 800199e:	409a      	lsls	r2, r3
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <xTaskResumeAll+0x120>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <xTaskResumeAll+0x120>)
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <xTaskResumeAll+0x124>)
 80019b8:	441a      	add	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3304      	adds	r3, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f7fe fe50 	bl	8000666 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <xTaskResumeAll+0x128>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d302      	bcc.n	80019da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <xTaskResumeAll+0x12c>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <xTaskResumeAll+0x11c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1cc      	bne.n	800197c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80019e8:	f000 fb1c 	bl	8002024 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <xTaskResumeAll+0x130>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80019f8:	f000 f836 	bl	8001a68 <xTaskIncrementTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <xTaskResumeAll+0x12c>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f1      	bne.n	80019f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <xTaskResumeAll+0x130>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <xTaskResumeAll+0x12c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <xTaskResumeAll+0x134>)
 8001a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f3bf 8f4f 	dsb	sy
 8001a32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a36:	f7fe fffd 	bl	8000a34 <vPortExitCritical>

	return xAlreadyYielded;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20004064 	.word	0x20004064
 8001a48:	2000403c 	.word	0x2000403c
 8001a4c:	20003ffc 	.word	0x20003ffc
 8001a50:	20004044 	.word	0x20004044
 8001a54:	20003f40 	.word	0x20003f40
 8001a58:	20003f3c 	.word	0x20003f3c
 8001a5c:	20004050 	.word	0x20004050
 8001a60:	2000404c 	.word	0x2000404c
 8001a64:	e000ed04 	.word	0xe000ed04

08001a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <xTaskIncrementTick+0x144>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 808e 	bne.w	8001b98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <xTaskIncrementTick+0x148>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a84:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <xTaskIncrementTick+0x148>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d120      	bne.n	8001ad2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <xTaskIncrementTick+0x14c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00a      	beq.n	8001ab0 <xTaskIncrementTick+0x48>
	__asm volatile
 8001a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9e:	f383 8811 	msr	BASEPRI, r3
 8001aa2:	f3bf 8f6f 	isb	sy
 8001aa6:	f3bf 8f4f 	dsb	sy
 8001aaa:	603b      	str	r3, [r7, #0]
}
 8001aac:	bf00      	nop
 8001aae:	e7fe      	b.n	8001aae <xTaskIncrementTick+0x46>
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <xTaskIncrementTick+0x14c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <xTaskIncrementTick+0x150>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <xTaskIncrementTick+0x14c>)
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <xTaskIncrementTick+0x150>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <xTaskIncrementTick+0x154>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a3c      	ldr	r2, [pc, #240]	; (8001bbc <xTaskIncrementTick+0x154>)
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	f000 faa9 	bl	8002024 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <xTaskIncrementTick+0x158>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d348      	bcc.n	8001b6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <xTaskIncrementTick+0x14c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <xTaskIncrementTick+0x158>)
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	601a      	str	r2, [r3, #0]
					break;
 8001aee:	e03e      	b.n	8001b6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001af0:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <xTaskIncrementTick+0x14c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d203      	bcs.n	8001b10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b08:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <xTaskIncrementTick+0x158>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b0e:	e02e      	b.n	8001b6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fe03 	bl	8000720 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3318      	adds	r3, #24
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fdfa 	bl	8000720 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	2201      	movs	r2, #1
 8001b32:	409a      	lsls	r2, r3
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <xTaskIncrementTick+0x15c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <xTaskIncrementTick+0x15c>)
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <xTaskIncrementTick+0x160>)
 8001b4c:	441a      	add	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3304      	adds	r3, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7fe fd86 	bl	8000666 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <xTaskIncrementTick+0x164>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3b9      	bcc.n	8001adc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b6c:	e7b6      	b.n	8001adc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <xTaskIncrementTick+0x164>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b74:	4914      	ldr	r1, [pc, #80]	; (8001bc8 <xTaskIncrementTick+0x160>)
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d901      	bls.n	8001b8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <xTaskIncrementTick+0x168>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e004      	b.n	8001ba2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <xTaskIncrementTick+0x16c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <xTaskIncrementTick+0x16c>)
 8001ba0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ba2:	697b      	ldr	r3, [r7, #20]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20004064 	.word	0x20004064
 8001bb0:	20004040 	.word	0x20004040
 8001bb4:	20003ff4 	.word	0x20003ff4
 8001bb8:	20003ff8 	.word	0x20003ff8
 8001bbc:	20004054 	.word	0x20004054
 8001bc0:	2000405c 	.word	0x2000405c
 8001bc4:	20004044 	.word	0x20004044
 8001bc8:	20003f40 	.word	0x20003f40
 8001bcc:	20003f3c 	.word	0x20003f3c
 8001bd0:	20004050 	.word	0x20004050
 8001bd4:	2000404c 	.word	0x2000404c

08001bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <vTaskSwitchContext+0xac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <vTaskSwitchContext+0xb0>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001bec:	e044      	b.n	8001c78 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <vTaskSwitchContext+0xb0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <vTaskSwitchContext+0xb4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	f1c3 031f 	rsb	r3, r3, #31
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	4921      	ldr	r1, [pc, #132]	; (8001c90 <vTaskSwitchContext+0xb8>)
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8001c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	607b      	str	r3, [r7, #4]
}
 8001c30:	bf00      	nop
 8001c32:	e7fe      	b.n	8001c32 <vTaskSwitchContext+0x5a>
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <vTaskSwitchContext+0xb8>)
 8001c40:	4413      	add	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	3308      	adds	r3, #8
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d104      	bne.n	8001c64 <vTaskSwitchContext+0x8c>
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <vTaskSwitchContext+0xbc>)
 8001c6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <vTaskSwitchContext+0xbc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	334c      	adds	r3, #76	; 0x4c
 8001c74:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <vTaskSwitchContext+0xc0>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	20004064 	.word	0x20004064
 8001c88:	20004050 	.word	0x20004050
 8001c8c:	20004044 	.word	0x20004044
 8001c90:	20003f40 	.word	0x20003f40
 8001c94:	20003f3c 	.word	0x20003f3c
 8001c98:	20000054 	.word	0x20000054

08001c9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10a      	bne.n	8001cc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb0:	f383 8811 	msr	BASEPRI, r3
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	f3bf 8f4f 	dsb	sy
 8001cbc:	60fb      	str	r3, [r7, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	e7fe      	b.n	8001cc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <vTaskPlaceOnEventList+0x44>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3318      	adds	r3, #24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fcef 	bl	80006ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f000 fa6a 	bl	80021ac <prvAddCurrentTaskToDelayedList>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20003f3c 	.word	0x20003f3c

08001ce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10a      	bne.n	8001d10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	60fb      	str	r3, [r7, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	e7fe      	b.n	8001d0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	3318      	adds	r3, #24
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fd03 	bl	8000720 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <xTaskRemoveFromEventList+0xac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11c      	bne.n	8001d5c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	3304      	adds	r3, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fcfa 	bl	8000720 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	2201      	movs	r2, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <xTaskRemoveFromEventList+0xb0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <xTaskRemoveFromEventList+0xb0>)
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <xTaskRemoveFromEventList+0xb4>)
 8001d4c:	441a      	add	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	3304      	adds	r3, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f7fe fc86 	bl	8000666 <vListInsertEnd>
 8001d5a:	e005      	b.n	8001d68 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	4619      	mov	r1, r3
 8001d62:	480e      	ldr	r0, [pc, #56]	; (8001d9c <xTaskRemoveFromEventList+0xb8>)
 8001d64:	f7fe fc7f 	bl	8000666 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <xTaskRemoveFromEventList+0xbc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d905      	bls.n	8001d82 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <xTaskRemoveFromEventList+0xc0>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e001      	b.n	8001d86 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001d86:	697b      	ldr	r3, [r7, #20]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20004064 	.word	0x20004064
 8001d94:	20004044 	.word	0x20004044
 8001d98:	20003f40 	.word	0x20003f40
 8001d9c:	20003ffc 	.word	0x20003ffc
 8001da0:	20003f3c 	.word	0x20003f3c
 8001da4:	20004050 	.word	0x20004050

08001da8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <vTaskInternalSetTimeOutState+0x24>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <vTaskInternalSetTimeOutState+0x28>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	605a      	str	r2, [r3, #4]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20004054 	.word	0x20004054
 8001dd0:	20004040 	.word	0x20004040

08001dd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	613b      	str	r3, [r7, #16]
}
 8001df6:	bf00      	nop
 8001df8:	e7fe      	b.n	8001df8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	60fb      	str	r3, [r7, #12]
}
 8001e12:	bf00      	nop
 8001e14:	e7fe      	b.n	8001e14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001e16:	f7fe fddd 	bl	80009d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <xTaskCheckForTimeOut+0xbc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e32:	d102      	bne.n	8001e3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e023      	b.n	8001e82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <xTaskCheckForTimeOut+0xc0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d007      	beq.n	8001e56 <xTaskCheckForTimeOut+0x82>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e50:	2301      	movs	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	e015      	b.n	8001e82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d20b      	bcs.n	8001e78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff9b 	bl	8001da8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e004      	b.n	8001e82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001e82:	f7fe fdd7 	bl	8000a34 <vPortExitCritical>

	return xReturn;
 8001e86:	69fb      	ldr	r3, [r7, #28]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20004040 	.word	0x20004040
 8001e94:	20004054 	.word	0x20004054

08001e98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <vTaskMissedYield+0x14>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	20004050 	.word	0x20004050

08001eb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001eb8:	f000 f852 	bl	8001f60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <prvIdleTask+0x28>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d9f9      	bls.n	8001eb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <prvIdleTask+0x2c>)
 8001ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ed4:	e7f0      	b.n	8001eb8 <prvIdleTask+0x8>
 8001ed6:	bf00      	nop
 8001ed8:	20003f40 	.word	0x20003f40
 8001edc:	e000ed04 	.word	0xe000ed04

08001ee0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	e00c      	b.n	8001f06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <prvInitialiseTaskLists+0x60>)
 8001ef8:	4413      	add	r3, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb86 	bl	800060c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3301      	adds	r3, #1
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b06      	cmp	r3, #6
 8001f0a:	d9ef      	bls.n	8001eec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <prvInitialiseTaskLists+0x64>)
 8001f0e:	f7fe fb7d 	bl	800060c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <prvInitialiseTaskLists+0x68>)
 8001f14:	f7fe fb7a 	bl	800060c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <prvInitialiseTaskLists+0x6c>)
 8001f1a:	f7fe fb77 	bl	800060c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f1e:	480c      	ldr	r0, [pc, #48]	; (8001f50 <prvInitialiseTaskLists+0x70>)
 8001f20:	f7fe fb74 	bl	800060c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <prvInitialiseTaskLists+0x74>)
 8001f26:	f7fe fb71 	bl	800060c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <prvInitialiseTaskLists+0x78>)
 8001f2c:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <prvInitialiseTaskLists+0x64>)
 8001f2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <prvInitialiseTaskLists+0x7c>)
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <prvInitialiseTaskLists+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20003f40 	.word	0x20003f40
 8001f44:	20003fcc 	.word	0x20003fcc
 8001f48:	20003fe0 	.word	0x20003fe0
 8001f4c:	20003ffc 	.word	0x20003ffc
 8001f50:	20004010 	.word	0x20004010
 8001f54:	20004028 	.word	0x20004028
 8001f58:	20003ff4 	.word	0x20003ff4
 8001f5c:	20003ff8 	.word	0x20003ff8

08001f60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f66:	e019      	b.n	8001f9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f68:	f7fe fd34 	bl	80009d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <prvCheckTasksWaitingTermination+0x50>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fbd1 	bl	8000720 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <prvCheckTasksWaitingTermination+0x54>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <prvCheckTasksWaitingTermination+0x54>)
 8001f86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <prvCheckTasksWaitingTermination+0x58>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <prvCheckTasksWaitingTermination+0x58>)
 8001f90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001f92:	f7fe fd4f 	bl	8000a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f810 	bl	8001fbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <prvCheckTasksWaitingTermination+0x58>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e1      	bne.n	8001f68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20004010 	.word	0x20004010
 8001fb4:	2000403c 	.word	0x2000403c
 8001fb8:	20004024 	.word	0x20004024

08001fbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	334c      	adds	r3, #76	; 0x4c
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fc7b 	bl	80028c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d108      	bne.n	8001fea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe f9f7 	bl	80003d0 <vPortFree>
				vPortFree( pxTCB );
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe f9f4 	bl	80003d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fe8:	e018      	b.n	800201c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d103      	bne.n	8001ffc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe f9eb 	bl	80003d0 <vPortFree>
	}
 8001ffa:	e00f      	b.n	800201c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002002:	2b02      	cmp	r3, #2
 8002004:	d00a      	beq.n	800201c <prvDeleteTCB+0x60>
	__asm volatile
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	60fb      	str	r3, [r7, #12]
}
 8002018:	bf00      	nop
 800201a:	e7fe      	b.n	800201a <prvDeleteTCB+0x5e>
	}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <prvResetNextTaskUnblockTime+0x38>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <prvResetNextTaskUnblockTime+0x3c>)
 8002036:	f04f 32ff 	mov.w	r2, #4294967295
 800203a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800203c:	e008      	b.n	8002050 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <prvResetNextTaskUnblockTime+0x38>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <prvResetNextTaskUnblockTime+0x3c>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20003ff4 	.word	0x20003ff4
 8002060:	2000405c 	.word	0x2000405c

08002064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <xTaskGetSchedulerState+0x34>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002072:	2301      	movs	r3, #1
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	e008      	b.n	800208a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <xTaskGetSchedulerState+0x38>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002080:	2302      	movs	r3, #2
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	e001      	b.n	800208a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800208a:	687b      	ldr	r3, [r7, #4]
	}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	20004048 	.word	0x20004048
 800209c:	20004064 	.word	0x20004064

080020a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06e      	beq.n	8002194 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <xTaskPriorityDisinherit+0x100>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d00a      	beq.n	80020d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	60fb      	str	r3, [r7, #12]
}
 80020d2:	bf00      	nop
 80020d4:	e7fe      	b.n	80020d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	60bb      	str	r3, [r7, #8]
}
 80020f0:	bf00      	nop
 80020f2:	e7fe      	b.n	80020f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	429a      	cmp	r2, r3
 8002108:	d044      	beq.n	8002194 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210e:	2b00      	cmp	r3, #0
 8002110:	d140      	bne.n	8002194 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	3304      	adds	r3, #4
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb02 	bl	8000720 <uxListRemove>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002126:	491f      	ldr	r1, [pc, #124]	; (80021a4 <xTaskPriorityDisinherit+0x104>)
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <xTaskPriorityDisinherit+0xae>
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	2201      	movs	r2, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <xTaskPriorityDisinherit+0x108>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4013      	ands	r3, r2
 800214a:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <xTaskPriorityDisinherit+0x108>)
 800214c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f1c3 0207 	rsb	r2, r3, #7
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	2201      	movs	r2, #1
 8002168:	409a      	lsls	r2, r3
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <xTaskPriorityDisinherit+0x108>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <xTaskPriorityDisinherit+0x108>)
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <xTaskPriorityDisinherit+0x104>)
 8002182:	441a      	add	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f7fe fa6b 	bl	8000666 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002190:	2301      	movs	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002194:	697b      	ldr	r3, [r7, #20]
	}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20003f3c 	.word	0x20003f3c
 80021a4:	20003f40 	.word	0x20003f40
 80021a8:	20004044 	.word	0x20004044

080021ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <prvAddCurrentTaskToDelayedList+0xb0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3304      	adds	r3, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe faac 	bl	8000720 <uxListRemove>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10b      	bne.n	80021e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	2201      	movs	r2, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4013      	ands	r3, r2
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80021e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d10a      	bne.n	8002204 <prvAddCurrentTaskToDelayedList+0x58>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3304      	adds	r3, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	481a      	ldr	r0, [pc, #104]	; (8002268 <prvAddCurrentTaskToDelayedList+0xbc>)
 80021fe:	f7fe fa32 	bl	8000666 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002202:	e026      	b.n	8002252 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d209      	bcs.n	8002230 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <prvAddCurrentTaskToDelayedList+0xc0>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3304      	adds	r3, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe fa40 	bl	80006ae <vListInsert>
}
 800222e:	e010      	b.n	8002252 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3304      	adds	r3, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7fe fa36 	bl	80006ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	429a      	cmp	r2, r3
 800224a:	d202      	bcs.n	8002252 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800224c:	4a09      	ldr	r2, [pc, #36]	; (8002274 <prvAddCurrentTaskToDelayedList+0xc8>)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20004040 	.word	0x20004040
 8002260:	20003f3c 	.word	0x20003f3c
 8002264:	20004044 	.word	0x20004044
 8002268:	20004028 	.word	0x20004028
 800226c:	20003ff8 	.word	0x20003ff8
 8002270:	20003ff4 	.word	0x20003ff4
 8002274:	2000405c 	.word	0x2000405c

08002278 <CMD_Parse_Brightness>:
#include "CMD_Parse_Brightness.h"
#include "string.h"



int CMD_Parse_Brightness (char *cmd) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if (strncmp (cmd, CMD_PREFIX, strlen (CMD_PREFIX)) == 0) { // Если команда начинается с префикса
 8002280:	2207      	movs	r2, #7
 8002282:	490a      	ldr	r1, [pc, #40]	; (80022ac <CMD_Parse_Brightness+0x34>)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fb0b 	bl	80028a0 <strncmp>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d106      	bne.n	800229e <CMD_Parse_Brightness+0x26>
    return (atoi (cmd + strlen (CMD_PREFIX))); // Возвращаем числовое значение после префикса
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3307      	adds	r3, #7
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fa6a 	bl	800276e <atoi>
 800229a:	4603      	mov	r3, r0
 800229c:	e001      	b.n	80022a2 <CMD_Parse_Brightness+0x2a>
  } else { // Если команда не начинается с префикса
    return -1; // Возвращаем -1, как признак ошибки
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08002ab4 	.word	0x08002ab4

080022b0 <GPIO_Init>:
#include "GPIO_Init.h"

void GPIO_Init (void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //Тактирование на порт A
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <GPIO_Init+0x44>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <GPIO_Init+0x44>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER &= ~GPIO_MODER_MODER5; // очистили режим для нужного пина
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <GPIO_Init+0x48>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <GPIO_Init+0x48>)
 80022c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022ca:	6013      	str	r3, [r2, #0]

		GPIOA->MODER |= GPIO_MODER_MODER5_0; // пин на выход
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <GPIO_Init+0x48>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <GPIO_Init+0x48>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d6:	6013      	str	r3, [r2, #0]

		GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED5_0 | GPIO_OSPEEDR_OSPEED5_1 ); // скорость very high
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <GPIO_Init+0x48>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <GPIO_Init+0x48>)
 80022de:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80022e2:	6093      	str	r3, [r2, #8]

		GPIOA->BSRR = GPIO_BSRR_BS5; // установили в высокое состояние
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <GPIO_Init+0x48>)
 80022e6:	2220      	movs	r2, #32
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000

080022fc <TIM2_PWM_Init>:
#include "TIM2_PWM_Init.h"

void TIM2_PWM_Init(void) {
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
		// Включение тактирования TIM1
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <TIM2_PWM_Init+0xb0>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4a29      	ldr	r2, [pc, #164]	; (80023ac <TIM2_PWM_Init+0xb0>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
		// Настройка вывода PA8 в режим альтернативной функции AF1 (TIM2_CH1)
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //Тактирование на порт A
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <TIM2_PWM_Init+0xb0>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <TIM2_PWM_Init+0xb0>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER &= ~GPIO_MODER_MODER5; // очистили режим для нужного пина
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 800231e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002322:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= GPIO_MODER_MODER5_1;
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 800232a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800232e:	6013      	str	r3, [r2, #0]
		GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED5_0 | GPIO_OSPEEDR_OSPEED5_1 ); // скорость very high
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 8002336:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800233a:	6093      	str	r3, [r2, #8]
		GPIOA->AFR[0] |= GPIO_AFRL_AFSEL5_0; /////////////////////////
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <TIM2_PWM_Init+0xb4>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002346:	6213      	str	r3, [r2, #32]
		// Установка предделителя таймера TIM2
		TIM2->PSC = 1600-1;
 8002348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800234c:	f240 623f 	movw	r2, #1599	; 0x63f
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
		// Установка периода таймера TIM2
		TIM2->ARR = 100-1;
 8002352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002356:	2263      	movs	r2, #99	; 0x63
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
		// Установка коэффициента заполнения таймера TIM2
		TIM2->CCR1 = 255-1;
 800235a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800235e:	22fe      	movs	r2, #254	; 0xfe
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
		// Включение канала 1 таймера TIM2 в режиме PWM
		TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // Output Compare 1 mode 110: PWM mode 1 - In upcounting
 8002362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800236c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002370:	6193      	str	r3, [r2, #24]
		TIM2->CCER |= TIM_CCER_CC1E; // Capture/Compare 1 output enable
 8002372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
		// Включение таймера TIM2
		TIM2->CR1 |= TIM_CR1_CEN;
 8002382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6013      	str	r3, [r2, #0]
		TIM2->BDTR |= TIM_BDTR_MOE;
 8002392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800239c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
	}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <USART_Init>:
#include "USART_Init.h"
#include "FreeRTOS.h"

void USART_Init (void){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
// Настраиваем порт A для работы с USART1
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Включаем тактирование порта A
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <USART_Init+0xa4>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <USART_Init+0xa4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOA->MODER |= GPIO_MODER_MODER5_0; /* set pin to output mode */
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <USART_Init+0xa8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <USART_Init+0xa8>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODER9_1; // Устанавливаем режим альтернативной функции для пина PA9 (TX)
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <USART_Init+0xa8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <USART_Init+0xa8>)
 8002466:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800246a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODER10_1;
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <USART_Init+0xa8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <USART_Init+0xa8>)
 8002472:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002476:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[1] |= (GPIO_AFRH_AFSEL9_2 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_0); // Выбираем альтернативную функцию 7 (USART1) для пина PA9
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <USART_Init+0xa8>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <USART_Init+0xa8>)
 800247e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002482:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[1] |= (GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_0); // Выбираем альтернативную функцию 7 (USART1) для пина PA9
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <USART_Init+0xa8>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <USART_Init+0xa8>)
 800248a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800248e:	6253      	str	r3, [r2, #36]	; 0x24
  // Настраиваем USART1 для передачи данных
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // Включаем тактирование USART1
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <USART_Init+0xa4>)
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <USART_Init+0xa4>)
 8002496:	f043 0310 	orr.w	r3, r3, #16
 800249a:	6453      	str	r3, [r2, #68]	; 0x44
  USART1->BRR = 0x683; // Устанавливаем скорость передачи 9600 бод при частоте 16 МГц
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <USART_Init+0xac>)
 800249e:	f240 6283 	movw	r2, #1667	; 0x683
 80024a2:	609a      	str	r2, [r3, #8]
  USART1->CR1 |= USART_CR1_TE; // Включаем передатчик
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <USART_Init+0xac>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <USART_Init+0xac>)
 80024aa:	f043 0308 	orr.w	r3, r3, #8
 80024ae:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <USART_Init+0xac>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <USART_Init+0xac>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RXNEIE;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <USART_Init+0xac>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <USART_Init+0xac>)
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ(USART1_IRQn);
 80024c8:	2025      	movs	r0, #37	; 0x25
 80024ca:	f7ff ff73 	bl	80023b4 <__NVIC_EnableIRQ>
  USART1->CR1 |= USART_CR1_UE; // Включаем USART1
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <USART_Init+0xac>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <USART_Init+0xac>)
 80024d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d8:	60d3      	str	r3, [r2, #12]
  NVIC_SetPriority(USART1_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
 80024da:	2105      	movs	r1, #5
 80024dc:	2025      	movs	r0, #37	; 0x25
 80024de:	f7ff ff87 	bl	80023f0 <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40011000 	.word	0x40011000

080024f4 <USART_Send>:

void USART_Send(char chr)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
			while(!(USART1->SR & USART_SR_TC));
 80024fe:	bf00      	nop
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <USART_Send+0x2c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f9      	beq.n	8002500 <USART_Send+0xc>
			USART1->DR = chr;
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <USART_Send+0x2c>)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	6053      	str	r3, [r2, #4]

}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40011000 	.word	0x40011000

08002524 <USART_Send_String>:
			USART1->DR = data;

}

void USART_Send_String(char* str)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
			uint8_t i = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
			while(str[i])
 8002530:	e009      	b.n	8002546 <USART_Send_String+0x22>
	{
			USART_Send(str[i++]);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	73fa      	strb	r2, [r7, #15]
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ffd7 	bl	80024f4 <USART_Send>
			while(str[i])
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ef      	bne.n	8002532 <USART_Send_String+0xe>
	}
}
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <main>:

uint8_t rxIndex = 0;


int main(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af02      	add	r7, sp, #8

	GPIO_Init();
 8002562:	f7ff fea5 	bl	80022b0 <GPIO_Init>
	USART_Init();
 8002566:	f7ff ff6d 	bl	8002444 <USART_Init>
	TIM2_PWM_Init();
 800256a:	f7ff fec7 	bl	80022fc <TIM2_PWM_Init>

	xTaskCreate(vTaskLed, "LED", 128, NULL, 1, NULL );
 800256e:	2300      	movs	r3, #0
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	2301      	movs	r3, #1
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2300      	movs	r3, #0
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	4910      	ldr	r1, [pc, #64]	; (80025bc <main+0x60>)
 800257c:	4810      	ldr	r0, [pc, #64]	; (80025c0 <main+0x64>)
 800257e:	f7ff f812 	bl	80015a6 <xTaskCreate>
	xTaskCreate(vTaskAT, "AT_Waiting", 128, NULL, 1, NULL );
 8002582:	2300      	movs	r3, #0
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	2301      	movs	r3, #1
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2300      	movs	r3, #0
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	490d      	ldr	r1, [pc, #52]	; (80025c4 <main+0x68>)
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <main+0x6c>)
 8002592:	f7ff f808 	bl	80015a6 <xTaskCreate>
	xCmdQueue = xQueueCreate(CMD_QUEUE_SIZE, sizeof (int));
 8002596:	2200      	movs	r2, #0
 8002598:	2104      	movs	r1, #4
 800259a:	200a      	movs	r0, #10
 800259c:	f7fe fba4 	bl	8000ce8 <xQueueGenericCreate>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <main+0x70>)
 80025a4:	6013      	str	r3, [r2, #0]
	xLedQueue = xQueueCreate(LED_QUEUE_SIZE, sizeof (int));
 80025a6:	2200      	movs	r2, #0
 80025a8:	2104      	movs	r1, #4
 80025aa:	200a      	movs	r0, #10
 80025ac:	f7fe fb9c 	bl	8000ce8 <xQueueGenericCreate>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <main+0x74>)
 80025b4:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 80025b6:	f7ff f943 	bl	8001840 <vTaskStartScheduler>

	while(1)
 80025ba:	e7fe      	b.n	80025ba <main+0x5e>
 80025bc:	08002abc 	.word	0x08002abc
 80025c0:	080025d5 	.word	0x080025d5
 80025c4:	08002ac0 	.word	0x08002ac0
 80025c8:	08002615 	.word	0x08002615
 80025cc:	20004068 	.word	0x20004068
 80025d0:	2000406c 	.word	0x2000406c

080025d4 <vTaskLed>:
}

//---------------------------------------------------------------

void vTaskLed (void *argument)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	uint8_t brightness_res;

	while(1)
	{
		if(uxQueueMessagesWaiting(xLedQueue) != 0)   // Check queue
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <vTaskLed+0x3c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fe55 	bl	8001290 <uxQueueMessagesWaiting>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f7      	beq.n	80025dc <vTaskLed+0x8>
		{
		if(xQueueReceive(xLedQueue, &brightness_res, portMAX_DELAY) == pdTRUE){
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <vTaskLed+0x3c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f107 010f 	add.w	r1, r7, #15
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fd69 	bl	80010d0 <xQueueReceive>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d1eb      	bne.n	80025dc <vTaskLed+0x8>
			TIM2->CCR1 = brightness_res;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800260a:	635a      	str	r2, [r3, #52]	; 0x34
			asm("NOP");
 800260c:	bf00      	nop
		if(uxQueueMessagesWaiting(xLedQueue) != 0)   // Check queue
 800260e:	e7e5      	b.n	80025dc <vTaskLed+0x8>
 8002610:	2000406c 	.word	0x2000406c

08002614 <vTaskAT>:
}
}


void vTaskAT (void *argument)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	char cmdBuffer[CMD_QUEUE_SIZE];
	static char linearBuffer[CMD_QUEUE_SIZE]; // Declare linear
	uint8_t brightness;
	char data;
	uint32_t linearIndex = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		if(uxQueueMessagesWaiting(xCmdQueue) != 0)   // Check queue
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <vTaskAT+0x8c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fe33 	bl	8001290 <uxQueueMessagesWaiting>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f7      	beq.n	8002620 <vTaskAT+0xc>
		{
		if(xQueueReceive(xCmdQueue, &data, portMAX_DELAY) == pdTRUE){
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <vTaskAT+0x8c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f107 010e 	add.w	r1, r7, #14
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fd47 	bl	80010d0 <xQueueReceive>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d128      	bne.n	800269a <vTaskAT+0x86>
			linearBuffer[linearIndex] = data;
 8002648:	7bb9      	ldrb	r1, [r7, #14]
 800264a:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <vTaskAT+0x90>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	460a      	mov	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
			linearIndex = (linearIndex + 1) % CMD_QUEUE_SIZE;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <vTaskAT+0x94>)
 800265a:	fba3 1302 	umull	r1, r3, r3, r2
 800265e:	08d9      	lsrs	r1, r3, #3
 8002660:	460b      	mov	r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	61fb      	str	r3, [r7, #28]
			if(data == '5')
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	2b35      	cmp	r3, #53	; 0x35
 8002670:	d113      	bne.n	800269a <vTaskAT+0x86>
			{
				brightness = CMD_Parse_Brightness(linearBuffer);
 8002672:	480c      	ldr	r0, [pc, #48]	; (80026a4 <vTaskAT+0x90>)
 8002674:	f7ff fe00 	bl	8002278 <CMD_Parse_Brightness>
 8002678:	4603      	mov	r3, r0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	73fb      	strb	r3, [r7, #15]
				xQueueSend(xLedQueue,&brightness,0);
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <vTaskAT+0x98>)
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	f107 010f 	add.w	r1, r7, #15
 8002686:	2300      	movs	r3, #0
 8002688:	2200      	movs	r2, #0
 800268a:	f7fe fb87 	bl	8000d9c <xQueueGenericSend>
				USART_Send_String(brightness);
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff47 	bl	8002524 <USART_Send_String>

				linearIndex = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
			}
		}
		asm("NOP");
 800269a:	bf00      	nop
		if(uxQueueMessagesWaiting(xCmdQueue) != 0)   // Check queue
 800269c:	e7c0      	b.n	8002620 <vTaskAT+0xc>
 800269e:	bf00      	nop
 80026a0:	20004068 	.word	0x20004068
 80026a4:	20004070 	.word	0x20004070
 80026a8:	cccccccd 	.word	0xcccccccd
 80026ac:	2000406c 	.word	0x2000406c

080026b0 <USART1_IRQHandler>:

 }
}

	void USART1_IRQHandler(void)
	{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]

		    /* We have not woken a task at the start of the ISR. */

			if((USART1->SR & USART_SR_RXNE) && (USART1->CR1 & USART_CR1_RXNEIE))
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <USART1_IRQHandler+0x5c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01d      	beq.n	8002702 <USART1_IRQHandler+0x52>
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <USART1_IRQHandler+0x5c>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d017      	beq.n	8002702 <USART1_IRQHandler+0x52>
			{
				USART1->SR &= ~USART_SR_RXNE;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <USART1_IRQHandler+0x5c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a0d      	ldr	r2, [pc, #52]	; (800270c <USART1_IRQHandler+0x5c>)
 80026d8:	f023 0320 	bic.w	r3, r3, #32
 80026dc:	6013      	str	r3, [r2, #0]

				xQueueSendFromISR(xCmdQueue,&USART1->DR,&xHigherPriorityTaskWoken);
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <USART1_IRQHandler+0x60>)
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	1d3a      	adds	r2, r7, #4
 80026e4:	2300      	movs	r3, #0
 80026e6:	490b      	ldr	r1, [pc, #44]	; (8002714 <USART1_IRQHandler+0x64>)
 80026e8:	f7fe fc56 	bl	8000f98 <xQueueGenericSendFromISR>


				portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <USART1_IRQHandler+0x52>
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <USART1_IRQHandler+0x68>)
 80026f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	f3bf 8f6f 	isb	sy


			}

	}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40011000 	.word	0x40011000
 8002710:	20004068 	.word	0x20004068
 8002714:	40011004 	.word	0x40011004
 8002718:	e000ed04 	.word	0xe000ed04

0800271c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800271e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002720:	f7fd fd5e 	bl	80001e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <LoopForever+0x6>)
  ldr r1, =_edata
 8002726:	490d      	ldr	r1, [pc, #52]	; (800275c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <LoopForever+0xe>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800273c:	4c0a      	ldr	r4, [pc, #40]	; (8002768 <LoopForever+0x16>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800274a:	f000 f917 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274e:	f7ff ff05 	bl	800255c <main>

08002752 <LoopForever>:

LoopForever:
  b LoopForever
 8002752:	e7fe      	b.n	8002752 <LoopForever>
  ldr   r0, =_estack
 8002754:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8002760:	08002bd4 	.word	0x08002bd4
  ldr r2, =_sbss
 8002764:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002768:	200041bc 	.word	0x200041bc

0800276c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC_IRQHandler>

0800276e <atoi>:
 800276e:	220a      	movs	r2, #10
 8002770:	2100      	movs	r1, #0
 8002772:	f000 b883 	b.w	800287c <strtol>
	...

08002778 <_strtol_l.constprop.0>:
 8002778:	2b01      	cmp	r3, #1
 800277a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800277e:	d001      	beq.n	8002784 <_strtol_l.constprop.0+0xc>
 8002780:	2b24      	cmp	r3, #36	; 0x24
 8002782:	d906      	bls.n	8002792 <_strtol_l.constprop.0+0x1a>
 8002784:	f000 f8f4 	bl	8002970 <__errno>
 8002788:	2316      	movs	r3, #22
 800278a:	6003      	str	r3, [r0, #0]
 800278c:	2000      	movs	r0, #0
 800278e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002792:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002878 <_strtol_l.constprop.0+0x100>
 8002796:	460d      	mov	r5, r1
 8002798:	462e      	mov	r6, r5
 800279a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800279e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80027a2:	f017 0708 	ands.w	r7, r7, #8
 80027a6:	d1f7      	bne.n	8002798 <_strtol_l.constprop.0+0x20>
 80027a8:	2c2d      	cmp	r4, #45	; 0x2d
 80027aa:	d132      	bne.n	8002812 <_strtol_l.constprop.0+0x9a>
 80027ac:	782c      	ldrb	r4, [r5, #0]
 80027ae:	2701      	movs	r7, #1
 80027b0:	1cb5      	adds	r5, r6, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d05b      	beq.n	800286e <_strtol_l.constprop.0+0xf6>
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d109      	bne.n	80027ce <_strtol_l.constprop.0+0x56>
 80027ba:	2c30      	cmp	r4, #48	; 0x30
 80027bc:	d107      	bne.n	80027ce <_strtol_l.constprop.0+0x56>
 80027be:	782c      	ldrb	r4, [r5, #0]
 80027c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80027c4:	2c58      	cmp	r4, #88	; 0x58
 80027c6:	d14d      	bne.n	8002864 <_strtol_l.constprop.0+0xec>
 80027c8:	786c      	ldrb	r4, [r5, #1]
 80027ca:	2310      	movs	r3, #16
 80027cc:	3502      	adds	r5, #2
 80027ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80027d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80027d6:	f04f 0e00 	mov.w	lr, #0
 80027da:	fbb8 f9f3 	udiv	r9, r8, r3
 80027de:	4676      	mov	r6, lr
 80027e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80027e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80027e8:	f1bc 0f09 	cmp.w	ip, #9
 80027ec:	d816      	bhi.n	800281c <_strtol_l.constprop.0+0xa4>
 80027ee:	4664      	mov	r4, ip
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	dd24      	ble.n	800283e <_strtol_l.constprop.0+0xc6>
 80027f4:	f1be 3fff 	cmp.w	lr, #4294967295
 80027f8:	d008      	beq.n	800280c <_strtol_l.constprop.0+0x94>
 80027fa:	45b1      	cmp	r9, r6
 80027fc:	d31c      	bcc.n	8002838 <_strtol_l.constprop.0+0xc0>
 80027fe:	d101      	bne.n	8002804 <_strtol_l.constprop.0+0x8c>
 8002800:	45a2      	cmp	sl, r4
 8002802:	db19      	blt.n	8002838 <_strtol_l.constprop.0+0xc0>
 8002804:	fb06 4603 	mla	r6, r6, r3, r4
 8002808:	f04f 0e01 	mov.w	lr, #1
 800280c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002810:	e7e8      	b.n	80027e4 <_strtol_l.constprop.0+0x6c>
 8002812:	2c2b      	cmp	r4, #43	; 0x2b
 8002814:	bf04      	itt	eq
 8002816:	782c      	ldrbeq	r4, [r5, #0]
 8002818:	1cb5      	addeq	r5, r6, #2
 800281a:	e7ca      	b.n	80027b2 <_strtol_l.constprop.0+0x3a>
 800281c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002820:	f1bc 0f19 	cmp.w	ip, #25
 8002824:	d801      	bhi.n	800282a <_strtol_l.constprop.0+0xb2>
 8002826:	3c37      	subs	r4, #55	; 0x37
 8002828:	e7e2      	b.n	80027f0 <_strtol_l.constprop.0+0x78>
 800282a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800282e:	f1bc 0f19 	cmp.w	ip, #25
 8002832:	d804      	bhi.n	800283e <_strtol_l.constprop.0+0xc6>
 8002834:	3c57      	subs	r4, #87	; 0x57
 8002836:	e7db      	b.n	80027f0 <_strtol_l.constprop.0+0x78>
 8002838:	f04f 3eff 	mov.w	lr, #4294967295
 800283c:	e7e6      	b.n	800280c <_strtol_l.constprop.0+0x94>
 800283e:	f1be 3fff 	cmp.w	lr, #4294967295
 8002842:	d105      	bne.n	8002850 <_strtol_l.constprop.0+0xd8>
 8002844:	2322      	movs	r3, #34	; 0x22
 8002846:	6003      	str	r3, [r0, #0]
 8002848:	4646      	mov	r6, r8
 800284a:	b942      	cbnz	r2, 800285e <_strtol_l.constprop.0+0xe6>
 800284c:	4630      	mov	r0, r6
 800284e:	e79e      	b.n	800278e <_strtol_l.constprop.0+0x16>
 8002850:	b107      	cbz	r7, 8002854 <_strtol_l.constprop.0+0xdc>
 8002852:	4276      	negs	r6, r6
 8002854:	2a00      	cmp	r2, #0
 8002856:	d0f9      	beq.n	800284c <_strtol_l.constprop.0+0xd4>
 8002858:	f1be 0f00 	cmp.w	lr, #0
 800285c:	d000      	beq.n	8002860 <_strtol_l.constprop.0+0xe8>
 800285e:	1e69      	subs	r1, r5, #1
 8002860:	6011      	str	r1, [r2, #0]
 8002862:	e7f3      	b.n	800284c <_strtol_l.constprop.0+0xd4>
 8002864:	2430      	movs	r4, #48	; 0x30
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1b1      	bne.n	80027ce <_strtol_l.constprop.0+0x56>
 800286a:	2308      	movs	r3, #8
 800286c:	e7af      	b.n	80027ce <_strtol_l.constprop.0+0x56>
 800286e:	2c30      	cmp	r4, #48	; 0x30
 8002870:	d0a5      	beq.n	80027be <_strtol_l.constprop.0+0x46>
 8002872:	230a      	movs	r3, #10
 8002874:	e7ab      	b.n	80027ce <_strtol_l.constprop.0+0x56>
 8002876:	bf00      	nop
 8002878:	08002acc 	.word	0x08002acc

0800287c <strtol>:
 800287c:	4613      	mov	r3, r2
 800287e:	460a      	mov	r2, r1
 8002880:	4601      	mov	r1, r0
 8002882:	4802      	ldr	r0, [pc, #8]	; (800288c <strtol+0x10>)
 8002884:	6800      	ldr	r0, [r0, #0]
 8002886:	f7ff bf77 	b.w	8002778 <_strtol_l.constprop.0>
 800288a:	bf00      	nop
 800288c:	20000054 	.word	0x20000054

08002890 <memset>:
 8002890:	4402      	add	r2, r0
 8002892:	4603      	mov	r3, r0
 8002894:	4293      	cmp	r3, r2
 8002896:	d100      	bne.n	800289a <memset+0xa>
 8002898:	4770      	bx	lr
 800289a:	f803 1b01 	strb.w	r1, [r3], #1
 800289e:	e7f9      	b.n	8002894 <memset+0x4>

080028a0 <strncmp>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	b16a      	cbz	r2, 80028c0 <strncmp+0x20>
 80028a4:	3901      	subs	r1, #1
 80028a6:	1884      	adds	r4, r0, r2
 80028a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d103      	bne.n	80028bc <strncmp+0x1c>
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d001      	beq.n	80028bc <strncmp+0x1c>
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d1f5      	bne.n	80028a8 <strncmp+0x8>
 80028bc:	1ad0      	subs	r0, r2, r3
 80028be:	bd10      	pop	{r4, pc}
 80028c0:	4610      	mov	r0, r2
 80028c2:	e7fc      	b.n	80028be <strncmp+0x1e>

080028c4 <_reclaim_reent>:
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <_reclaim_reent+0xa8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4283      	cmp	r3, r0
 80028ca:	b570      	push	{r4, r5, r6, lr}
 80028cc:	4604      	mov	r4, r0
 80028ce:	d04b      	beq.n	8002968 <_reclaim_reent+0xa4>
 80028d0:	69c3      	ldr	r3, [r0, #28]
 80028d2:	b143      	cbz	r3, 80028e6 <_reclaim_reent+0x22>
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d144      	bne.n	8002964 <_reclaim_reent+0xa0>
 80028da:	69e3      	ldr	r3, [r4, #28]
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	b111      	cbz	r1, 80028e6 <_reclaim_reent+0x22>
 80028e0:	4620      	mov	r0, r4
 80028e2:	f000 f87f 	bl	80029e4 <_free_r>
 80028e6:	6961      	ldr	r1, [r4, #20]
 80028e8:	b111      	cbz	r1, 80028f0 <_reclaim_reent+0x2c>
 80028ea:	4620      	mov	r0, r4
 80028ec:	f000 f87a 	bl	80029e4 <_free_r>
 80028f0:	69e1      	ldr	r1, [r4, #28]
 80028f2:	b111      	cbz	r1, 80028fa <_reclaim_reent+0x36>
 80028f4:	4620      	mov	r0, r4
 80028f6:	f000 f875 	bl	80029e4 <_free_r>
 80028fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80028fc:	b111      	cbz	r1, 8002904 <_reclaim_reent+0x40>
 80028fe:	4620      	mov	r0, r4
 8002900:	f000 f870 	bl	80029e4 <_free_r>
 8002904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002906:	b111      	cbz	r1, 800290e <_reclaim_reent+0x4a>
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f86b 	bl	80029e4 <_free_r>
 800290e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002910:	b111      	cbz	r1, 8002918 <_reclaim_reent+0x54>
 8002912:	4620      	mov	r0, r4
 8002914:	f000 f866 	bl	80029e4 <_free_r>
 8002918:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800291a:	b111      	cbz	r1, 8002922 <_reclaim_reent+0x5e>
 800291c:	4620      	mov	r0, r4
 800291e:	f000 f861 	bl	80029e4 <_free_r>
 8002922:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002924:	b111      	cbz	r1, 800292c <_reclaim_reent+0x68>
 8002926:	4620      	mov	r0, r4
 8002928:	f000 f85c 	bl	80029e4 <_free_r>
 800292c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800292e:	b111      	cbz	r1, 8002936 <_reclaim_reent+0x72>
 8002930:	4620      	mov	r0, r4
 8002932:	f000 f857 	bl	80029e4 <_free_r>
 8002936:	6a23      	ldr	r3, [r4, #32]
 8002938:	b1b3      	cbz	r3, 8002968 <_reclaim_reent+0xa4>
 800293a:	4620      	mov	r0, r4
 800293c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002940:	4718      	bx	r3
 8002942:	5949      	ldr	r1, [r1, r5]
 8002944:	b941      	cbnz	r1, 8002958 <_reclaim_reent+0x94>
 8002946:	3504      	adds	r5, #4
 8002948:	69e3      	ldr	r3, [r4, #28]
 800294a:	2d80      	cmp	r5, #128	; 0x80
 800294c:	68d9      	ldr	r1, [r3, #12]
 800294e:	d1f8      	bne.n	8002942 <_reclaim_reent+0x7e>
 8002950:	4620      	mov	r0, r4
 8002952:	f000 f847 	bl	80029e4 <_free_r>
 8002956:	e7c0      	b.n	80028da <_reclaim_reent+0x16>
 8002958:	680e      	ldr	r6, [r1, #0]
 800295a:	4620      	mov	r0, r4
 800295c:	f000 f842 	bl	80029e4 <_free_r>
 8002960:	4631      	mov	r1, r6
 8002962:	e7ef      	b.n	8002944 <_reclaim_reent+0x80>
 8002964:	2500      	movs	r5, #0
 8002966:	e7ef      	b.n	8002948 <_reclaim_reent+0x84>
 8002968:	bd70      	pop	{r4, r5, r6, pc}
 800296a:	bf00      	nop
 800296c:	20000054 	.word	0x20000054

08002970 <__errno>:
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <__errno+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000054 	.word	0x20000054

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 f880 	bl	8002a94 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08002bcc 	.word	0x08002bcc
 80029b8:	08002bcc 	.word	0x08002bcc
 80029bc:	08002bcc 	.word	0x08002bcc
 80029c0:	08002bd0 	.word	0x08002bd0

080029c4 <__retarget_lock_acquire_recursive>:
 80029c4:	4770      	bx	lr

080029c6 <__retarget_lock_release_recursive>:
 80029c6:	4770      	bx	lr

080029c8 <memcpy>:
 80029c8:	440a      	add	r2, r1
 80029ca:	4291      	cmp	r1, r2
 80029cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80029d0:	d100      	bne.n	80029d4 <memcpy+0xc>
 80029d2:	4770      	bx	lr
 80029d4:	b510      	push	{r4, lr}
 80029d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029de:	4291      	cmp	r1, r2
 80029e0:	d1f9      	bne.n	80029d6 <memcpy+0xe>
 80029e2:	bd10      	pop	{r4, pc}

080029e4 <_free_r>:
 80029e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029e6:	2900      	cmp	r1, #0
 80029e8:	d044      	beq.n	8002a74 <_free_r+0x90>
 80029ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029ee:	9001      	str	r0, [sp, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f1a1 0404 	sub.w	r4, r1, #4
 80029f6:	bfb8      	it	lt
 80029f8:	18e4      	addlt	r4, r4, r3
 80029fa:	f000 f83f 	bl	8002a7c <__malloc_lock>
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <_free_r+0x94>)
 8002a00:	9801      	ldr	r0, [sp, #4]
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	b933      	cbnz	r3, 8002a14 <_free_r+0x30>
 8002a06:	6063      	str	r3, [r4, #4]
 8002a08:	6014      	str	r4, [r2, #0]
 8002a0a:	b003      	add	sp, #12
 8002a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a10:	f000 b83a 	b.w	8002a88 <__malloc_unlock>
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	d908      	bls.n	8002a2a <_free_r+0x46>
 8002a18:	6825      	ldr	r5, [r4, #0]
 8002a1a:	1961      	adds	r1, r4, r5
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	bf01      	itttt	eq
 8002a20:	6819      	ldreq	r1, [r3, #0]
 8002a22:	685b      	ldreq	r3, [r3, #4]
 8002a24:	1949      	addeq	r1, r1, r5
 8002a26:	6021      	streq	r1, [r4, #0]
 8002a28:	e7ed      	b.n	8002a06 <_free_r+0x22>
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b10b      	cbz	r3, 8002a34 <_free_r+0x50>
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	d9fa      	bls.n	8002a2a <_free_r+0x46>
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	1855      	adds	r5, r2, r1
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d10b      	bne.n	8002a54 <_free_r+0x70>
 8002a3c:	6824      	ldr	r4, [r4, #0]
 8002a3e:	4421      	add	r1, r4
 8002a40:	1854      	adds	r4, r2, r1
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	d1e0      	bne.n	8002a0a <_free_r+0x26>
 8002a48:	681c      	ldr	r4, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6053      	str	r3, [r2, #4]
 8002a4e:	440c      	add	r4, r1
 8002a50:	6014      	str	r4, [r2, #0]
 8002a52:	e7da      	b.n	8002a0a <_free_r+0x26>
 8002a54:	d902      	bls.n	8002a5c <_free_r+0x78>
 8002a56:	230c      	movs	r3, #12
 8002a58:	6003      	str	r3, [r0, #0]
 8002a5a:	e7d6      	b.n	8002a0a <_free_r+0x26>
 8002a5c:	6825      	ldr	r5, [r4, #0]
 8002a5e:	1961      	adds	r1, r4, r5
 8002a60:	428b      	cmp	r3, r1
 8002a62:	bf04      	itt	eq
 8002a64:	6819      	ldreq	r1, [r3, #0]
 8002a66:	685b      	ldreq	r3, [r3, #4]
 8002a68:	6063      	str	r3, [r4, #4]
 8002a6a:	bf04      	itt	eq
 8002a6c:	1949      	addeq	r1, r1, r5
 8002a6e:	6021      	streq	r1, [r4, #0]
 8002a70:	6054      	str	r4, [r2, #4]
 8002a72:	e7ca      	b.n	8002a0a <_free_r+0x26>
 8002a74:	b003      	add	sp, #12
 8002a76:	bd30      	pop	{r4, r5, pc}
 8002a78:	200041b8 	.word	0x200041b8

08002a7c <__malloc_lock>:
 8002a7c:	4801      	ldr	r0, [pc, #4]	; (8002a84 <__malloc_lock+0x8>)
 8002a7e:	f7ff bfa1 	b.w	80029c4 <__retarget_lock_acquire_recursive>
 8002a82:	bf00      	nop
 8002a84:	200041b4 	.word	0x200041b4

08002a88 <__malloc_unlock>:
 8002a88:	4801      	ldr	r0, [pc, #4]	; (8002a90 <__malloc_unlock+0x8>)
 8002a8a:	f7ff bf9c 	b.w	80029c6 <__retarget_lock_release_recursive>
 8002a8e:	bf00      	nop
 8002a90:	200041b4 	.word	0x200041b4

08002a94 <_init>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_fini>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr
