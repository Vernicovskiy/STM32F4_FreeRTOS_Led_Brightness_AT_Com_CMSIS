
STM32F4_FreeRTOS_Led_Brightness_AT_Com_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003314  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800362c  0800362c  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  0800362c  0800362c  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800362c  0800362c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08003634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004170  20000058  0800368c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041c8  0800368c  000241c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e7d  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001611  00000000  00000000  00026f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000548  00000000  00000000  00028560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003e1  00000000  00000000  00028aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f4f1  00000000  00000000  00028e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a01  00000000  00000000  0003837a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005b375  00000000  00000000  0003fd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018b0  00000000  00000000  0009b0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0009c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000058 	.word	0x20000058
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800349c 	.word	0x0800349c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	0800349c 	.word	0x0800349c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <SystemInit+0x20>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <SystemInit+0x20>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80002b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <vApplicationGetIdleTaskMemory+0x30>)
 80002ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000074 	.word	0x20000074
 80002d4:	20000114 	.word	0x20000114

080002d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80002e4:	f001 fb9a 	bl	8001a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80002e8:	4b5b      	ldr	r3, [pc, #364]	; (8000458 <pvPortMalloc+0x180>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d101      	bne.n	80002f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80002f0:	f000 f920 	bl	8000534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80002f4:	4b59      	ldr	r3, [pc, #356]	; (800045c <pvPortMalloc+0x184>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4013      	ands	r3, r2
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	f040 8093 	bne.w	8000428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d01d      	beq.n	8000344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000308:	2208      	movs	r2, #8
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	2b00      	cmp	r3, #0
 8000318:	d014      	beq.n	8000344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f023 0307 	bic.w	r3, r3, #7
 8000320:	3308      	adds	r3, #8
 8000322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f003 0307 	and.w	r3, r3, #7
 800032a:	2b00      	cmp	r3, #0
 800032c:	d00a      	beq.n	8000344 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800032e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000332:	f383 8811 	msr	BASEPRI, r3
 8000336:	f3bf 8f6f 	isb	sy
 800033a:	f3bf 8f4f 	dsb	sy
 800033e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000340:	bf00      	nop
 8000342:	e7fe      	b.n	8000342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d06e      	beq.n	8000428 <pvPortMalloc+0x150>
 800034a:	4b45      	ldr	r3, [pc, #276]	; (8000460 <pvPortMalloc+0x188>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	d869      	bhi.n	8000428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000354:	4b43      	ldr	r3, [pc, #268]	; (8000464 <pvPortMalloc+0x18c>)
 8000356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000358:	4b42      	ldr	r3, [pc, #264]	; (8000464 <pvPortMalloc+0x18c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800035e:	e004      	b.n	800036a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	d903      	bls.n	800037c <pvPortMalloc+0xa4>
 8000374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1f1      	bne.n	8000360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800037c:	4b36      	ldr	r3, [pc, #216]	; (8000458 <pvPortMalloc+0x180>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000382:	429a      	cmp	r2, r3
 8000384:	d050      	beq.n	8000428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000386:	6a3b      	ldr	r3, [r7, #32]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2208      	movs	r2, #8
 800038c:	4413      	add	r3, r2
 800038e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	6a3b      	ldr	r3, [r7, #32]
 8000396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800039a:	685a      	ldr	r2, [r3, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	1ad2      	subs	r2, r2, r3
 80003a0:	2308      	movs	r3, #8
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d91f      	bls.n	80003e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80003a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80003b0:	69bb      	ldr	r3, [r7, #24]
 80003b2:	f003 0307 	and.w	r3, r3, #7
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d00a      	beq.n	80003d0 <pvPortMalloc+0xf8>
	__asm volatile
 80003ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003be:	f383 8811 	msr	BASEPRI, r3
 80003c2:	f3bf 8f6f 	isb	sy
 80003c6:	f3bf 8f4f 	dsb	sy
 80003ca:	613b      	str	r3, [r7, #16]
}
 80003cc:	bf00      	nop
 80003ce:	e7fe      	b.n	80003ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80003d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d2:	685a      	ldr	r2, [r3, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	1ad2      	subs	r2, r2, r3
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80003dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80003e2:	69b8      	ldr	r0, [r7, #24]
 80003e4:	f000 f908 	bl	80005f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <pvPortMalloc+0x188>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	4a1b      	ldr	r2, [pc, #108]	; (8000460 <pvPortMalloc+0x188>)
 80003f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <pvPortMalloc+0x188>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <pvPortMalloc+0x190>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d203      	bcs.n	800040a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <pvPortMalloc+0x188>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <pvPortMalloc+0x190>)
 8000408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040c:	685a      	ldr	r2, [r3, #4]
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <pvPortMalloc+0x184>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	431a      	orrs	r2, r3
 8000414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <pvPortMalloc+0x194>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3301      	adds	r3, #1
 8000424:	4a11      	ldr	r2, [pc, #68]	; (800046c <pvPortMalloc+0x194>)
 8000426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000428:	f001 fb06 	bl	8001a38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800042c:	69fb      	ldr	r3, [r7, #28]
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	2b00      	cmp	r3, #0
 8000434:	d00a      	beq.n	800044c <pvPortMalloc+0x174>
	__asm volatile
 8000436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043a:	f383 8811 	msr	BASEPRI, r3
 800043e:	f3bf 8f6f 	isb	sy
 8000442:	f3bf 8f4f 	dsb	sy
 8000446:	60fb      	str	r3, [r7, #12]
}
 8000448:	bf00      	nop
 800044a:	e7fe      	b.n	800044a <pvPortMalloc+0x172>
	return pvReturn;
 800044c:	69fb      	ldr	r3, [r7, #28]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3728      	adds	r7, #40	; 0x28
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20003f1c 	.word	0x20003f1c
 800045c:	20003f30 	.word	0x20003f30
 8000460:	20003f20 	.word	0x20003f20
 8000464:	20003f14 	.word	0x20003f14
 8000468:	20003f24 	.word	0x20003f24
 800046c:	20003f28 	.word	0x20003f28

08000470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d04d      	beq.n	800051e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000482:	2308      	movs	r3, #8
 8000484:	425b      	negs	r3, r3
 8000486:	697a      	ldr	r2, [r7, #20]
 8000488:	4413      	add	r3, r2
 800048a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <vPortFree+0xb8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4013      	ands	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	d10a      	bne.n	80004b4 <vPortFree+0x44>
	__asm volatile
 800049e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004a2:	f383 8811 	msr	BASEPRI, r3
 80004a6:	f3bf 8f6f 	isb	sy
 80004aa:	f3bf 8f4f 	dsb	sy
 80004ae:	60fb      	str	r3, [r7, #12]
}
 80004b0:	bf00      	nop
 80004b2:	e7fe      	b.n	80004b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00a      	beq.n	80004d2 <vPortFree+0x62>
	__asm volatile
 80004bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004c0:	f383 8811 	msr	BASEPRI, r3
 80004c4:	f3bf 8f6f 	isb	sy
 80004c8:	f3bf 8f4f 	dsb	sy
 80004cc:	60bb      	str	r3, [r7, #8]
}
 80004ce:	bf00      	nop
 80004d0:	e7fe      	b.n	80004d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <vPortFree+0xb8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4013      	ands	r3, r2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d01e      	beq.n	800051e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d11a      	bne.n	800051e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	685a      	ldr	r2, [r3, #4]
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <vPortFree+0xb8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	43db      	mvns	r3, r3
 80004f2:	401a      	ands	r2, r3
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80004f8:	f001 fa90 	bl	8001a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <vPortFree+0xbc>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4413      	add	r3, r2
 8000506:	4a09      	ldr	r2, [pc, #36]	; (800052c <vPortFree+0xbc>)
 8000508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800050a:	6938      	ldr	r0, [r7, #16]
 800050c:	f000 f874 	bl	80005f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <vPortFree+0xc0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	4a06      	ldr	r2, [pc, #24]	; (8000530 <vPortFree+0xc0>)
 8000518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800051a:	f001 fa8d 	bl	8001a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20003f30 	.word	0x20003f30
 800052c:	20003f20 	.word	0x20003f20
 8000530:	20003f2c 	.word	0x20003f2c

08000534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800053a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800053e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <prvHeapInit+0xac>)
 8000542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00c      	beq.n	8000568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3307      	adds	r3, #7
 8000552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f023 0307 	bic.w	r3, r3, #7
 800055a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <prvHeapInit+0xac>)
 8000564:	4413      	add	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <prvHeapInit+0xb0>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <prvHeapInit+0xb0>)
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	4413      	add	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000580:	2208      	movs	r2, #8
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f023 0307 	bic.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <prvHeapInit+0xb4>)
 8000594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <prvHeapInit+0xb4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <prvHeapInit+0xb4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	1ad2      	subs	r2, r2, r3
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <prvHeapInit+0xb4>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <prvHeapInit+0xb8>)
 80005c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <prvHeapInit+0xbc>)
 80005ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <prvHeapInit+0xc0>)
 80005ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	20000314 	.word	0x20000314
 80005e4:	20003f14 	.word	0x20003f14
 80005e8:	20003f1c 	.word	0x20003f1c
 80005ec:	20003f24 	.word	0x20003f24
 80005f0:	20003f20 	.word	0x20003f20
 80005f4:	20003f30 	.word	0x20003f30

080005f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <prvInsertBlockIntoFreeList+0xac>)
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e002      	b.n	800060c <prvInsertBlockIntoFreeList+0x14>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	d8f7      	bhi.n	8000606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	d108      	bne.n	800063a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	441a      	add	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	441a      	add	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d118      	bne.n	8000680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <prvInsertBlockIntoFreeList+0xb0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	429a      	cmp	r2, r3
 8000658:	d00d      	beq.n	8000676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685a      	ldr	r2, [r3, #4]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	441a      	add	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e008      	b.n	8000688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <prvInsertBlockIntoFreeList+0xb0>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e003      	b.n	8000688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	d002      	beq.n	8000696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20003f14 	.word	0x20003f14
 80006a8:	20003f1c 	.word	0x20003f1c

080006ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f103 0208 	add.w	r2, r3, #8
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f103 0208 	add.w	r2, r3, #8
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f103 0208 	add.w	r2, r3, #8
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000706:	b480      	push	{r7}
 8000708:	b085      	sub	sp, #20
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d103      	bne.n	800076e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e00c      	b.n	8000788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3308      	adds	r3, #8
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e002      	b.n	800077c <vListInsert+0x2e>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	429a      	cmp	r2, r3
 8000786:	d2f6      	bcs.n	8000776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6892      	ldr	r2, [r2, #8]
 80007d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	6852      	ldr	r2, [r2, #4]
 80007e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d103      	bne.n	80007f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3b04      	subs	r3, #4
 8000824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800082c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3b04      	subs	r3, #4
 8000832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	f023 0201 	bic.w	r2, r3, #1
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3b04      	subs	r3, #4
 8000842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <pxPortInitialiseStack+0x64>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3b14      	subs	r3, #20
 800084e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3b04      	subs	r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f06f 0202 	mvn.w	r2, #2
 8000862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3b20      	subs	r3, #32
 8000868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	0800087d 	.word	0x0800087d

0800087c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <prvTaskExitError+0x54>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088e:	d00a      	beq.n	80008a6 <prvTaskExitError+0x2a>
	__asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	60fb      	str	r3, [r7, #12]
}
 80008a2:	bf00      	nop
 80008a4:	e7fe      	b.n	80008a4 <prvTaskExitError+0x28>
	__asm volatile
 80008a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008aa:	f383 8811 	msr	BASEPRI, r3
 80008ae:	f3bf 8f6f 	isb	sy
 80008b2:	f3bf 8f4f 	dsb	sy
 80008b6:	60bb      	str	r3, [r7, #8]
}
 80008b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80008ba:	bf00      	nop
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0fc      	beq.n	80008bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	20000004 	.word	0x20000004
	...

080008e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <pxCurrentTCBConst2>)
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	6808      	ldr	r0, [r1, #0]
 80008e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ea:	f380 8809 	msr	PSP, r0
 80008ee:	f3bf 8f6f 	isb	sy
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	f380 8811 	msr	BASEPRI, r0
 80008fa:	4770      	bx	lr
 80008fc:	f3af 8000 	nop.w

08000900 <pxCurrentTCBConst2>:
 8000900:	20003f3c 	.word	0x20003f3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop

08000908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000908:	4808      	ldr	r0, [pc, #32]	; (800092c <prvPortStartFirstTask+0x24>)
 800090a:	6800      	ldr	r0, [r0, #0]
 800090c:	6800      	ldr	r0, [r0, #0]
 800090e:	f380 8808 	msr	MSP, r0
 8000912:	f04f 0000 	mov.w	r0, #0
 8000916:	f380 8814 	msr	CONTROL, r0
 800091a:	b662      	cpsie	i
 800091c:	b661      	cpsie	f
 800091e:	f3bf 8f4f 	dsb	sy
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	df00      	svc	0
 8000928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800092a:	bf00      	nop
 800092c:	e000ed08 	.word	0xe000ed08

08000930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000936:	4b46      	ldr	r3, [pc, #280]	; (8000a50 <xPortStartScheduler+0x120>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a46      	ldr	r2, [pc, #280]	; (8000a54 <xPortStartScheduler+0x124>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d10a      	bne.n	8000956 <xPortStartScheduler+0x26>
	__asm volatile
 8000940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000944:	f383 8811 	msr	BASEPRI, r3
 8000948:	f3bf 8f6f 	isb	sy
 800094c:	f3bf 8f4f 	dsb	sy
 8000950:	613b      	str	r3, [r7, #16]
}
 8000952:	bf00      	nop
 8000954:	e7fe      	b.n	8000954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000956:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <xPortStartScheduler+0x120>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <xPortStartScheduler+0x128>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d10a      	bne.n	8000976 <xPortStartScheduler+0x46>
	__asm volatile
 8000960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000964:	f383 8811 	msr	BASEPRI, r3
 8000968:	f3bf 8f6f 	isb	sy
 800096c:	f3bf 8f4f 	dsb	sy
 8000970:	60fb      	str	r3, [r7, #12]
}
 8000972:	bf00      	nop
 8000974:	e7fe      	b.n	8000974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000976:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <xPortStartScheduler+0x12c>)
 8000978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <xPortStartScheduler+0x130>)
 800099c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <xPortStartScheduler+0x134>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80009a4:	e009      	b.n	80009ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <xPortStartScheduler+0x134>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <xPortStartScheduler+0x134>)
 80009ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	2b80      	cmp	r3, #128	; 0x80
 80009c4:	d0ef      	beq.n	80009a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <xPortStartScheduler+0x134>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d00a      	beq.n	80009e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80009d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	60bb      	str	r3, [r7, #8]
}
 80009e4:	bf00      	nop
 80009e6:	e7fe      	b.n	80009e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <xPortStartScheduler+0x134>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <xPortStartScheduler+0x134>)
 80009f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <xPortStartScheduler+0x134>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <xPortStartScheduler+0x134>)
 80009fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <xPortStartScheduler+0x138>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <xPortStartScheduler+0x138>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <xPortStartScheduler+0x138>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <xPortStartScheduler+0x138>)
 8000a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000a1e:	f000 f8dd 	bl	8000bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <xPortStartScheduler+0x13c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000a28:	f000 f8fc 	bl	8000c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <xPortStartScheduler+0x140>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <xPortStartScheduler+0x140>)
 8000a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000a38:	f7ff ff66 	bl	8000908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000a3c:	f001 f950 	bl	8001ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8000a40:	f7ff ff1c 	bl	800087c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00
 8000a54:	410fc271 	.word	0x410fc271
 8000a58:	410fc270 	.word	0x410fc270
 8000a5c:	e000e400 	.word	0xe000e400
 8000a60:	20003f34 	.word	0x20003f34
 8000a64:	20003f38 	.word	0x20003f38
 8000a68:	e000ed20 	.word	0xe000ed20
 8000a6c:	20000004 	.word	0x20000004
 8000a70:	e000ef34 	.word	0xe000ef34

08000a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
	__asm volatile
 8000a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7e:	f383 8811 	msr	BASEPRI, r3
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	607b      	str	r3, [r7, #4]
}
 8000a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <vPortEnterCritical+0x58>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <vPortEnterCritical+0x58>)
 8000a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <vPortEnterCritical+0x58>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10f      	bne.n	8000ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <vPortEnterCritical+0x5c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00a      	beq.n	8000ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8000aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aae:	f383 8811 	msr	BASEPRI, r3
 8000ab2:	f3bf 8f6f 	isb	sy
 8000ab6:	f3bf 8f4f 	dsb	sy
 8000aba:	603b      	str	r3, [r7, #0]
}
 8000abc:	bf00      	nop
 8000abe:	e7fe      	b.n	8000abe <vPortEnterCritical+0x4a>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <vPortExitCritical+0x50>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10a      	bne.n	8000af8 <vPortExitCritical+0x24>
	__asm volatile
 8000ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae6:	f383 8811 	msr	BASEPRI, r3
 8000aea:	f3bf 8f6f 	isb	sy
 8000aee:	f3bf 8f4f 	dsb	sy
 8000af2:	607b      	str	r3, [r7, #4]
}
 8000af4:	bf00      	nop
 8000af6:	e7fe      	b.n	8000af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <vPortExitCritical+0x50>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <vPortExitCritical+0x50>)
 8000b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <vPortExitCritical+0x50>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d105      	bne.n	8000b16 <vPortExitCritical+0x42>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000004 	.word	0x20000004
	...

08000b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000b30:	f3ef 8009 	mrs	r0, PSP
 8000b34:	f3bf 8f6f 	isb	sy
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <pxCurrentTCBConst>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	f01e 0f10 	tst.w	lr, #16
 8000b40:	bf08      	it	eq
 8000b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b4a:	6010      	str	r0, [r2, #0]
 8000b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000b54:	f380 8811 	msr	BASEPRI, r0
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	f3bf 8f6f 	isb	sy
 8000b60:	f001 f8be 	bl	8001ce0 <vTaskSwitchContext>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	f380 8811 	msr	BASEPRI, r0
 8000b6c:	bc09      	pop	{r0, r3}
 8000b6e:	6819      	ldr	r1, [r3, #0]
 8000b70:	6808      	ldr	r0, [r1, #0]
 8000b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b76:	f01e 0f10 	tst.w	lr, #16
 8000b7a:	bf08      	it	eq
 8000b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000b80:	f380 8809 	msr	PSP, r0
 8000b84:	f3bf 8f6f 	isb	sy
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	f3af 8000 	nop.w

08000b90 <pxCurrentTCBConst>:
 8000b90:	20003f3c 	.word	0x20003f3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop

08000b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8000b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	607b      	str	r3, [r7, #4]
}
 8000bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000bb2:	f000 ffdd 	bl	8001b70 <xTaskIncrementTick>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SysTick_Handler+0x40>)
 8000bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f383 8811 	msr	BASEPRI, r3
}
 8000bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	e000ed04 	.word	0xe000ed04

08000bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <vPortSetupTimerInterrupt+0x34>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <vPortSetupTimerInterrupt+0x38>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <vPortSetupTimerInterrupt+0x3c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <vPortSetupTimerInterrupt+0x40>)
 8000bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf6:	099b      	lsrs	r3, r3, #6
 8000bf8:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <vPortSetupTimerInterrupt+0x44>)
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <vPortSetupTimerInterrupt+0x34>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010
 8000c14:	e000e018 	.word	0xe000e018
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	10624dd3 	.word	0x10624dd3
 8000c20:	e000e014 	.word	0xe000e014

08000c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000c34 <vPortEnableVFP+0x10>
 8000c28:	6801      	ldr	r1, [r0, #0]
 8000c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c2e:	6001      	str	r1, [r0, #0]
 8000c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000c32:	bf00      	nop
 8000c34:	e000ed88 	.word	0xe000ed88

08000c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000c3e:	f3ef 8305 	mrs	r3, IPSR
 8000c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d914      	bls.n	8000c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <vPortValidateInterruptPriority+0x70>)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <vPortValidateInterruptPriority+0x74>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	7afa      	ldrb	r2, [r7, #11]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d20a      	bcs.n	8000c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8000c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c62:	f383 8811 	msr	BASEPRI, r3
 8000c66:	f3bf 8f6f 	isb	sy
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	607b      	str	r3, [r7, #4]
}
 8000c70:	bf00      	nop
 8000c72:	e7fe      	b.n	8000c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <vPortValidateInterruptPriority+0x78>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <vPortValidateInterruptPriority+0x7c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d90a      	bls.n	8000c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8000c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c88:	f383 8811 	msr	BASEPRI, r3
 8000c8c:	f3bf 8f6f 	isb	sy
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	603b      	str	r3, [r7, #0]
}
 8000c96:	bf00      	nop
 8000c98:	e7fe      	b.n	8000c98 <vPortValidateInterruptPriority+0x60>
	}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e3f0 	.word	0xe000e3f0
 8000cac:	20003f34 	.word	0x20003f34
 8000cb0:	e000ed0c 	.word	0xe000ed0c
 8000cb4:	20003f38 	.word	0x20003f38

08000cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10a      	bne.n	8000ce2 <xQueueGenericReset+0x2a>
	__asm volatile
 8000ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd0:	f383 8811 	msr	BASEPRI, r3
 8000cd4:	f3bf 8f6f 	isb	sy
 8000cd8:	f3bf 8f4f 	dsb	sy
 8000cdc:	60bb      	str	r3, [r7, #8]
}
 8000cde:	bf00      	nop
 8000ce0:	e7fe      	b.n	8000ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000ce2:	f7ff fec7 	bl	8000a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cee:	68f9      	ldr	r1, [r7, #12]
 8000cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000cf2:	fb01 f303 	mul.w	r3, r1, r3
 8000cf6:	441a      	add	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	3b01      	subs	r3, #1
 8000d14:	68f9      	ldr	r1, [r7, #12]
 8000d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d18:	fb01 f303 	mul.w	r3, r1, r3
 8000d1c:	441a      	add	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	22ff      	movs	r2, #255	; 0xff
 8000d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d114      	bne.n	8000d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01a      	beq.n	8000d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3310      	adds	r3, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 f851 	bl	8001dec <xTaskRemoveFromEventList>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d012      	beq.n	8000d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <xQueueGenericReset+0xcc>)
 8000d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	f3bf 8f4f 	dsb	sy
 8000d5c:	f3bf 8f6f 	isb	sy
 8000d60:	e009      	b.n	8000d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3310      	adds	r3, #16
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fca0 	bl	80006ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3324      	adds	r3, #36	; 0x24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fc9b 	bl	80006ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000d76:	f7ff fead 	bl	8000ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	e000ed04 	.word	0xe000ed04

08000d88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	4613      	mov	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10a      	bne.n	8000db2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8000d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da0:	f383 8811 	msr	BASEPRI, r3
 8000da4:	f3bf 8f6f 	isb	sy
 8000da8:	f3bf 8f4f 	dsb	sy
 8000dac:	613b      	str	r3, [r7, #16]
}
 8000dae:	bf00      	nop
 8000db0:	e7fe      	b.n	8000db0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	3348      	adds	r3, #72	; 0x48
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fa89 	bl	80002d8 <pvPortMalloc>
 8000dc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d011      	beq.n	8000df2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3348      	adds	r3, #72	; 0x48
 8000dd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	4613      	mov	r3, r2
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 f805 	bl	8000dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000df2:	69bb      	ldr	r3, [r7, #24]
	}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d103      	bne.n	8000e18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e002      	b.n	8000e1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	69b8      	ldr	r0, [r7, #24]
 8000e2e:	f7ff ff43 	bl	8000cb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	; 0x38
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10a      	bne.n	8000e6e <xQueueGenericSend+0x32>
	__asm volatile
 8000e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e5c:	f383 8811 	msr	BASEPRI, r3
 8000e60:	f3bf 8f6f 	isb	sy
 8000e64:	f3bf 8f4f 	dsb	sy
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000e6a:	bf00      	nop
 8000e6c:	e7fe      	b.n	8000e6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d103      	bne.n	8000e7c <xQueueGenericSend+0x40>
 8000e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <xQueueGenericSend+0x44>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <xQueueGenericSend+0x46>
 8000e80:	2300      	movs	r3, #0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10a      	bne.n	8000e9c <xQueueGenericSend+0x60>
	__asm volatile
 8000e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8a:	f383 8811 	msr	BASEPRI, r3
 8000e8e:	f3bf 8f6f 	isb	sy
 8000e92:	f3bf 8f4f 	dsb	sy
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000e98:	bf00      	nop
 8000e9a:	e7fe      	b.n	8000e9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d103      	bne.n	8000eaa <xQueueGenericSend+0x6e>
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <xQueueGenericSend+0x72>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <xQueueGenericSend+0x74>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10a      	bne.n	8000eca <xQueueGenericSend+0x8e>
	__asm volatile
 8000eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	623b      	str	r3, [r7, #32]
}
 8000ec6:	bf00      	nop
 8000ec8:	e7fe      	b.n	8000ec8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000eca:	f001 f94f 	bl	800216c <xTaskGetSchedulerState>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <xQueueGenericSend+0x9e>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueGenericSend+0xa2>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueGenericSend+0xa4>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10a      	bne.n	8000efa <xQueueGenericSend+0xbe>
	__asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	61fb      	str	r3, [r7, #28]
}
 8000ef6:	bf00      	nop
 8000ef8:	e7fe      	b.n	8000ef8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000efa:	f7ff fdbb 	bl	8000a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d302      	bcc.n	8000f10 <xQueueGenericSend+0xd4>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d129      	bne.n	8000f64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f16:	f000 fa29 	bl	800136c <prvCopyDataToQueue>
 8000f1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d010      	beq.n	8000f46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f26:	3324      	adds	r3, #36	; 0x24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 ff5f 	bl	8001dec <xTaskRemoveFromEventList>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d013      	beq.n	8000f5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000f34:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <xQueueGenericSend+0x1f8>)
 8000f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	f3bf 8f4f 	dsb	sy
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	e00a      	b.n	8000f5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <xQueueGenericSend+0x1f8>)
 8000f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	f3bf 8f4f 	dsb	sy
 8000f58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000f5c:	f7ff fdba 	bl	8000ad4 <vPortExitCritical>
				return pdPASS;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e063      	b.n	800102c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d103      	bne.n	8000f72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000f6a:	f7ff fdb3 	bl	8000ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e05c      	b.n	800102c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 ff97 	bl	8001eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000f82:	2301      	movs	r3, #1
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000f86:	f7ff fda5 	bl	8000ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f8a:	f000 fd47 	bl	8001a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f8e:	f7ff fd71 	bl	8000a74 <vPortEnterCritical>
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9e:	d103      	bne.n	8000fa8 <xQueueGenericSend+0x16c>
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d103      	bne.n	8000fbe <xQueueGenericSend+0x182>
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000fbe:	f7ff fd89 	bl	8000ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000fc2:	1d3a      	adds	r2, r7, #4
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ff86 	bl	8001edc <xTaskCheckForTimeOut>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d124      	bne.n	8001020 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fd8:	f000 fac0 	bl	800155c <prvIsQueueFull>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d018      	beq.n	8001014 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	3310      	adds	r3, #16
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 feda 	bl	8001da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ff2:	f000 fa4b 	bl	800148c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000ff6:	f000 fd1f 	bl	8001a38 <xTaskResumeAll>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f47f af7c 	bne.w	8000efa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <xQueueGenericSend+0x1f8>)
 8001004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	f3bf 8f6f 	isb	sy
 8001012:	e772      	b.n	8000efa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001016:	f000 fa39 	bl	800148c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800101a:	f000 fd0d 	bl	8001a38 <xTaskResumeAll>
 800101e:	e76c      	b.n	8000efa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001022:	f000 fa33 	bl	800148c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001026:	f000 fd07 	bl	8001a38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800102a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800102c:	4618      	mov	r0, r3
 800102e:	3738      	adds	r7, #56	; 0x38
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e000ed04 	.word	0xe000ed04

08001038 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b090      	sub	sp, #64	; 0x40
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10a      	bne.n	8001066 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001062:	bf00      	nop
 8001064:	e7fe      	b.n	8001064 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <xQueueGenericSendFromISR+0x3c>
 800106c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <xQueueGenericSendFromISR+0x40>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <xQueueGenericSendFromISR+0x42>
 8001078:	2300      	movs	r3, #0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10a      	bne.n	8001094 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001090:	bf00      	nop
 8001092:	e7fe      	b.n	8001092 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d103      	bne.n	80010a2 <xQueueGenericSendFromISR+0x6a>
 800109a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <xQueueGenericSendFromISR+0x6e>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <xQueueGenericSendFromISR+0x70>
 80010a6:	2300      	movs	r3, #0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10a      	bne.n	80010c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80010ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	623b      	str	r3, [r7, #32]
}
 80010be:	bf00      	nop
 80010c0:	e7fe      	b.n	80010c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80010c2:	f7ff fdb9 	bl	8000c38 <vPortValidateInterruptPriority>
	__asm volatile
 80010c6:	f3ef 8211 	mrs	r2, BASEPRI
 80010ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ce:	f383 8811 	msr	BASEPRI, r3
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	f3bf 8f4f 	dsb	sy
 80010da:	61fa      	str	r2, [r7, #28]
 80010dc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80010de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80010e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d302      	bcc.n	80010f4 <xQueueGenericSendFromISR+0xbc>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d12f      	bne.n	8001154 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80010f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800110a:	f000 f92f 	bl	800136c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800110e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001116:	d112      	bne.n	800113e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	2b00      	cmp	r3, #0
 800111e:	d016      	beq.n	800114e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001122:	3324      	adds	r3, #36	; 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fe61 	bl	8001dec <xTaskRemoveFromEventList>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00e      	beq.n	800114e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e007      	b.n	800114e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800113e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001142:	3301      	adds	r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b25a      	sxtb	r2, r3
 8001148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800114a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800114e:	2301      	movs	r3, #1
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001152:	e001      	b.n	8001158 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f383 8811 	msr	BASEPRI, r3
}
 8001162:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001166:	4618      	mov	r0, r3
 8001168:	3740      	adds	r7, #64	; 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10a      	bne.n	80011a0 <xQueueReceive+0x30>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	623b      	str	r3, [r7, #32]
}
 800119c:	bf00      	nop
 800119e:	e7fe      	b.n	800119e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <xQueueReceive+0x3e>
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <xQueueReceive+0x42>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <xQueueReceive+0x44>
 80011b2:	2300      	movs	r3, #0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10a      	bne.n	80011ce <xQueueReceive+0x5e>
	__asm volatile
 80011b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011bc:	f383 8811 	msr	BASEPRI, r3
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	f3bf 8f4f 	dsb	sy
 80011c8:	61fb      	str	r3, [r7, #28]
}
 80011ca:	bf00      	nop
 80011cc:	e7fe      	b.n	80011cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011ce:	f000 ffcd 	bl	800216c <xTaskGetSchedulerState>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <xQueueReceive+0x6e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <xQueueReceive+0x72>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <xQueueReceive+0x74>
 80011e2:	2300      	movs	r3, #0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10a      	bne.n	80011fe <xQueueReceive+0x8e>
	__asm volatile
 80011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	61bb      	str	r3, [r7, #24]
}
 80011fa:	bf00      	nop
 80011fc:	e7fe      	b.n	80011fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80011fe:	f7ff fc39 	bl	8000a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01f      	beq.n	800124e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001212:	f000 f915 	bl	8001440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00f      	beq.n	8001246 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	3310      	adds	r3, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fdde 	bl	8001dec <xTaskRemoveFromEventList>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <xQueueReceive+0x1bc>)
 8001238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	f3bf 8f4f 	dsb	sy
 8001242:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001246:	f7ff fc45 	bl	8000ad4 <vPortExitCritical>
				return pdPASS;
 800124a:	2301      	movs	r3, #1
 800124c:	e069      	b.n	8001322 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001254:	f7ff fc3e 	bl	8000ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001258:	2300      	movs	r3, #0
 800125a:	e062      	b.n	8001322 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125e:	2b00      	cmp	r3, #0
 8001260:	d106      	bne.n	8001270 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fe22 	bl	8001eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001270:	f7ff fc30 	bl	8000ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001274:	f000 fbd2 	bl	8001a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001278:	f7ff fbfc 	bl	8000a74 <vPortEnterCritical>
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001282:	b25b      	sxtb	r3, r3
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d103      	bne.n	8001292 <xQueueReceive+0x122>
 800128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001298:	b25b      	sxtb	r3, r3
 800129a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129e:	d103      	bne.n	80012a8 <xQueueReceive+0x138>
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80012a8:	f7ff fc14 	bl	8000ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012ac:	1d3a      	adds	r2, r7, #4
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fe11 	bl	8001edc <xTaskCheckForTimeOut>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d123      	bne.n	8001308 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012c2:	f000 f935 	bl	8001530 <prvIsQueueEmpty>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d017      	beq.n	80012fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	3324      	adds	r3, #36	; 0x24
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fd65 	bl	8001da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80012da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012dc:	f000 f8d6 	bl	800148c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80012e0:	f000 fbaa 	bl	8001a38 <xTaskResumeAll>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d189      	bne.n	80011fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <xQueueReceive+0x1bc>)
 80012ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	f3bf 8f4f 	dsb	sy
 80012f6:	f3bf 8f6f 	isb	sy
 80012fa:	e780      	b.n	80011fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80012fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012fe:	f000 f8c5 	bl	800148c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001302:	f000 fb99 	bl	8001a38 <xTaskResumeAll>
 8001306:	e77a      	b.n	80011fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800130a:	f000 f8bf 	bl	800148c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800130e:	f000 fb93 	bl	8001a38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001314:	f000 f90c 	bl	8001530 <prvIsQueueEmpty>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	f43f af6f 	beq.w	80011fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001320:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001322:	4618      	mov	r0, r3
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000ed04 	.word	0xe000ed04

08001330 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800133e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001342:	f383 8811 	msr	BASEPRI, r3
 8001346:	f3bf 8f6f 	isb	sy
 800134a:	f3bf 8f4f 	dsb	sy
 800134e:	60bb      	str	r3, [r7, #8]
}
 8001350:	bf00      	nop
 8001352:	e7fe      	b.n	8001352 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8001354:	f7ff fb8e 	bl	8000a74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800135e:	f7ff fbb9 	bl	8000ad4 <vPortExitCritical>

	return uxReturn;
 8001362:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d14d      	bne.n	800142e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 ff06 	bl	80021a8 <xTaskPriorityDisinherit>
 800139c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e043      	b.n	800142e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d119      	bne.n	80013e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6858      	ldr	r0, [r3, #4]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	461a      	mov	r2, r3
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	f001 fc20 	bl	8002bfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	441a      	add	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d32b      	bcc.n	800142e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	e026      	b.n	800142e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	68d8      	ldr	r0, [r3, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	461a      	mov	r2, r3
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	f001 fc06 	bl	8002bfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	425b      	negs	r3, r3
 80013fa:	441a      	add	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	425b      	negs	r3, r3
 8001416:	441a      	add	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d105      	bne.n	800142e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	3b01      	subs	r3, #1
 800142c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001436:	697b      	ldr	r3, [r7, #20]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d018      	beq.n	8001484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	441a      	add	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	d303      	bcc.n	8001474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	461a      	mov	r2, r3
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f001 fbbc 	bl	8002bfc <memcpy>
	}
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001494:	f7ff faee 	bl	8000a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800149e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014a0:	e011      	b.n	80014c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d012      	beq.n	80014d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3324      	adds	r3, #36	; 0x24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fc9c 	bl	8001dec <xTaskRemoveFromEventList>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80014ba:	f000 fd71 	bl	8001fa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dce9      	bgt.n	80014a2 <prvUnlockQueue+0x16>
 80014ce:	e000      	b.n	80014d2 <prvUnlockQueue+0x46>
					break;
 80014d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80014da:	f7ff fafb 	bl	8000ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80014de:	f7ff fac9 	bl	8000a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80014ea:	e011      	b.n	8001510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d012      	beq.n	800151a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3310      	adds	r3, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fc77 	bl	8001dec <xTaskRemoveFromEventList>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001504:	f000 fd4c 	bl	8001fa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	3b01      	subs	r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001514:	2b00      	cmp	r3, #0
 8001516:	dce9      	bgt.n	80014ec <prvUnlockQueue+0x60>
 8001518:	e000      	b.n	800151c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800151a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	22ff      	movs	r2, #255	; 0xff
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001524:	f7ff fad6 	bl	8000ad4 <vPortExitCritical>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001538:	f7ff fa9c 	bl	8000a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001544:	2301      	movs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	e001      	b.n	800154e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800154e:	f7ff fac1 	bl	8000ad4 <vPortExitCritical>

	return xReturn;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001564:	f7ff fa86 	bl	8000a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	429a      	cmp	r2, r3
 8001572:	d102      	bne.n	800157a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001574:	2301      	movs	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e001      	b.n	800157e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800157e:	f7ff faa9 	bl	8000ad4 <vPortExitCritical>

	return xReturn;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af04      	add	r7, sp, #16
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10a      	bne.n	80015b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80015a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a4:	f383 8811 	msr	BASEPRI, r3
 80015a8:	f3bf 8f6f 	isb	sy
 80015ac:	f3bf 8f4f 	dsb	sy
 80015b0:	623b      	str	r3, [r7, #32]
}
 80015b2:	bf00      	nop
 80015b4:	e7fe      	b.n	80015b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80015b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10a      	bne.n	80015d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80015bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c0:	f383 8811 	msr	BASEPRI, r3
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	61fb      	str	r3, [r7, #28]
}
 80015ce:	bf00      	nop
 80015d0:	e7fe      	b.n	80015d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80015d2:	23a0      	movs	r3, #160	; 0xa0
 80015d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2ba0      	cmp	r3, #160	; 0xa0
 80015da:	d00a      	beq.n	80015f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80015dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e0:	f383 8811 	msr	BASEPRI, r3
 80015e4:	f3bf 8f6f 	isb	sy
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	61bb      	str	r3, [r7, #24]
}
 80015ee:	bf00      	nop
 80015f0:	e7fe      	b.n	80015f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80015f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80015f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01e      	beq.n	8001638 <xTaskCreateStatic+0xac>
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001608:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	2202      	movs	r2, #2
 800160e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001612:	2300      	movs	r3, #0
 8001614:	9303      	str	r3, [sp, #12]
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f850 	bl	80016d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001632:	f000 f8eb 	bl	800180c <prvAddNewTaskToReadyList>
 8001636:	e001      	b.n	800163c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800163c:	697b      	ldr	r3, [r7, #20]
	}
 800163e:	4618      	mov	r0, r3
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001646:	b580      	push	{r7, lr}
 8001648:	b08c      	sub	sp, #48	; 0x30
 800164a:	af04      	add	r7, sp, #16
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fe3c 	bl	80002d8 <pvPortMalloc>
 8001660:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00e      	beq.n	8001686 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001668:	20a0      	movs	r0, #160	; 0xa0
 800166a:	f7fe fe35 	bl	80002d8 <pvPortMalloc>
 800166e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
 800167c:	e005      	b.n	800168a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7fe fef6 	bl	8000470 <vPortFree>
 8001684:	e001      	b.n	800168a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d017      	beq.n	80016c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	2300      	movs	r3, #0
 800169c:	9303      	str	r3, [sp, #12]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f80e 	bl	80016d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80016b4:	69f8      	ldr	r0, [r7, #28]
 80016b6:	f000 f8a9 	bl	800180c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	e002      	b.n	80016c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016c6:	69bb      	ldr	r3, [r7, #24]
	}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016e8:	3b01      	subs	r3, #1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f023 0307 	bic.w	r3, r3, #7
 80016f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	617b      	str	r3, [r7, #20]
}
 8001714:	bf00      	nop
 8001716:	e7fe      	b.n	8001716 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01f      	beq.n	800175e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e012      	b.n	800174a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	7819      	ldrb	r1, [r3, #0]
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	4413      	add	r3, r2
 8001732:	3334      	adds	r3, #52	; 0x34
 8001734:	460a      	mov	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	3301      	adds	r3, #1
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d9e9      	bls.n	8001724 <prvInitialiseNewTask+0x54>
 8001750:	e000      	b.n	8001754 <prvInitialiseNewTask+0x84>
			{
				break;
 8001752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800175c:	e003      	b.n	8001766 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800175e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	2b06      	cmp	r3, #6
 800176a:	d901      	bls.n	8001770 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800176c:	2306      	movs	r3, #6
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800177a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	2200      	movs	r2, #0
 8001780:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001784:	3304      	adds	r3, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe ffb0 	bl	80006ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178e:	3318      	adds	r3, #24
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ffab 	bl	80006ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800179a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	f1c3 0207 	rsb	r2, r3, #7
 80017a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80017ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	334c      	adds	r3, #76	; 0x4c
 80017c0:	224c      	movs	r2, #76	; 0x4c
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 f97d 	bl	8002ac4 <memset>
 80017ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <prvInitialiseNewTask+0x130>)
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <prvInitialiseNewTask+0x134>)
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <prvInitialiseNewTask+0x138>)
 80017da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	68f9      	ldr	r1, [r7, #12]
 80017e0:	69b8      	ldr	r0, [r7, #24]
 80017e2:	f7ff f817 	bl	8000814 <pxPortInitialiseStack>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20004080 	.word	0x20004080
 8001804:	200040e8 	.word	0x200040e8
 8001808:	20004150 	.word	0x20004150

0800180c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001814:	f7ff f92e 	bl	8000a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <prvAddNewTaskToReadyList+0xb8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <prvAddNewTaskToReadyList+0xb8>)
 8001820:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <prvAddNewTaskToReadyList+0xbc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800182a:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <prvAddNewTaskToReadyList+0xbc>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <prvAddNewTaskToReadyList+0xb8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d110      	bne.n	800185a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001838:	f000 fbd6 	bl	8001fe8 <prvInitialiseTaskLists>
 800183c:	e00d      	b.n	800185a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <prvAddNewTaskToReadyList+0xc0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <prvAddNewTaskToReadyList+0xbc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	429a      	cmp	r2, r3
 8001852:	d802      	bhi.n	800185a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <prvAddNewTaskToReadyList+0xbc>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <prvAddNewTaskToReadyList+0xc4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <prvAddNewTaskToReadyList+0xc4>)
 8001862:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2201      	movs	r2, #1
 800186a:	409a      	lsls	r2, r3
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <prvAddNewTaskToReadyList+0xc8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4313      	orrs	r3, r2
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <prvAddNewTaskToReadyList+0xc8>)
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <prvAddNewTaskToReadyList+0xcc>)
 8001884:	441a      	add	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3304      	adds	r3, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f7fe ff3a 	bl	8000706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001892:	f7ff f91f 	bl	8000ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <prvAddNewTaskToReadyList+0xc0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00e      	beq.n	80018bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <prvAddNewTaskToReadyList+0xbc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <prvAddNewTaskToReadyList+0xd0>)
 80018ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f3bf 8f4f 	dsb	sy
 80018b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000403c 	.word	0x2000403c
 80018c8:	20003f3c 	.word	0x20003f3c
 80018cc:	20004048 	.word	0x20004048
 80018d0:	20004058 	.word	0x20004058
 80018d4:	20004044 	.word	0x20004044
 80018d8:	20003f40 	.word	0x20003f40
 80018dc:	e000ed04 	.word	0xe000ed04

080018e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d017      	beq.n	8001922 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <vTaskDelay+0x60>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <vTaskDelay+0x30>
	__asm volatile
 80018fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fe:	f383 8811 	msr	BASEPRI, r3
 8001902:	f3bf 8f6f 	isb	sy
 8001906:	f3bf 8f4f 	dsb	sy
 800190a:	60bb      	str	r3, [r7, #8]
}
 800190c:	bf00      	nop
 800190e:	e7fe      	b.n	800190e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001910:	f000 f884 	bl	8001a1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001914:	2100      	movs	r1, #0
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fccc 	bl	80022b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800191c:	f000 f88c 	bl	8001a38 <xTaskResumeAll>
 8001920:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <vTaskDelay+0x64>)
 800192a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f3bf 8f4f 	dsb	sy
 8001934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20004064 	.word	0x20004064
 8001944:	e000ed04 	.word	0xe000ed04

08001948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001956:	463a      	mov	r2, r7
 8001958:	1d39      	adds	r1, r7, #4
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fca0 	bl	80002a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	9202      	str	r2, [sp, #8]
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2300      	movs	r3, #0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	460a      	mov	r2, r1
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <vTaskStartScheduler+0xb4>)
 8001978:	4821      	ldr	r0, [pc, #132]	; (8001a00 <vTaskStartScheduler+0xb8>)
 800197a:	f7ff fe07 	bl	800158c <xTaskCreateStatic>
 800197e:	4603      	mov	r3, r0
 8001980:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <vTaskStartScheduler+0xbc>)
 8001982:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <vTaskStartScheduler+0xbc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800198c:	2301      	movs	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e001      	b.n	8001996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d11b      	bne.n	80019d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800199c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a0:	f383 8811 	msr	BASEPRI, r3
 80019a4:	f3bf 8f6f 	isb	sy
 80019a8:	f3bf 8f4f 	dsb	sy
 80019ac:	613b      	str	r3, [r7, #16]
}
 80019ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <vTaskStartScheduler+0xc0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	334c      	adds	r3, #76	; 0x4c
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <vTaskStartScheduler+0xc4>)
 80019b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <vTaskStartScheduler+0xc8>)
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <vTaskStartScheduler+0xcc>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <vTaskStartScheduler+0xd0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80019ce:	f7fe ffaf 	bl	8000930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80019d2:	e00e      	b.n	80019f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019da:	d10a      	bne.n	80019f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	60fb      	str	r3, [r7, #12]
}
 80019ee:	bf00      	nop
 80019f0:	e7fe      	b.n	80019f0 <vTaskStartScheduler+0xa8>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	080034b4 	.word	0x080034b4
 8001a00:	08001fb9 	.word	0x08001fb9
 8001a04:	20004060 	.word	0x20004060
 8001a08:	20003f3c 	.word	0x20003f3c
 8001a0c:	20000054 	.word	0x20000054
 8001a10:	2000405c 	.word	0x2000405c
 8001a14:	20004048 	.word	0x20004048
 8001a18:	20004040 	.word	0x20004040

08001a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <vTaskSuspendAll+0x18>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <vTaskSuspendAll+0x18>)
 8001a28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	20004064 	.word	0x20004064

08001a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <xTaskResumeAll+0x114>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <xTaskResumeAll+0x2c>
	__asm volatile
 8001a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a52:	f383 8811 	msr	BASEPRI, r3
 8001a56:	f3bf 8f6f 	isb	sy
 8001a5a:	f3bf 8f4f 	dsb	sy
 8001a5e:	603b      	str	r3, [r7, #0]
}
 8001a60:	bf00      	nop
 8001a62:	e7fe      	b.n	8001a62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a64:	f7ff f806 	bl	8000a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a68:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <xTaskResumeAll+0x114>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	4a37      	ldr	r2, [pc, #220]	; (8001b4c <xTaskResumeAll+0x114>)
 8001a70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <xTaskResumeAll+0x114>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d161      	bne.n	8001b3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <xTaskResumeAll+0x118>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d05d      	beq.n	8001b3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a82:	e02e      	b.n	8001ae2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <xTaskResumeAll+0x11c>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3318      	adds	r3, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fe95 	bl	80007c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fe90 	bl	80007c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <xTaskResumeAll+0x120>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <xTaskResumeAll+0x120>)
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <xTaskResumeAll+0x124>)
 8001ac0:	441a      	add	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f7fe fe1c 	bl	8000706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <xTaskResumeAll+0x128>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d302      	bcc.n	8001ae2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <xTaskResumeAll+0x12c>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <xTaskResumeAll+0x11c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1cc      	bne.n	8001a84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001af0:	f000 fb1c 	bl	800212c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <xTaskResumeAll+0x130>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d010      	beq.n	8001b22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001b00:	f000 f836 	bl	8001b70 <xTaskIncrementTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <xTaskResumeAll+0x12c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f1      	bne.n	8001b00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <xTaskResumeAll+0x130>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <xTaskResumeAll+0x12c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <xTaskResumeAll+0x134>)
 8001b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001b3e:	f7fe ffc9 	bl	8000ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8001b42:	68bb      	ldr	r3, [r7, #8]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20004064 	.word	0x20004064
 8001b50:	2000403c 	.word	0x2000403c
 8001b54:	20003ffc 	.word	0x20003ffc
 8001b58:	20004044 	.word	0x20004044
 8001b5c:	20003f40 	.word	0x20003f40
 8001b60:	20003f3c 	.word	0x20003f3c
 8001b64:	20004050 	.word	0x20004050
 8001b68:	2000404c 	.word	0x2000404c
 8001b6c:	e000ed04 	.word	0xe000ed04

08001b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <xTaskIncrementTick+0x144>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 808e 	bne.w	8001ca0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <xTaskIncrementTick+0x148>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b8c:	4a4a      	ldr	r2, [pc, #296]	; (8001cb8 <xTaskIncrementTick+0x148>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d120      	bne.n	8001bda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b98:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <xTaskIncrementTick+0x14c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8001ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba6:	f383 8811 	msr	BASEPRI, r3
 8001baa:	f3bf 8f6f 	isb	sy
 8001bae:	f3bf 8f4f 	dsb	sy
 8001bb2:	603b      	str	r3, [r7, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	e7fe      	b.n	8001bb6 <xTaskIncrementTick+0x46>
 8001bb8:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <xTaskIncrementTick+0x14c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <xTaskIncrementTick+0x150>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <xTaskIncrementTick+0x14c>)
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <xTaskIncrementTick+0x150>)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <xTaskIncrementTick+0x154>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <xTaskIncrementTick+0x154>)
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	f000 faa9 	bl	800212c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <xTaskIncrementTick+0x158>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d348      	bcc.n	8001c76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <xTaskIncrementTick+0x14c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d104      	bne.n	8001bf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <xTaskIncrementTick+0x158>)
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	601a      	str	r2, [r3, #0]
					break;
 8001bf6:	e03e      	b.n	8001c76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <xTaskIncrementTick+0x14c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d203      	bcs.n	8001c18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001c10:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <xTaskIncrementTick+0x158>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c16:	e02e      	b.n	8001c76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fdcf 	bl	80007c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3318      	adds	r3, #24
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fdc6 	bl	80007c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	2201      	movs	r2, #1
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <xTaskIncrementTick+0x15c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <xTaskIncrementTick+0x15c>)
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <xTaskIncrementTick+0x160>)
 8001c54:	441a      	add	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	f7fe fd52 	bl	8000706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <xTaskIncrementTick+0x164>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3b9      	bcc.n	8001be4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c74:	e7b6      	b.n	8001be4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <xTaskIncrementTick+0x164>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	4914      	ldr	r1, [pc, #80]	; (8001cd0 <xTaskIncrementTick+0x160>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d901      	bls.n	8001c92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <xTaskIncrementTick+0x168>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e004      	b.n	8001caa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <xTaskIncrementTick+0x16c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <xTaskIncrementTick+0x16c>)
 8001ca8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001caa:	697b      	ldr	r3, [r7, #20]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20004064 	.word	0x20004064
 8001cb8:	20004040 	.word	0x20004040
 8001cbc:	20003ff4 	.word	0x20003ff4
 8001cc0:	20003ff8 	.word	0x20003ff8
 8001cc4:	20004054 	.word	0x20004054
 8001cc8:	2000405c 	.word	0x2000405c
 8001ccc:	20004044 	.word	0x20004044
 8001cd0:	20003f40 	.word	0x20003f40
 8001cd4:	20003f3c 	.word	0x20003f3c
 8001cd8:	20004050 	.word	0x20004050
 8001cdc:	2000404c 	.word	0x2000404c

08001ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <vTaskSwitchContext+0xac>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <vTaskSwitchContext+0xb0>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001cf4:	e044      	b.n	8001d80 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <vTaskSwitchContext+0xb0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <vTaskSwitchContext+0xb4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f1c3 031f 	rsb	r3, r3, #31
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4921      	ldr	r1, [pc, #132]	; (8001d98 <vTaskSwitchContext+0xb8>)
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	f383 8811 	msr	BASEPRI, r3
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	f3bf 8f4f 	dsb	sy
 8001d36:	607b      	str	r3, [r7, #4]
}
 8001d38:	bf00      	nop
 8001d3a:	e7fe      	b.n	8001d3a <vTaskSwitchContext+0x5a>
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <vTaskSwitchContext+0xb8>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d104      	bne.n	8001d6c <vTaskSwitchContext+0x8c>
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <vTaskSwitchContext+0xbc>)
 8001d74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <vTaskSwitchContext+0xbc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	334c      	adds	r3, #76	; 0x4c
 8001d7c:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <vTaskSwitchContext+0xc0>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	20004064 	.word	0x20004064
 8001d90:	20004050 	.word	0x20004050
 8001d94:	20004044 	.word	0x20004044
 8001d98:	20003f40 	.word	0x20003f40
 8001d9c:	20003f3c 	.word	0x20003f3c
 8001da0:	20000054 	.word	0x20000054

08001da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	60fb      	str	r3, [r7, #12]
}
 8001dc6:	bf00      	nop
 8001dc8:	e7fe      	b.n	8001dc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <vTaskPlaceOnEventList+0x44>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3318      	adds	r3, #24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fcbb 	bl	800074e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dd8:	2101      	movs	r1, #1
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f000 fa6a 	bl	80022b4 <prvAddCurrentTaskToDelayedList>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20003f3c 	.word	0x20003f3c

08001dec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	60fb      	str	r3, [r7, #12]
}
 8001e14:	bf00      	nop
 8001e16:	e7fe      	b.n	8001e16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fccf 	bl	80007c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <xTaskRemoveFromEventList+0xac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d11c      	bne.n	8001e64 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fcc6 	bl	80007c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <xTaskRemoveFromEventList+0xb0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <xTaskRemoveFromEventList+0xb0>)
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <xTaskRemoveFromEventList+0xb4>)
 8001e54:	441a      	add	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f7fe fc52 	bl	8000706 <vListInsertEnd>
 8001e62:	e005      	b.n	8001e70 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	3318      	adds	r3, #24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <xTaskRemoveFromEventList+0xb8>)
 8001e6c:	f7fe fc4b 	bl	8000706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <xTaskRemoveFromEventList+0xbc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d905      	bls.n	8001e8a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <xTaskRemoveFromEventList+0xc0>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e001      	b.n	8001e8e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001e8e:	697b      	ldr	r3, [r7, #20]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20004064 	.word	0x20004064
 8001e9c:	20004044 	.word	0x20004044
 8001ea0:	20003f40 	.word	0x20003f40
 8001ea4:	20003ffc 	.word	0x20003ffc
 8001ea8:	20003f3c 	.word	0x20003f3c
 8001eac:	20004050 	.word	0x20004050

08001eb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <vTaskInternalSetTimeOutState+0x24>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <vTaskInternalSetTimeOutState+0x28>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	605a      	str	r2, [r3, #4]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	20004054 	.word	0x20004054
 8001ed8:	20004040 	.word	0x20004040

08001edc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef0:	f383 8811 	msr	BASEPRI, r3
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	613b      	str	r3, [r7, #16]
}
 8001efe:	bf00      	nop
 8001f00:	e7fe      	b.n	8001f00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0c:	f383 8811 	msr	BASEPRI, r3
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	60fb      	str	r3, [r7, #12]
}
 8001f1a:	bf00      	nop
 8001f1c:	e7fe      	b.n	8001f1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001f1e:	f7fe fda9 	bl	8000a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <xTaskCheckForTimeOut+0xbc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3a:	d102      	bne.n	8001f42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	e023      	b.n	8001f8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <xTaskCheckForTimeOut+0xc0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d007      	beq.n	8001f5e <xTaskCheckForTimeOut+0x82>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d302      	bcc.n	8001f5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	e015      	b.n	8001f8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d20b      	bcs.n	8001f80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad2      	subs	r2, r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff9b 	bl	8001eb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e004      	b.n	8001f8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001f8a:	f7fe fda3 	bl	8000ad4 <vPortExitCritical>

	return xReturn;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20004040 	.word	0x20004040
 8001f9c:	20004054 	.word	0x20004054

08001fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <vTaskMissedYield+0x14>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	20004050 	.word	0x20004050

08001fb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fc0:	f000 f852 	bl	8002068 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <prvIdleTask+0x28>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d9f9      	bls.n	8001fc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <prvIdleTask+0x2c>)
 8001fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fdc:	e7f0      	b.n	8001fc0 <prvIdleTask+0x8>
 8001fde:	bf00      	nop
 8001fe0:	20003f40 	.word	0x20003f40
 8001fe4:	e000ed04 	.word	0xe000ed04

08001fe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	e00c      	b.n	800200e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <prvInitialiseTaskLists+0x60>)
 8002000:	4413      	add	r3, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fb52 	bl	80006ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3301      	adds	r3, #1
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b06      	cmp	r3, #6
 8002012:	d9ef      	bls.n	8001ff4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <prvInitialiseTaskLists+0x64>)
 8002016:	f7fe fb49 	bl	80006ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <prvInitialiseTaskLists+0x68>)
 800201c:	f7fe fb46 	bl	80006ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <prvInitialiseTaskLists+0x6c>)
 8002022:	f7fe fb43 	bl	80006ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002026:	480c      	ldr	r0, [pc, #48]	; (8002058 <prvInitialiseTaskLists+0x70>)
 8002028:	f7fe fb40 	bl	80006ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800202c:	480b      	ldr	r0, [pc, #44]	; (800205c <prvInitialiseTaskLists+0x74>)
 800202e:	f7fe fb3d 	bl	80006ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <prvInitialiseTaskLists+0x78>)
 8002034:	4a05      	ldr	r2, [pc, #20]	; (800204c <prvInitialiseTaskLists+0x64>)
 8002036:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <prvInitialiseTaskLists+0x7c>)
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <prvInitialiseTaskLists+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20003f40 	.word	0x20003f40
 800204c:	20003fcc 	.word	0x20003fcc
 8002050:	20003fe0 	.word	0x20003fe0
 8002054:	20003ffc 	.word	0x20003ffc
 8002058:	20004010 	.word	0x20004010
 800205c:	20004028 	.word	0x20004028
 8002060:	20003ff4 	.word	0x20003ff4
 8002064:	20003ff8 	.word	0x20003ff8

08002068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800206e:	e019      	b.n	80020a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002070:	f7fe fd00 	bl	8000a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <prvCheckTasksWaitingTermination+0x50>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fb9d 	bl	80007c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <prvCheckTasksWaitingTermination+0x54>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <prvCheckTasksWaitingTermination+0x54>)
 800208e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <prvCheckTasksWaitingTermination+0x58>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3b01      	subs	r3, #1
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <prvCheckTasksWaitingTermination+0x58>)
 8002098:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800209a:	f7fe fd1b 	bl	8000ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f810 	bl	80020c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <prvCheckTasksWaitingTermination+0x58>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e1      	bne.n	8002070 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20004010 	.word	0x20004010
 80020bc:	2000403c 	.word	0x2000403c
 80020c0:	20004024 	.word	0x20004024

080020c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	334c      	adds	r3, #76	; 0x4c
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fd11 	bl	8002af8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d108      	bne.n	80020f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f9c3 	bl	8000470 <vPortFree>
				vPortFree( pxTCB );
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe f9c0 	bl	8000470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020f0:	e018      	b.n	8002124 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d103      	bne.n	8002104 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe f9b7 	bl	8000470 <vPortFree>
	}
 8002102:	e00f      	b.n	8002124 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800210a:	2b02      	cmp	r3, #2
 800210c:	d00a      	beq.n	8002124 <prvDeleteTCB+0x60>
	__asm volatile
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	60fb      	str	r3, [r7, #12]
}
 8002120:	bf00      	nop
 8002122:	e7fe      	b.n	8002122 <prvDeleteTCB+0x5e>
	}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <prvResetNextTaskUnblockTime+0x38>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <prvResetNextTaskUnblockTime+0x3c>)
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002144:	e008      	b.n	8002158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <prvResetNextTaskUnblockTime+0x38>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <prvResetNextTaskUnblockTime+0x3c>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20003ff4 	.word	0x20003ff4
 8002168:	2000405c 	.word	0x2000405c

0800216c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <xTaskGetSchedulerState+0x34>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800217a:	2301      	movs	r3, #1
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	e008      	b.n	8002192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <xTaskGetSchedulerState+0x38>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002188:	2302      	movs	r3, #2
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	e001      	b.n	8002192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002192:	687b      	ldr	r3, [r7, #4]
	}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20004048 	.word	0x20004048
 80021a4:	20004064 	.word	0x20004064

080021a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06e      	beq.n	800229c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80021be:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <xTaskPriorityDisinherit+0x100>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d00a      	beq.n	80021de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	60fb      	str	r3, [r7, #12]
}
 80021da:	bf00      	nop
 80021dc:	e7fe      	b.n	80021dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80021e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	60bb      	str	r3, [r7, #8]
}
 80021f8:	bf00      	nop
 80021fa:	e7fe      	b.n	80021fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	429a      	cmp	r2, r3
 8002210:	d044      	beq.n	800229c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002216:	2b00      	cmp	r3, #0
 8002218:	d140      	bne.n	800229c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	3304      	adds	r3, #4
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe face 	bl	80007c0 <uxListRemove>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222e:	491f      	ldr	r1, [pc, #124]	; (80022ac <xTaskPriorityDisinherit+0x104>)
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <xTaskPriorityDisinherit+0xae>
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	2201      	movs	r2, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <xTaskPriorityDisinherit+0x108>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4013      	ands	r3, r2
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <xTaskPriorityDisinherit+0x108>)
 8002254:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f1c3 0207 	rsb	r2, r3, #7
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	2201      	movs	r2, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <xTaskPriorityDisinherit+0x108>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <xTaskPriorityDisinherit+0x108>)
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4a08      	ldr	r2, [pc, #32]	; (80022ac <xTaskPriorityDisinherit+0x104>)
 800228a:	441a      	add	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	3304      	adds	r3, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f7fe fa37 	bl	8000706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800229c:	697b      	ldr	r3, [r7, #20]
	}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20003f3c 	.word	0x20003f3c
 80022ac:	20003f40 	.word	0x20003f40
 80022b0:	20004044 	.word	0x20004044

080022b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <prvAddCurrentTaskToDelayedList+0xb0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3304      	adds	r3, #4
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fa78 	bl	80007c0 <uxListRemove>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10b      	bne.n	80022ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2201      	movs	r2, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4013      	ands	r3, r2
 80022ea:	4a20      	ldr	r2, [pc, #128]	; (800236c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d10a      	bne.n	800230c <prvAddCurrentTaskToDelayedList+0x58>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3304      	adds	r3, #4
 8002302:	4619      	mov	r1, r3
 8002304:	481a      	ldr	r0, [pc, #104]	; (8002370 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002306:	f7fe f9fe 	bl	8000706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800230a:	e026      	b.n	800235a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d209      	bcs.n	8002338 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3304      	adds	r3, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7fe fa0c 	bl	800074e <vListInsert>
}
 8002336:	e010      	b.n	800235a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <prvAddCurrentTaskToDelayedList+0xc4>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3304      	adds	r3, #4
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7fe fa02 	bl	800074e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <prvAddCurrentTaskToDelayedList+0xc8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	429a      	cmp	r2, r3
 8002352:	d202      	bcs.n	800235a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6013      	str	r3, [r2, #0]
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20004040 	.word	0x20004040
 8002368:	20003f3c 	.word	0x20003f3c
 800236c:	20004044 	.word	0x20004044
 8002370:	20004028 	.word	0x20004028
 8002374:	20003ff8 	.word	0x20003ff8
 8002378:	20003ff4 	.word	0x20003ff4
 800237c:	2000405c 	.word	0x2000405c

08002380 <CMD_Parse_Brightness>:
#include "CMD_Parse_Brightness.h"
#include "string.h"



int CMD_Parse_Brightness (char *cmd) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((strncmp (cmd, CMD_PREFIX_HIGH_REG, strlen (CMD_PREFIX_HIGH_REG)) && strncmp (cmd, CMD_PREFIX_LOW_REG, strlen (CMD_PREFIX_LOW_REG))) == 0) { // Если команда начинается с префикса
 8002388:	2207      	movs	r2, #7
 800238a:	4910      	ldr	r1, [pc, #64]	; (80023cc <CMD_Parse_Brightness+0x4c>)
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fba1 	bl	8002ad4 <strncmp>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <CMD_Parse_Brightness+0x2c>
 8002398:	2207      	movs	r2, #7
 800239a:	490d      	ldr	r1, [pc, #52]	; (80023d0 <CMD_Parse_Brightness+0x50>)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fb99 	bl	8002ad4 <strncmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <CMD_Parse_Brightness+0x2c>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <CMD_Parse_Brightness+0x2e>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <CMD_Parse_Brightness+0x40>
    return (atoi (cmd + strlen (CMD_PREFIX_HIGH_REG))); // Возвращаем числовое значение после префикса
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3307      	adds	r3, #7
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fad3 	bl	8002962 <atoi>
 80023bc:	4603      	mov	r3, r0
 80023be:	e001      	b.n	80023c4 <CMD_Parse_Brightness+0x44>
  } else { // Если команда не начинается с префикса
    return -1; // Возвращаем -1, как признак ошибки
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	080034bc 	.word	0x080034bc
 80023d0:	080034c4 	.word	0x080034c4

080023d4 <GPIO_Init>:
#include "GPIO_Init.h"

void GPIO_Init (void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //Тактирование на порт A
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <GPIO_Init+0x44>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <GPIO_Init+0x44>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER &= ~GPIO_MODER_MODER5; // очистили режим для нужного пина
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <GPIO_Init+0x48>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <GPIO_Init+0x48>)
 80023ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023ee:	6013      	str	r3, [r2, #0]

		GPIOA->MODER |= GPIO_MODER_MODER5_0; // пин на выход
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <GPIO_Init+0x48>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a09      	ldr	r2, [pc, #36]	; (800241c <GPIO_Init+0x48>)
 80023f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fa:	6013      	str	r3, [r2, #0]

		GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED5_0 | GPIO_OSPEEDR_OSPEED5_1 ); // скорость very high
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <GPIO_Init+0x48>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <GPIO_Init+0x48>)
 8002402:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002406:	6093      	str	r3, [r2, #8]

		GPIOA->BSRR = GPIO_BSRR_BS5; // установили в высокое состояние
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <GPIO_Init+0x48>)
 800240a:	2220      	movs	r2, #32
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40023800 	.word	0x40023800
 800241c:	40020000 	.word	0x40020000

08002420 <TIM2_PWM_Init>:
#include "TIM2_PWM_Init.h"

void TIM2_PWM_Init(void) {
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
		// Включение тактирования TIM1
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <TIM2_PWM_Init+0xb0>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <TIM2_PWM_Init+0xb0>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6413      	str	r3, [r2, #64]	; 0x40
		// Настройка вывода PA8 в режим альтернативной функции AF1 (TIM2_CH1)
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //Тактирование на порт A
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <TIM2_PWM_Init+0xb0>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <TIM2_PWM_Init+0xb0>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER &= ~GPIO_MODER_MODER5; // очистили режим для нужного пина
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 8002442:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002446:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= GPIO_MODER_MODER5_1;
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 800244e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002452:	6013      	str	r3, [r2, #0]
		GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED5_0 | GPIO_OSPEEDR_OSPEED5_1 ); // скорость very high
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 800245a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800245e:	6093      	str	r3, [r2, #8]
		GPIOA->AFR[0] |= GPIO_AFRL_AFSEL5_0; /////////////////////////
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <TIM2_PWM_Init+0xb4>)
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246a:	6213      	str	r3, [r2, #32]
		// Установка предделителя таймера TIM2
		TIM2->PSC = 1600-1;
 800246c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002470:	f240 623f 	movw	r2, #1599	; 0x63f
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
		// Установка периода таймера TIM2
		TIM2->ARR = 255-1;
 8002476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800247a:	22fe      	movs	r2, #254	; 0xfe
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
		// Установка коэффициента заполнения таймера TIM2
		TIM2->CCR1 = 0;
 800247e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002482:	2200      	movs	r2, #0
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
		// Включение канала 1 таймера TIM2 в режиме PWM
		TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // Output Compare 1 mode 110: PWM mode 1 - In upcounting
 8002486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002490:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002494:	6193      	str	r3, [r2, #24]
		TIM2->CCER |= TIM_CCER_CC1E; // Capture/Compare 1 output enable
 8002496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6213      	str	r3, [r2, #32]
		// Включение таймера TIM2
		TIM2->CR1 |= TIM_CR1_CEN;
 80024a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6013      	str	r3, [r2, #0]
		TIM2->BDTR |= TIM_BDTR_MOE;
 80024b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
	}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000

080024d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db0b      	blt.n	8002502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4907      	ldr	r1, [pc, #28]	; (8002510 <__NVIC_EnableIRQ+0x38>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	; (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <USART_Init>:
#include "USART_Init.h"
#include "FreeRTOS.h"

void USART_Init (void){
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
// Настраиваем порт A для работы с USART1
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Включаем тактирование порта A
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <USART_Init+0xa4>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <USART_Init+0xa4>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOA->MODER |= GPIO_MODER_MODER5_0; /* set pin to output mode */
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <USART_Init+0xa8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a24      	ldr	r2, [pc, #144]	; (8002610 <USART_Init+0xa8>)
 800257e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002582:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODER9_1; // Устанавливаем режим альтернативной функции для пина PA9 (TX)
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <USART_Init+0xa8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a21      	ldr	r2, [pc, #132]	; (8002610 <USART_Init+0xa8>)
 800258a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800258e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODER10_1;
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <USART_Init+0xa8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <USART_Init+0xa8>)
 8002596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259a:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[1] |= (GPIO_AFRH_AFSEL9_2 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_0); // Выбираем альтернативную функцию 7 (USART1) для пина PA9
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <USART_Init+0xa8>)
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <USART_Init+0xa8>)
 80025a2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80025a6:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[1] |= (GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_0); // Выбираем альтернативную функцию 7 (USART1) для пина PA9
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <USART_Init+0xa8>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <USART_Init+0xa8>)
 80025ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b2:	6253      	str	r3, [r2, #36]	; 0x24
  // Настраиваем USART1 для передачи данных
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // Включаем тактирование USART1
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <USART_Init+0xa4>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <USART_Init+0xa4>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6453      	str	r3, [r2, #68]	; 0x44
  USART1->BRR = 0x683; // Устанавливаем скорость передачи 9600 бод при частоте 16 МГц
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <USART_Init+0xac>)
 80025c2:	f240 6283 	movw	r2, #1667	; 0x683
 80025c6:	609a      	str	r2, [r3, #8]
  USART1->CR1 |= USART_CR1_TE; // Включаем передатчик
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <USART_Init+0xac>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <USART_Init+0xac>)
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <USART_Init+0xac>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <USART_Init+0xac>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RXNEIE;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <USART_Init+0xac>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <USART_Init+0xac>)
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ(USART1_IRQn);
 80025ec:	2025      	movs	r0, #37	; 0x25
 80025ee:	f7ff ff73 	bl	80024d8 <__NVIC_EnableIRQ>
  USART1->CR1 |= USART_CR1_UE; // Включаем USART1
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <USART_Init+0xac>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a07      	ldr	r2, [pc, #28]	; (8002614 <USART_Init+0xac>)
 80025f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025fc:	60d3      	str	r3, [r2, #12]
  NVIC_SetPriority(USART1_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
 80025fe:	2105      	movs	r1, #5
 8002600:	2025      	movs	r0, #37	; 0x25
 8002602:	f7ff ff87 	bl	8002514 <__NVIC_SetPriority>
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40020000 	.word	0x40020000
 8002614:	40011000 	.word	0x40011000

08002618 <USART_Send>:

void USART_Send(char chr)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
			while(!(USART1->SR & USART_SR_TC));
 8002622:	bf00      	nop
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <USART_Send+0x2c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f9      	beq.n	8002624 <USART_Send+0xc>
			USART1->DR = chr;
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <USART_Send+0x2c>)
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	6053      	str	r3, [r2, #4]

}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40011000 	.word	0x40011000

08002648 <USART_Send_String>:
			USART1->DR = data;

}

void USART_Send_String(char* str)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
			uint8_t i = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
			while(str[i])
 8002654:	e009      	b.n	800266a <USART_Send_String+0x22>
	{
			USART_Send(str[i++]);
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	73fa      	strb	r2, [r7, #15]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ffd7 	bl	8002618 <USART_Send>
			while(str[i])
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ef      	bne.n	8002656 <USART_Send_String+0xe>
	}
}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <main>:

uint8_t rxIndex = 0;


int main(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af02      	add	r7, sp, #8

	GPIO_Init();
 8002686:	f7ff fea5 	bl	80023d4 <GPIO_Init>
	USART_Init();
 800268a:	f7ff ff6d 	bl	8002568 <USART_Init>
	TIM2_PWM_Init();
 800268e:	f7ff fec7 	bl	8002420 <TIM2_PWM_Init>

	xTaskCreate(vTaskLed, "LED", 128, NULL, 1, NULL );
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2301      	movs	r3, #1
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2300      	movs	r3, #0
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	4910      	ldr	r1, [pc, #64]	; (80026e0 <main+0x60>)
 80026a0:	4810      	ldr	r0, [pc, #64]	; (80026e4 <main+0x64>)
 80026a2:	f7fe ffd0 	bl	8001646 <xTaskCreate>
	xTaskCreate(vTaskAT, "AT_Waiting", 128, NULL, 1, NULL );
 80026a6:	2300      	movs	r3, #0
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	490d      	ldr	r1, [pc, #52]	; (80026e8 <main+0x68>)
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <main+0x6c>)
 80026b6:	f7fe ffc6 	bl	8001646 <xTaskCreate>
	xCmdQueue = xQueueCreate(CMD_QUEUE_SIZE, sizeof (int));
 80026ba:	2200      	movs	r2, #0
 80026bc:	2104      	movs	r1, #4
 80026be:	200b      	movs	r0, #11
 80026c0:	f7fe fb62 	bl	8000d88 <xQueueGenericCreate>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <main+0x70>)
 80026c8:	6013      	str	r3, [r2, #0]
	xLedQueue = xQueueCreate(LED_QUEUE_SIZE, sizeof (int));
 80026ca:	2200      	movs	r2, #0
 80026cc:	2104      	movs	r1, #4
 80026ce:	200a      	movs	r0, #10
 80026d0:	f7fe fb5a 	bl	8000d88 <xQueueGenericCreate>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <main+0x74>)
 80026d8:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 80026da:	f7ff f935 	bl	8001948 <vTaskStartScheduler>

	while(1)
 80026de:	e7fe      	b.n	80026de <main+0x5e>
 80026e0:	080034cc 	.word	0x080034cc
 80026e4:	080026f9 	.word	0x080026f9
 80026e8:	080034d0 	.word	0x080034d0
 80026ec:	08002739 	.word	0x08002739
 80026f0:	20004068 	.word	0x20004068
 80026f4:	2000406c 	.word	0x2000406c

080026f8 <vTaskLed>:
	}
}


void vTaskLed (void *argument)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	uint8_t brightness_res;

	while(1)
	{
		if(uxQueueMessagesWaiting(xLedQueue) != 0)   // Check queue
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <vTaskLed+0x3c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fe13 	bl	8001330 <uxQueueMessagesWaiting>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f7      	beq.n	8002700 <vTaskLed+0x8>
		{
		if(xQueueReceive(xLedQueue, &brightness_res, portMAX_DELAY) == pdTRUE){
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <vTaskLed+0x3c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f107 010f 	add.w	r1, r7, #15
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fd27 	bl	8001170 <xQueueReceive>
 8002722:	4603      	mov	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	d1eb      	bne.n	8002700 <vTaskLed+0x8>
			TIM2->CCR1 = brightness_res;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800272e:	635a      	str	r2, [r3, #52]	; 0x34
			asm("NOP");
 8002730:	bf00      	nop
		if(uxQueueMessagesWaiting(xLedQueue) != 0)   // Check queue
 8002732:	e7e5      	b.n	8002700 <vTaskLed+0x8>
 8002734:	2000406c 	.word	0x2000406c

08002738 <vTaskAT>:
}
}


void vTaskAT (void *argument)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	char Response_Buffer[CMD_QUEUE_SIZE];
	static char linearBuffer[CMD_QUEUE_SIZE]; 
	int16_t brightness;
	char data;
	uint32_t linearIndex = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		if(uxQueueMessagesWaiting(xCmdQueue) != 0)  
 8002744:	4b34      	ldr	r3, [pc, #208]	; (8002818 <vTaskAT+0xe0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fdf1 	bl	8001330 <uxQueueMessagesWaiting>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05d      	beq.n	8002810 <vTaskAT+0xd8>
		{
		if(xQueueReceive(xCmdQueue, &data, portMAX_DELAY) == pdTRUE){
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <vTaskAT+0xe0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f107 010d 	add.w	r1, r7, #13
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fd05 	bl	8001170 <xQueueReceive>
 8002766:	4603      	mov	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d150      	bne.n	800280e <vTaskAT+0xd6>
			linearBuffer[linearIndex] = data;
 800276c:	7b79      	ldrb	r1, [r7, #13]
 800276e:	4a2b      	ldr	r2, [pc, #172]	; (800281c <vTaskAT+0xe4>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	460a      	mov	r2, r1
 8002776:	701a      	strb	r2, [r3, #0]
			linearIndex = (linearIndex + 1) % CMD_QUEUE_SIZE;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	1c59      	adds	r1, r3, #1
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <vTaskAT+0xe8>)
 800277e:	fba3 2301 	umull	r2, r3, r3, r1
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	1acb      	subs	r3, r1, r3
 8002790:	61fb      	str	r3, [r7, #28]
			if(data == '\n')
 8002792:	7b7b      	ldrb	r3, [r7, #13]
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d13a      	bne.n	800280e <vTaskAT+0xd6>
			{
				if((strncmp(linearBuffer,CMD_PREFIX_AT,strlen(CMD_PREFIX_AT)) && strncmp(linearBuffer,CMD_PREFIX_at,strlen(CMD_PREFIX_at))) == 0 )
 8002798:	2203      	movs	r2, #3
 800279a:	4922      	ldr	r1, [pc, #136]	; (8002824 <vTaskAT+0xec>)
 800279c:	481f      	ldr	r0, [pc, #124]	; (800281c <vTaskAT+0xe4>)
 800279e:	f000 f999 	bl	8002ad4 <strncmp>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <vTaskAT+0x84>
 80027a8:	2203      	movs	r2, #3
 80027aa:	491f      	ldr	r1, [pc, #124]	; (8002828 <vTaskAT+0xf0>)
 80027ac:	481b      	ldr	r0, [pc, #108]	; (800281c <vTaskAT+0xe4>)
 80027ae:	f000 f991 	bl	8002ad4 <strncmp>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <vTaskAT+0x84>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <vTaskAT+0x86>
 80027bc:	2300      	movs	r3, #0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10d      	bne.n	80027de <vTaskAT+0xa6>
				{
					sprintf(Response_Buffer,"%s%d", CMD_RESPONSE,TIM2->CCR1);
 80027c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	f107 0010 	add.w	r0, r7, #16
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <vTaskAT+0xf4>)
 80027ce:	4918      	ldr	r1, [pc, #96]	; (8002830 <vTaskAT+0xf8>)
 80027d0:	f000 f958 	bl	8002a84 <siprintf>
					USART_Send_String(Response_Buffer);
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff35 	bl	8002648 <USART_Send_String>
				}
				brightness = CMD_Parse_Brightness(linearBuffer);
 80027de:	480f      	ldr	r0, [pc, #60]	; (800281c <vTaskAT+0xe4>)
 80027e0:	f7ff fdce 	bl	8002380 <CMD_Parse_Brightness>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	81fb      	strh	r3, [r7, #14]
				if (brightness<=255 && brightness>=0){
 80027ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ee:	2bff      	cmp	r3, #255	; 0xff
 80027f0:	dc0b      	bgt.n	800280a <vTaskAT+0xd2>
 80027f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db07      	blt.n	800280a <vTaskAT+0xd2>
				xQueueSend(xLedQueue,&brightness,0);
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <vTaskAT+0xfc>)
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	f107 010e 	add.w	r1, r7, #14
 8002802:	2300      	movs	r3, #0
 8002804:	2200      	movs	r2, #0
 8002806:	f7fe fb19 	bl	8000e3c <xQueueGenericSend>
				}


				linearIndex = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]

			}
		
		}
		asm("NOP");
 800280e:	bf00      	nop
	}

		vTaskDelay(10);
 8002810:	200a      	movs	r0, #10
 8002812:	f7ff f865 	bl	80018e0 <vTaskDelay>
		if(uxQueueMessagesWaiting(xCmdQueue) != 0)  
 8002816:	e795      	b.n	8002744 <vTaskAT+0xc>
 8002818:	20004068 	.word	0x20004068
 800281c:	20004070 	.word	0x20004070
 8002820:	ba2e8ba3 	.word	0xba2e8ba3
 8002824:	080034dc 	.word	0x080034dc
 8002828:	080034e0 	.word	0x080034e0
 800282c:	080034e4 	.word	0x080034e4
 8002830:	080034f0 	.word	0x080034f0
 8002834:	2000406c 	.word	0x2000406c

08002838 <USART1_IRQHandler>:
 }
}

	void USART1_IRQHandler(void)
	{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]



			if((USART1->SR & USART_SR_RXNE) && (USART1->CR1 & USART_CR1_RXNEIE))
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <USART1_IRQHandler+0x5c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01d      	beq.n	800288a <USART1_IRQHandler+0x52>
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <USART1_IRQHandler+0x5c>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d017      	beq.n	800288a <USART1_IRQHandler+0x52>
			{
				USART1->SR &= ~USART_SR_RXNE;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <USART1_IRQHandler+0x5c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <USART1_IRQHandler+0x5c>)
 8002860:	f023 0320 	bic.w	r3, r3, #32
 8002864:	6013      	str	r3, [r2, #0]

				xQueueSendFromISR(xCmdQueue,&USART1->DR,&xHigherPriorityTaskWoken);
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <USART1_IRQHandler+0x60>)
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	1d3a      	adds	r2, r7, #4
 800286c:	2300      	movs	r3, #0
 800286e:	490b      	ldr	r1, [pc, #44]	; (800289c <USART1_IRQHandler+0x64>)
 8002870:	f7fe fbe2 	bl	8001038 <xQueueGenericSendFromISR>


				portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <USART1_IRQHandler+0x52>
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <USART1_IRQHandler+0x68>)
 800287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	f3bf 8f6f 	isb	sy


			}

	}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40011000 	.word	0x40011000
 8002898:	20004068 	.word	0x20004068
 800289c:	40011004 	.word	0x40011004
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f000 f966 	bl	8002ba4 <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20018000 	.word	0x20018000
 8002904:	00000400 	.word	0x00000400
 8002908:	2000407c 	.word	0x2000407c
 800290c:	200041c8 	.word	0x200041c8

08002910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002910:	480d      	ldr	r0, [pc, #52]	; (8002948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002912:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002914:	f7fd fcb4 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002918:	480c      	ldr	r0, [pc, #48]	; (800294c <LoopForever+0x6>)
  ldr r1, =_edata
 800291a:	490d      	ldr	r1, [pc, #52]	; (8002950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <LoopForever+0xe>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002930:	4c0a      	ldr	r4, [pc, #40]	; (800295c <LoopForever+0x16>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800293e:	f000 f937 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002942:	f7ff fe9d 	bl	8002680 <main>

08002946 <LoopForever>:

LoopForever:
  b LoopForever
 8002946:	e7fe      	b.n	8002946 <LoopForever>
  ldr   r0, =_estack
 8002948:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8002954:	08003634 	.word	0x08003634
  ldr r2, =_sbss
 8002958:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 800295c:	200041c8 	.word	0x200041c8

08002960 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC_IRQHandler>

08002962 <atoi>:
 8002962:	220a      	movs	r2, #10
 8002964:	2100      	movs	r1, #0
 8002966:	f000 b883 	b.w	8002a70 <strtol>
	...

0800296c <_strtol_l.constprop.0>:
 800296c:	2b01      	cmp	r3, #1
 800296e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002972:	d001      	beq.n	8002978 <_strtol_l.constprop.0+0xc>
 8002974:	2b24      	cmp	r3, #36	; 0x24
 8002976:	d906      	bls.n	8002986 <_strtol_l.constprop.0+0x1a>
 8002978:	f000 f914 	bl	8002ba4 <__errno>
 800297c:	2316      	movs	r3, #22
 800297e:	6003      	str	r3, [r0, #0]
 8002980:	2000      	movs	r0, #0
 8002982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002986:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002a6c <_strtol_l.constprop.0+0x100>
 800298a:	460d      	mov	r5, r1
 800298c:	462e      	mov	r6, r5
 800298e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002992:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8002996:	f017 0708 	ands.w	r7, r7, #8
 800299a:	d1f7      	bne.n	800298c <_strtol_l.constprop.0+0x20>
 800299c:	2c2d      	cmp	r4, #45	; 0x2d
 800299e:	d132      	bne.n	8002a06 <_strtol_l.constprop.0+0x9a>
 80029a0:	782c      	ldrb	r4, [r5, #0]
 80029a2:	2701      	movs	r7, #1
 80029a4:	1cb5      	adds	r5, r6, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d05b      	beq.n	8002a62 <_strtol_l.constprop.0+0xf6>
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d109      	bne.n	80029c2 <_strtol_l.constprop.0+0x56>
 80029ae:	2c30      	cmp	r4, #48	; 0x30
 80029b0:	d107      	bne.n	80029c2 <_strtol_l.constprop.0+0x56>
 80029b2:	782c      	ldrb	r4, [r5, #0]
 80029b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80029b8:	2c58      	cmp	r4, #88	; 0x58
 80029ba:	d14d      	bne.n	8002a58 <_strtol_l.constprop.0+0xec>
 80029bc:	786c      	ldrb	r4, [r5, #1]
 80029be:	2310      	movs	r3, #16
 80029c0:	3502      	adds	r5, #2
 80029c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80029c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80029ca:	f04f 0e00 	mov.w	lr, #0
 80029ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80029d2:	4676      	mov	r6, lr
 80029d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80029d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80029dc:	f1bc 0f09 	cmp.w	ip, #9
 80029e0:	d816      	bhi.n	8002a10 <_strtol_l.constprop.0+0xa4>
 80029e2:	4664      	mov	r4, ip
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	dd24      	ble.n	8002a32 <_strtol_l.constprop.0+0xc6>
 80029e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80029ec:	d008      	beq.n	8002a00 <_strtol_l.constprop.0+0x94>
 80029ee:	45b1      	cmp	r9, r6
 80029f0:	d31c      	bcc.n	8002a2c <_strtol_l.constprop.0+0xc0>
 80029f2:	d101      	bne.n	80029f8 <_strtol_l.constprop.0+0x8c>
 80029f4:	45a2      	cmp	sl, r4
 80029f6:	db19      	blt.n	8002a2c <_strtol_l.constprop.0+0xc0>
 80029f8:	fb06 4603 	mla	r6, r6, r3, r4
 80029fc:	f04f 0e01 	mov.w	lr, #1
 8002a00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a04:	e7e8      	b.n	80029d8 <_strtol_l.constprop.0+0x6c>
 8002a06:	2c2b      	cmp	r4, #43	; 0x2b
 8002a08:	bf04      	itt	eq
 8002a0a:	782c      	ldrbeq	r4, [r5, #0]
 8002a0c:	1cb5      	addeq	r5, r6, #2
 8002a0e:	e7ca      	b.n	80029a6 <_strtol_l.constprop.0+0x3a>
 8002a10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002a14:	f1bc 0f19 	cmp.w	ip, #25
 8002a18:	d801      	bhi.n	8002a1e <_strtol_l.constprop.0+0xb2>
 8002a1a:	3c37      	subs	r4, #55	; 0x37
 8002a1c:	e7e2      	b.n	80029e4 <_strtol_l.constprop.0+0x78>
 8002a1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002a22:	f1bc 0f19 	cmp.w	ip, #25
 8002a26:	d804      	bhi.n	8002a32 <_strtol_l.constprop.0+0xc6>
 8002a28:	3c57      	subs	r4, #87	; 0x57
 8002a2a:	e7db      	b.n	80029e4 <_strtol_l.constprop.0+0x78>
 8002a2c:	f04f 3eff 	mov.w	lr, #4294967295
 8002a30:	e7e6      	b.n	8002a00 <_strtol_l.constprop.0+0x94>
 8002a32:	f1be 3fff 	cmp.w	lr, #4294967295
 8002a36:	d105      	bne.n	8002a44 <_strtol_l.constprop.0+0xd8>
 8002a38:	2322      	movs	r3, #34	; 0x22
 8002a3a:	6003      	str	r3, [r0, #0]
 8002a3c:	4646      	mov	r6, r8
 8002a3e:	b942      	cbnz	r2, 8002a52 <_strtol_l.constprop.0+0xe6>
 8002a40:	4630      	mov	r0, r6
 8002a42:	e79e      	b.n	8002982 <_strtol_l.constprop.0+0x16>
 8002a44:	b107      	cbz	r7, 8002a48 <_strtol_l.constprop.0+0xdc>
 8002a46:	4276      	negs	r6, r6
 8002a48:	2a00      	cmp	r2, #0
 8002a4a:	d0f9      	beq.n	8002a40 <_strtol_l.constprop.0+0xd4>
 8002a4c:	f1be 0f00 	cmp.w	lr, #0
 8002a50:	d000      	beq.n	8002a54 <_strtol_l.constprop.0+0xe8>
 8002a52:	1e69      	subs	r1, r5, #1
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	e7f3      	b.n	8002a40 <_strtol_l.constprop.0+0xd4>
 8002a58:	2430      	movs	r4, #48	; 0x30
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1b1      	bne.n	80029c2 <_strtol_l.constprop.0+0x56>
 8002a5e:	2308      	movs	r3, #8
 8002a60:	e7af      	b.n	80029c2 <_strtol_l.constprop.0+0x56>
 8002a62:	2c30      	cmp	r4, #48	; 0x30
 8002a64:	d0a5      	beq.n	80029b2 <_strtol_l.constprop.0+0x46>
 8002a66:	230a      	movs	r3, #10
 8002a68:	e7ab      	b.n	80029c2 <_strtol_l.constprop.0+0x56>
 8002a6a:	bf00      	nop
 8002a6c:	080034f6 	.word	0x080034f6

08002a70 <strtol>:
 8002a70:	4613      	mov	r3, r2
 8002a72:	460a      	mov	r2, r1
 8002a74:	4601      	mov	r1, r0
 8002a76:	4802      	ldr	r0, [pc, #8]	; (8002a80 <strtol+0x10>)
 8002a78:	6800      	ldr	r0, [r0, #0]
 8002a7a:	f7ff bf77 	b.w	800296c <_strtol_l.constprop.0>
 8002a7e:	bf00      	nop
 8002a80:	20000054 	.word	0x20000054

08002a84 <siprintf>:
 8002a84:	b40e      	push	{r1, r2, r3}
 8002a86:	b500      	push	{lr}
 8002a88:	b09c      	sub	sp, #112	; 0x70
 8002a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8002a8c:	9002      	str	r0, [sp, #8]
 8002a8e:	9006      	str	r0, [sp, #24]
 8002a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a94:	4809      	ldr	r0, [pc, #36]	; (8002abc <siprintf+0x38>)
 8002a96:	9107      	str	r1, [sp, #28]
 8002a98:	9104      	str	r1, [sp, #16]
 8002a9a:	4909      	ldr	r1, [pc, #36]	; (8002ac0 <siprintf+0x3c>)
 8002a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aa0:	9105      	str	r1, [sp, #20]
 8002aa2:	6800      	ldr	r0, [r0, #0]
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	a902      	add	r1, sp, #8
 8002aa8:	f000 fa08 	bl	8002ebc <_svfiprintf_r>
 8002aac:	9b02      	ldr	r3, [sp, #8]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	b01c      	add	sp, #112	; 0x70
 8002ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ab8:	b003      	add	sp, #12
 8002aba:	4770      	bx	lr
 8002abc:	20000054 	.word	0x20000054
 8002ac0:	ffff0208 	.word	0xffff0208

08002ac4 <memset>:
 8002ac4:	4402      	add	r2, r0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <strncmp>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	b16a      	cbz	r2, 8002af4 <strncmp+0x20>
 8002ad8:	3901      	subs	r1, #1
 8002ada:	1884      	adds	r4, r0, r2
 8002adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ae0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d103      	bne.n	8002af0 <strncmp+0x1c>
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	d001      	beq.n	8002af0 <strncmp+0x1c>
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d1f5      	bne.n	8002adc <strncmp+0x8>
 8002af0:	1ad0      	subs	r0, r2, r3
 8002af2:	bd10      	pop	{r4, pc}
 8002af4:	4610      	mov	r0, r2
 8002af6:	e7fc      	b.n	8002af2 <strncmp+0x1e>

08002af8 <_reclaim_reent>:
 8002af8:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <_reclaim_reent+0xa8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4283      	cmp	r3, r0
 8002afe:	b570      	push	{r4, r5, r6, lr}
 8002b00:	4604      	mov	r4, r0
 8002b02:	d04b      	beq.n	8002b9c <_reclaim_reent+0xa4>
 8002b04:	69c3      	ldr	r3, [r0, #28]
 8002b06:	b143      	cbz	r3, 8002b1a <_reclaim_reent+0x22>
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d144      	bne.n	8002b98 <_reclaim_reent+0xa0>
 8002b0e:	69e3      	ldr	r3, [r4, #28]
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	b111      	cbz	r1, 8002b1a <_reclaim_reent+0x22>
 8002b14:	4620      	mov	r0, r4
 8002b16:	f000 f87f 	bl	8002c18 <_free_r>
 8002b1a:	6961      	ldr	r1, [r4, #20]
 8002b1c:	b111      	cbz	r1, 8002b24 <_reclaim_reent+0x2c>
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f000 f87a 	bl	8002c18 <_free_r>
 8002b24:	69e1      	ldr	r1, [r4, #28]
 8002b26:	b111      	cbz	r1, 8002b2e <_reclaim_reent+0x36>
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 f875 	bl	8002c18 <_free_r>
 8002b2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002b30:	b111      	cbz	r1, 8002b38 <_reclaim_reent+0x40>
 8002b32:	4620      	mov	r0, r4
 8002b34:	f000 f870 	bl	8002c18 <_free_r>
 8002b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b3a:	b111      	cbz	r1, 8002b42 <_reclaim_reent+0x4a>
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f000 f86b 	bl	8002c18 <_free_r>
 8002b42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002b44:	b111      	cbz	r1, 8002b4c <_reclaim_reent+0x54>
 8002b46:	4620      	mov	r0, r4
 8002b48:	f000 f866 	bl	8002c18 <_free_r>
 8002b4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002b4e:	b111      	cbz	r1, 8002b56 <_reclaim_reent+0x5e>
 8002b50:	4620      	mov	r0, r4
 8002b52:	f000 f861 	bl	8002c18 <_free_r>
 8002b56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002b58:	b111      	cbz	r1, 8002b60 <_reclaim_reent+0x68>
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f000 f85c 	bl	8002c18 <_free_r>
 8002b60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b62:	b111      	cbz	r1, 8002b6a <_reclaim_reent+0x72>
 8002b64:	4620      	mov	r0, r4
 8002b66:	f000 f857 	bl	8002c18 <_free_r>
 8002b6a:	6a23      	ldr	r3, [r4, #32]
 8002b6c:	b1b3      	cbz	r3, 8002b9c <_reclaim_reent+0xa4>
 8002b6e:	4620      	mov	r0, r4
 8002b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002b74:	4718      	bx	r3
 8002b76:	5949      	ldr	r1, [r1, r5]
 8002b78:	b941      	cbnz	r1, 8002b8c <_reclaim_reent+0x94>
 8002b7a:	3504      	adds	r5, #4
 8002b7c:	69e3      	ldr	r3, [r4, #28]
 8002b7e:	2d80      	cmp	r5, #128	; 0x80
 8002b80:	68d9      	ldr	r1, [r3, #12]
 8002b82:	d1f8      	bne.n	8002b76 <_reclaim_reent+0x7e>
 8002b84:	4620      	mov	r0, r4
 8002b86:	f000 f847 	bl	8002c18 <_free_r>
 8002b8a:	e7c0      	b.n	8002b0e <_reclaim_reent+0x16>
 8002b8c:	680e      	ldr	r6, [r1, #0]
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f842 	bl	8002c18 <_free_r>
 8002b94:	4631      	mov	r1, r6
 8002b96:	e7ef      	b.n	8002b78 <_reclaim_reent+0x80>
 8002b98:	2500      	movs	r5, #0
 8002b9a:	e7ef      	b.n	8002b7c <_reclaim_reent+0x84>
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000054 	.word	0x20000054

08002ba4 <__errno>:
 8002ba4:	4b01      	ldr	r3, [pc, #4]	; (8002bac <__errno+0x8>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000054 	.word	0x20000054

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4d0d      	ldr	r5, [pc, #52]	; (8002be8 <__libc_init_array+0x38>)
 8002bb4:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	2600      	movs	r6, #0
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	4d0b      	ldr	r5, [pc, #44]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc2:	4c0c      	ldr	r4, [pc, #48]	; (8002bf4 <__libc_init_array+0x44>)
 8002bc4:	f000 fc6a 	bl	800349c <_init>
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	2600      	movs	r6, #0
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	0800362c 	.word	0x0800362c
 8002bec:	0800362c 	.word	0x0800362c
 8002bf0:	0800362c 	.word	0x0800362c
 8002bf4:	08003630 	.word	0x08003630

08002bf8 <__retarget_lock_acquire_recursive>:
 8002bf8:	4770      	bx	lr

08002bfa <__retarget_lock_release_recursive>:
 8002bfa:	4770      	bx	lr

08002bfc <memcpy>:
 8002bfc:	440a      	add	r2, r1
 8002bfe:	4291      	cmp	r1, r2
 8002c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c04:	d100      	bne.n	8002c08 <memcpy+0xc>
 8002c06:	4770      	bx	lr
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c12:	4291      	cmp	r1, r2
 8002c14:	d1f9      	bne.n	8002c0a <memcpy+0xe>
 8002c16:	bd10      	pop	{r4, pc}

08002c18 <_free_r>:
 8002c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c1a:	2900      	cmp	r1, #0
 8002c1c:	d044      	beq.n	8002ca8 <_free_r+0x90>
 8002c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c22:	9001      	str	r0, [sp, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f1a1 0404 	sub.w	r4, r1, #4
 8002c2a:	bfb8      	it	lt
 8002c2c:	18e4      	addlt	r4, r4, r3
 8002c2e:	f000 f8df 	bl	8002df0 <__malloc_lock>
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <_free_r+0x94>)
 8002c34:	9801      	ldr	r0, [sp, #4]
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	b933      	cbnz	r3, 8002c48 <_free_r+0x30>
 8002c3a:	6063      	str	r3, [r4, #4]
 8002c3c:	6014      	str	r4, [r2, #0]
 8002c3e:	b003      	add	sp, #12
 8002c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c44:	f000 b8da 	b.w	8002dfc <__malloc_unlock>
 8002c48:	42a3      	cmp	r3, r4
 8002c4a:	d908      	bls.n	8002c5e <_free_r+0x46>
 8002c4c:	6825      	ldr	r5, [r4, #0]
 8002c4e:	1961      	adds	r1, r4, r5
 8002c50:	428b      	cmp	r3, r1
 8002c52:	bf01      	itttt	eq
 8002c54:	6819      	ldreq	r1, [r3, #0]
 8002c56:	685b      	ldreq	r3, [r3, #4]
 8002c58:	1949      	addeq	r1, r1, r5
 8002c5a:	6021      	streq	r1, [r4, #0]
 8002c5c:	e7ed      	b.n	8002c3a <_free_r+0x22>
 8002c5e:	461a      	mov	r2, r3
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	b10b      	cbz	r3, 8002c68 <_free_r+0x50>
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	d9fa      	bls.n	8002c5e <_free_r+0x46>
 8002c68:	6811      	ldr	r1, [r2, #0]
 8002c6a:	1855      	adds	r5, r2, r1
 8002c6c:	42a5      	cmp	r5, r4
 8002c6e:	d10b      	bne.n	8002c88 <_free_r+0x70>
 8002c70:	6824      	ldr	r4, [r4, #0]
 8002c72:	4421      	add	r1, r4
 8002c74:	1854      	adds	r4, r2, r1
 8002c76:	42a3      	cmp	r3, r4
 8002c78:	6011      	str	r1, [r2, #0]
 8002c7a:	d1e0      	bne.n	8002c3e <_free_r+0x26>
 8002c7c:	681c      	ldr	r4, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	6053      	str	r3, [r2, #4]
 8002c82:	440c      	add	r4, r1
 8002c84:	6014      	str	r4, [r2, #0]
 8002c86:	e7da      	b.n	8002c3e <_free_r+0x26>
 8002c88:	d902      	bls.n	8002c90 <_free_r+0x78>
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	6003      	str	r3, [r0, #0]
 8002c8e:	e7d6      	b.n	8002c3e <_free_r+0x26>
 8002c90:	6825      	ldr	r5, [r4, #0]
 8002c92:	1961      	adds	r1, r4, r5
 8002c94:	428b      	cmp	r3, r1
 8002c96:	bf04      	itt	eq
 8002c98:	6819      	ldreq	r1, [r3, #0]
 8002c9a:	685b      	ldreq	r3, [r3, #4]
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	bf04      	itt	eq
 8002ca0:	1949      	addeq	r1, r1, r5
 8002ca2:	6021      	streq	r1, [r4, #0]
 8002ca4:	6054      	str	r4, [r2, #4]
 8002ca6:	e7ca      	b.n	8002c3e <_free_r+0x26>
 8002ca8:	b003      	add	sp, #12
 8002caa:	bd30      	pop	{r4, r5, pc}
 8002cac:	200041c0 	.word	0x200041c0

08002cb0 <sbrk_aligned>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	4e0e      	ldr	r6, [pc, #56]	; (8002cec <sbrk_aligned+0x3c>)
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	6831      	ldr	r1, [r6, #0]
 8002cb8:	4605      	mov	r5, r0
 8002cba:	b911      	cbnz	r1, 8002cc2 <sbrk_aligned+0x12>
 8002cbc:	f000 fba6 	bl	800340c <_sbrk_r>
 8002cc0:	6030      	str	r0, [r6, #0]
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f000 fba1 	bl	800340c <_sbrk_r>
 8002cca:	1c43      	adds	r3, r0, #1
 8002ccc:	d00a      	beq.n	8002ce4 <sbrk_aligned+0x34>
 8002cce:	1cc4      	adds	r4, r0, #3
 8002cd0:	f024 0403 	bic.w	r4, r4, #3
 8002cd4:	42a0      	cmp	r0, r4
 8002cd6:	d007      	beq.n	8002ce8 <sbrk_aligned+0x38>
 8002cd8:	1a21      	subs	r1, r4, r0
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f000 fb96 	bl	800340c <_sbrk_r>
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d101      	bne.n	8002ce8 <sbrk_aligned+0x38>
 8002ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ce8:	4620      	mov	r0, r4
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	200041c4 	.word	0x200041c4

08002cf0 <_malloc_r>:
 8002cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf4:	1ccd      	adds	r5, r1, #3
 8002cf6:	f025 0503 	bic.w	r5, r5, #3
 8002cfa:	3508      	adds	r5, #8
 8002cfc:	2d0c      	cmp	r5, #12
 8002cfe:	bf38      	it	cc
 8002d00:	250c      	movcc	r5, #12
 8002d02:	2d00      	cmp	r5, #0
 8002d04:	4607      	mov	r7, r0
 8002d06:	db01      	blt.n	8002d0c <_malloc_r+0x1c>
 8002d08:	42a9      	cmp	r1, r5
 8002d0a:	d905      	bls.n	8002d18 <_malloc_r+0x28>
 8002d0c:	230c      	movs	r3, #12
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	2600      	movs	r6, #0
 8002d12:	4630      	mov	r0, r6
 8002d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002dec <_malloc_r+0xfc>
 8002d1c:	f000 f868 	bl	8002df0 <__malloc_lock>
 8002d20:	f8d8 3000 	ldr.w	r3, [r8]
 8002d24:	461c      	mov	r4, r3
 8002d26:	bb5c      	cbnz	r4, 8002d80 <_malloc_r+0x90>
 8002d28:	4629      	mov	r1, r5
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	f7ff ffc0 	bl	8002cb0 <sbrk_aligned>
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	4604      	mov	r4, r0
 8002d34:	d155      	bne.n	8002de2 <_malloc_r+0xf2>
 8002d36:	f8d8 4000 	ldr.w	r4, [r8]
 8002d3a:	4626      	mov	r6, r4
 8002d3c:	2e00      	cmp	r6, #0
 8002d3e:	d145      	bne.n	8002dcc <_malloc_r+0xdc>
 8002d40:	2c00      	cmp	r4, #0
 8002d42:	d048      	beq.n	8002dd6 <_malloc_r+0xe6>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	4631      	mov	r1, r6
 8002d48:	4638      	mov	r0, r7
 8002d4a:	eb04 0903 	add.w	r9, r4, r3
 8002d4e:	f000 fb5d 	bl	800340c <_sbrk_r>
 8002d52:	4581      	cmp	r9, r0
 8002d54:	d13f      	bne.n	8002dd6 <_malloc_r+0xe6>
 8002d56:	6821      	ldr	r1, [r4, #0]
 8002d58:	1a6d      	subs	r5, r5, r1
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	f7ff ffa7 	bl	8002cb0 <sbrk_aligned>
 8002d62:	3001      	adds	r0, #1
 8002d64:	d037      	beq.n	8002dd6 <_malloc_r+0xe6>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	442b      	add	r3, r5
 8002d6a:	6023      	str	r3, [r4, #0]
 8002d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d038      	beq.n	8002de6 <_malloc_r+0xf6>
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	42a2      	cmp	r2, r4
 8002d78:	d12b      	bne.n	8002dd2 <_malloc_r+0xe2>
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	e00f      	b.n	8002da0 <_malloc_r+0xb0>
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	1b52      	subs	r2, r2, r5
 8002d84:	d41f      	bmi.n	8002dc6 <_malloc_r+0xd6>
 8002d86:	2a0b      	cmp	r2, #11
 8002d88:	d917      	bls.n	8002dba <_malloc_r+0xca>
 8002d8a:	1961      	adds	r1, r4, r5
 8002d8c:	42a3      	cmp	r3, r4
 8002d8e:	6025      	str	r5, [r4, #0]
 8002d90:	bf18      	it	ne
 8002d92:	6059      	strne	r1, [r3, #4]
 8002d94:	6863      	ldr	r3, [r4, #4]
 8002d96:	bf08      	it	eq
 8002d98:	f8c8 1000 	streq.w	r1, [r8]
 8002d9c:	5162      	str	r2, [r4, r5]
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	4638      	mov	r0, r7
 8002da2:	f104 060b 	add.w	r6, r4, #11
 8002da6:	f000 f829 	bl	8002dfc <__malloc_unlock>
 8002daa:	f026 0607 	bic.w	r6, r6, #7
 8002dae:	1d23      	adds	r3, r4, #4
 8002db0:	1af2      	subs	r2, r6, r3
 8002db2:	d0ae      	beq.n	8002d12 <_malloc_r+0x22>
 8002db4:	1b9b      	subs	r3, r3, r6
 8002db6:	50a3      	str	r3, [r4, r2]
 8002db8:	e7ab      	b.n	8002d12 <_malloc_r+0x22>
 8002dba:	42a3      	cmp	r3, r4
 8002dbc:	6862      	ldr	r2, [r4, #4]
 8002dbe:	d1dd      	bne.n	8002d7c <_malloc_r+0x8c>
 8002dc0:	f8c8 2000 	str.w	r2, [r8]
 8002dc4:	e7ec      	b.n	8002da0 <_malloc_r+0xb0>
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	6864      	ldr	r4, [r4, #4]
 8002dca:	e7ac      	b.n	8002d26 <_malloc_r+0x36>
 8002dcc:	4634      	mov	r4, r6
 8002dce:	6876      	ldr	r6, [r6, #4]
 8002dd0:	e7b4      	b.n	8002d3c <_malloc_r+0x4c>
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	e7cc      	b.n	8002d70 <_malloc_r+0x80>
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	4638      	mov	r0, r7
 8002ddc:	f000 f80e 	bl	8002dfc <__malloc_unlock>
 8002de0:	e797      	b.n	8002d12 <_malloc_r+0x22>
 8002de2:	6025      	str	r5, [r4, #0]
 8002de4:	e7dc      	b.n	8002da0 <_malloc_r+0xb0>
 8002de6:	605b      	str	r3, [r3, #4]
 8002de8:	deff      	udf	#255	; 0xff
 8002dea:	bf00      	nop
 8002dec:	200041c0 	.word	0x200041c0

08002df0 <__malloc_lock>:
 8002df0:	4801      	ldr	r0, [pc, #4]	; (8002df8 <__malloc_lock+0x8>)
 8002df2:	f7ff bf01 	b.w	8002bf8 <__retarget_lock_acquire_recursive>
 8002df6:	bf00      	nop
 8002df8:	200041bc 	.word	0x200041bc

08002dfc <__malloc_unlock>:
 8002dfc:	4801      	ldr	r0, [pc, #4]	; (8002e04 <__malloc_unlock+0x8>)
 8002dfe:	f7ff befc 	b.w	8002bfa <__retarget_lock_release_recursive>
 8002e02:	bf00      	nop
 8002e04:	200041bc 	.word	0x200041bc

08002e08 <__ssputs_r>:
 8002e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0c:	688e      	ldr	r6, [r1, #8]
 8002e0e:	461f      	mov	r7, r3
 8002e10:	42be      	cmp	r6, r7
 8002e12:	680b      	ldr	r3, [r1, #0]
 8002e14:	4682      	mov	sl, r0
 8002e16:	460c      	mov	r4, r1
 8002e18:	4690      	mov	r8, r2
 8002e1a:	d82c      	bhi.n	8002e76 <__ssputs_r+0x6e>
 8002e1c:	898a      	ldrh	r2, [r1, #12]
 8002e1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e22:	d026      	beq.n	8002e72 <__ssputs_r+0x6a>
 8002e24:	6965      	ldr	r5, [r4, #20]
 8002e26:	6909      	ldr	r1, [r1, #16]
 8002e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e2c:	eba3 0901 	sub.w	r9, r3, r1
 8002e30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e34:	1c7b      	adds	r3, r7, #1
 8002e36:	444b      	add	r3, r9
 8002e38:	106d      	asrs	r5, r5, #1
 8002e3a:	429d      	cmp	r5, r3
 8002e3c:	bf38      	it	cc
 8002e3e:	461d      	movcc	r5, r3
 8002e40:	0553      	lsls	r3, r2, #21
 8002e42:	d527      	bpl.n	8002e94 <__ssputs_r+0x8c>
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7ff ff53 	bl	8002cf0 <_malloc_r>
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	b360      	cbz	r0, 8002ea8 <__ssputs_r+0xa0>
 8002e4e:	6921      	ldr	r1, [r4, #16]
 8002e50:	464a      	mov	r2, r9
 8002e52:	f7ff fed3 	bl	8002bfc <memcpy>
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	6126      	str	r6, [r4, #16]
 8002e64:	6165      	str	r5, [r4, #20]
 8002e66:	444e      	add	r6, r9
 8002e68:	eba5 0509 	sub.w	r5, r5, r9
 8002e6c:	6026      	str	r6, [r4, #0]
 8002e6e:	60a5      	str	r5, [r4, #8]
 8002e70:	463e      	mov	r6, r7
 8002e72:	42be      	cmp	r6, r7
 8002e74:	d900      	bls.n	8002e78 <__ssputs_r+0x70>
 8002e76:	463e      	mov	r6, r7
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	4632      	mov	r2, r6
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	f000 faab 	bl	80033d8 <memmove>
 8002e82:	68a3      	ldr	r3, [r4, #8]
 8002e84:	1b9b      	subs	r3, r3, r6
 8002e86:	60a3      	str	r3, [r4, #8]
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	4433      	add	r3, r6
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	2000      	movs	r0, #0
 8002e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e94:	462a      	mov	r2, r5
 8002e96:	f000 fac9 	bl	800342c <_realloc_r>
 8002e9a:	4606      	mov	r6, r0
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d1e0      	bne.n	8002e62 <__ssputs_r+0x5a>
 8002ea0:	6921      	ldr	r1, [r4, #16]
 8002ea2:	4650      	mov	r0, sl
 8002ea4:	f7ff feb8 	bl	8002c18 <_free_r>
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	f8ca 3000 	str.w	r3, [sl]
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	e7e9      	b.n	8002e90 <__ssputs_r+0x88>

08002ebc <_svfiprintf_r>:
 8002ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec0:	4698      	mov	r8, r3
 8002ec2:	898b      	ldrh	r3, [r1, #12]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	b09d      	sub	sp, #116	; 0x74
 8002ec8:	4607      	mov	r7, r0
 8002eca:	460d      	mov	r5, r1
 8002ecc:	4614      	mov	r4, r2
 8002ece:	d50e      	bpl.n	8002eee <_svfiprintf_r+0x32>
 8002ed0:	690b      	ldr	r3, [r1, #16]
 8002ed2:	b963      	cbnz	r3, 8002eee <_svfiprintf_r+0x32>
 8002ed4:	2140      	movs	r1, #64	; 0x40
 8002ed6:	f7ff ff0b 	bl	8002cf0 <_malloc_r>
 8002eda:	6028      	str	r0, [r5, #0]
 8002edc:	6128      	str	r0, [r5, #16]
 8002ede:	b920      	cbnz	r0, 8002eea <_svfiprintf_r+0x2e>
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	e0d0      	b.n	800308c <_svfiprintf_r+0x1d0>
 8002eea:	2340      	movs	r3, #64	; 0x40
 8002eec:	616b      	str	r3, [r5, #20]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002efc:	2330      	movs	r3, #48	; 0x30
 8002efe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030a4 <_svfiprintf_r+0x1e8>
 8002f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f06:	f04f 0901 	mov.w	r9, #1
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	469a      	mov	sl, r3
 8002f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f12:	b10a      	cbz	r2, 8002f18 <_svfiprintf_r+0x5c>
 8002f14:	2a25      	cmp	r2, #37	; 0x25
 8002f16:	d1f9      	bne.n	8002f0c <_svfiprintf_r+0x50>
 8002f18:	ebba 0b04 	subs.w	fp, sl, r4
 8002f1c:	d00b      	beq.n	8002f36 <_svfiprintf_r+0x7a>
 8002f1e:	465b      	mov	r3, fp
 8002f20:	4622      	mov	r2, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	4638      	mov	r0, r7
 8002f26:	f7ff ff6f 	bl	8002e08 <__ssputs_r>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f000 80a9 	beq.w	8003082 <_svfiprintf_r+0x1c6>
 8002f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f32:	445a      	add	r2, fp
 8002f34:	9209      	str	r2, [sp, #36]	; 0x24
 8002f36:	f89a 3000 	ldrb.w	r3, [sl]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a1 	beq.w	8003082 <_svfiprintf_r+0x1c6>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f04f 32ff 	mov.w	r2, #4294967295
 8002f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f4a:	f10a 0a01 	add.w	sl, sl, #1
 8002f4e:	9304      	str	r3, [sp, #16]
 8002f50:	9307      	str	r3, [sp, #28]
 8002f52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f56:	931a      	str	r3, [sp, #104]	; 0x68
 8002f58:	4654      	mov	r4, sl
 8002f5a:	2205      	movs	r2, #5
 8002f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f60:	4850      	ldr	r0, [pc, #320]	; (80030a4 <_svfiprintf_r+0x1e8>)
 8002f62:	f7fd f93d 	bl	80001e0 <memchr>
 8002f66:	9a04      	ldr	r2, [sp, #16]
 8002f68:	b9d8      	cbnz	r0, 8002fa2 <_svfiprintf_r+0xe6>
 8002f6a:	06d0      	lsls	r0, r2, #27
 8002f6c:	bf44      	itt	mi
 8002f6e:	2320      	movmi	r3, #32
 8002f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f74:	0711      	lsls	r1, r2, #28
 8002f76:	bf44      	itt	mi
 8002f78:	232b      	movmi	r3, #43	; 0x2b
 8002f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f82:	2b2a      	cmp	r3, #42	; 0x2a
 8002f84:	d015      	beq.n	8002fb2 <_svfiprintf_r+0xf6>
 8002f86:	9a07      	ldr	r2, [sp, #28]
 8002f88:	4654      	mov	r4, sl
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f04f 0c0a 	mov.w	ip, #10
 8002f90:	4621      	mov	r1, r4
 8002f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f96:	3b30      	subs	r3, #48	; 0x30
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d94d      	bls.n	8003038 <_svfiprintf_r+0x17c>
 8002f9c:	b1b0      	cbz	r0, 8002fcc <_svfiprintf_r+0x110>
 8002f9e:	9207      	str	r2, [sp, #28]
 8002fa0:	e014      	b.n	8002fcc <_svfiprintf_r+0x110>
 8002fa2:	eba0 0308 	sub.w	r3, r0, r8
 8002fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	9304      	str	r3, [sp, #16]
 8002fae:	46a2      	mov	sl, r4
 8002fb0:	e7d2      	b.n	8002f58 <_svfiprintf_r+0x9c>
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	1d19      	adds	r1, r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	9103      	str	r1, [sp, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfbb      	ittet	lt
 8002fbe:	425b      	neglt	r3, r3
 8002fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fc4:	9307      	strge	r3, [sp, #28]
 8002fc6:	9307      	strlt	r3, [sp, #28]
 8002fc8:	bfb8      	it	lt
 8002fca:	9204      	strlt	r2, [sp, #16]
 8002fcc:	7823      	ldrb	r3, [r4, #0]
 8002fce:	2b2e      	cmp	r3, #46	; 0x2e
 8002fd0:	d10c      	bne.n	8002fec <_svfiprintf_r+0x130>
 8002fd2:	7863      	ldrb	r3, [r4, #1]
 8002fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd6:	d134      	bne.n	8003042 <_svfiprintf_r+0x186>
 8002fd8:	9b03      	ldr	r3, [sp, #12]
 8002fda:	1d1a      	adds	r2, r3, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	9203      	str	r2, [sp, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bfb8      	it	lt
 8002fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fe8:	3402      	adds	r4, #2
 8002fea:	9305      	str	r3, [sp, #20]
 8002fec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80030b4 <_svfiprintf_r+0x1f8>
 8002ff0:	7821      	ldrb	r1, [r4, #0]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	4650      	mov	r0, sl
 8002ff6:	f7fd f8f3 	bl	80001e0 <memchr>
 8002ffa:	b138      	cbz	r0, 800300c <_svfiprintf_r+0x150>
 8002ffc:	9b04      	ldr	r3, [sp, #16]
 8002ffe:	eba0 000a 	sub.w	r0, r0, sl
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	4082      	lsls	r2, r0
 8003006:	4313      	orrs	r3, r2
 8003008:	3401      	adds	r4, #1
 800300a:	9304      	str	r3, [sp, #16]
 800300c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003010:	4825      	ldr	r0, [pc, #148]	; (80030a8 <_svfiprintf_r+0x1ec>)
 8003012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003016:	2206      	movs	r2, #6
 8003018:	f7fd f8e2 	bl	80001e0 <memchr>
 800301c:	2800      	cmp	r0, #0
 800301e:	d038      	beq.n	8003092 <_svfiprintf_r+0x1d6>
 8003020:	4b22      	ldr	r3, [pc, #136]	; (80030ac <_svfiprintf_r+0x1f0>)
 8003022:	bb1b      	cbnz	r3, 800306c <_svfiprintf_r+0x1b0>
 8003024:	9b03      	ldr	r3, [sp, #12]
 8003026:	3307      	adds	r3, #7
 8003028:	f023 0307 	bic.w	r3, r3, #7
 800302c:	3308      	adds	r3, #8
 800302e:	9303      	str	r3, [sp, #12]
 8003030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003032:	4433      	add	r3, r6
 8003034:	9309      	str	r3, [sp, #36]	; 0x24
 8003036:	e768      	b.n	8002f0a <_svfiprintf_r+0x4e>
 8003038:	fb0c 3202 	mla	r2, ip, r2, r3
 800303c:	460c      	mov	r4, r1
 800303e:	2001      	movs	r0, #1
 8003040:	e7a6      	b.n	8002f90 <_svfiprintf_r+0xd4>
 8003042:	2300      	movs	r3, #0
 8003044:	3401      	adds	r4, #1
 8003046:	9305      	str	r3, [sp, #20]
 8003048:	4619      	mov	r1, r3
 800304a:	f04f 0c0a 	mov.w	ip, #10
 800304e:	4620      	mov	r0, r4
 8003050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003054:	3a30      	subs	r2, #48	; 0x30
 8003056:	2a09      	cmp	r2, #9
 8003058:	d903      	bls.n	8003062 <_svfiprintf_r+0x1a6>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0c6      	beq.n	8002fec <_svfiprintf_r+0x130>
 800305e:	9105      	str	r1, [sp, #20]
 8003060:	e7c4      	b.n	8002fec <_svfiprintf_r+0x130>
 8003062:	fb0c 2101 	mla	r1, ip, r1, r2
 8003066:	4604      	mov	r4, r0
 8003068:	2301      	movs	r3, #1
 800306a:	e7f0      	b.n	800304e <_svfiprintf_r+0x192>
 800306c:	ab03      	add	r3, sp, #12
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	462a      	mov	r2, r5
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <_svfiprintf_r+0x1f4>)
 8003074:	a904      	add	r1, sp, #16
 8003076:	4638      	mov	r0, r7
 8003078:	f3af 8000 	nop.w
 800307c:	1c42      	adds	r2, r0, #1
 800307e:	4606      	mov	r6, r0
 8003080:	d1d6      	bne.n	8003030 <_svfiprintf_r+0x174>
 8003082:	89ab      	ldrh	r3, [r5, #12]
 8003084:	065b      	lsls	r3, r3, #25
 8003086:	f53f af2d 	bmi.w	8002ee4 <_svfiprintf_r+0x28>
 800308a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800308c:	b01d      	add	sp, #116	; 0x74
 800308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003092:	ab03      	add	r3, sp, #12
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	462a      	mov	r2, r5
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <_svfiprintf_r+0x1f4>)
 800309a:	a904      	add	r1, sp, #16
 800309c:	4638      	mov	r0, r7
 800309e:	f000 f879 	bl	8003194 <_printf_i>
 80030a2:	e7eb      	b.n	800307c <_svfiprintf_r+0x1c0>
 80030a4:	080035f6 	.word	0x080035f6
 80030a8:	08003600 	.word	0x08003600
 80030ac:	00000000 	.word	0x00000000
 80030b0:	08002e09 	.word	0x08002e09
 80030b4:	080035fc 	.word	0x080035fc

080030b8 <_printf_common>:
 80030b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030bc:	4616      	mov	r6, r2
 80030be:	4699      	mov	r9, r3
 80030c0:	688a      	ldr	r2, [r1, #8]
 80030c2:	690b      	ldr	r3, [r1, #16]
 80030c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bfb8      	it	lt
 80030cc:	4613      	movlt	r3, r2
 80030ce:	6033      	str	r3, [r6, #0]
 80030d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030d4:	4607      	mov	r7, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	b10a      	cbz	r2, 80030de <_printf_common+0x26>
 80030da:	3301      	adds	r3, #1
 80030dc:	6033      	str	r3, [r6, #0]
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	0699      	lsls	r1, r3, #26
 80030e2:	bf42      	ittt	mi
 80030e4:	6833      	ldrmi	r3, [r6, #0]
 80030e6:	3302      	addmi	r3, #2
 80030e8:	6033      	strmi	r3, [r6, #0]
 80030ea:	6825      	ldr	r5, [r4, #0]
 80030ec:	f015 0506 	ands.w	r5, r5, #6
 80030f0:	d106      	bne.n	8003100 <_printf_common+0x48>
 80030f2:	f104 0a19 	add.w	sl, r4, #25
 80030f6:	68e3      	ldr	r3, [r4, #12]
 80030f8:	6832      	ldr	r2, [r6, #0]
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	42ab      	cmp	r3, r5
 80030fe:	dc26      	bgt.n	800314e <_printf_common+0x96>
 8003100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003104:	1e13      	subs	r3, r2, #0
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	bf18      	it	ne
 800310a:	2301      	movne	r3, #1
 800310c:	0692      	lsls	r2, r2, #26
 800310e:	d42b      	bmi.n	8003168 <_printf_common+0xb0>
 8003110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003114:	4649      	mov	r1, r9
 8003116:	4638      	mov	r0, r7
 8003118:	47c0      	blx	r8
 800311a:	3001      	adds	r0, #1
 800311c:	d01e      	beq.n	800315c <_printf_common+0xa4>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	6922      	ldr	r2, [r4, #16]
 8003122:	f003 0306 	and.w	r3, r3, #6
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf02      	ittt	eq
 800312a:	68e5      	ldreq	r5, [r4, #12]
 800312c:	6833      	ldreq	r3, [r6, #0]
 800312e:	1aed      	subeq	r5, r5, r3
 8003130:	68a3      	ldr	r3, [r4, #8]
 8003132:	bf0c      	ite	eq
 8003134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003138:	2500      	movne	r5, #0
 800313a:	4293      	cmp	r3, r2
 800313c:	bfc4      	itt	gt
 800313e:	1a9b      	subgt	r3, r3, r2
 8003140:	18ed      	addgt	r5, r5, r3
 8003142:	2600      	movs	r6, #0
 8003144:	341a      	adds	r4, #26
 8003146:	42b5      	cmp	r5, r6
 8003148:	d11a      	bne.n	8003180 <_printf_common+0xc8>
 800314a:	2000      	movs	r0, #0
 800314c:	e008      	b.n	8003160 <_printf_common+0xa8>
 800314e:	2301      	movs	r3, #1
 8003150:	4652      	mov	r2, sl
 8003152:	4649      	mov	r1, r9
 8003154:	4638      	mov	r0, r7
 8003156:	47c0      	blx	r8
 8003158:	3001      	adds	r0, #1
 800315a:	d103      	bne.n	8003164 <_printf_common+0xac>
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	3501      	adds	r5, #1
 8003166:	e7c6      	b.n	80030f6 <_printf_common+0x3e>
 8003168:	18e1      	adds	r1, r4, r3
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	2030      	movs	r0, #48	; 0x30
 800316e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003172:	4422      	add	r2, r4
 8003174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800317c:	3302      	adds	r3, #2
 800317e:	e7c7      	b.n	8003110 <_printf_common+0x58>
 8003180:	2301      	movs	r3, #1
 8003182:	4622      	mov	r2, r4
 8003184:	4649      	mov	r1, r9
 8003186:	4638      	mov	r0, r7
 8003188:	47c0      	blx	r8
 800318a:	3001      	adds	r0, #1
 800318c:	d0e6      	beq.n	800315c <_printf_common+0xa4>
 800318e:	3601      	adds	r6, #1
 8003190:	e7d9      	b.n	8003146 <_printf_common+0x8e>
	...

08003194 <_printf_i>:
 8003194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003198:	7e0f      	ldrb	r7, [r1, #24]
 800319a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800319c:	2f78      	cmp	r7, #120	; 0x78
 800319e:	4691      	mov	r9, r2
 80031a0:	4680      	mov	r8, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	469a      	mov	sl, r3
 80031a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031aa:	d807      	bhi.n	80031bc <_printf_i+0x28>
 80031ac:	2f62      	cmp	r7, #98	; 0x62
 80031ae:	d80a      	bhi.n	80031c6 <_printf_i+0x32>
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	f000 80d4 	beq.w	800335e <_printf_i+0x1ca>
 80031b6:	2f58      	cmp	r7, #88	; 0x58
 80031b8:	f000 80c0 	beq.w	800333c <_printf_i+0x1a8>
 80031bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031c4:	e03a      	b.n	800323c <_printf_i+0xa8>
 80031c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031ca:	2b15      	cmp	r3, #21
 80031cc:	d8f6      	bhi.n	80031bc <_printf_i+0x28>
 80031ce:	a101      	add	r1, pc, #4	; (adr r1, 80031d4 <_printf_i+0x40>)
 80031d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031d4:	0800322d 	.word	0x0800322d
 80031d8:	08003241 	.word	0x08003241
 80031dc:	080031bd 	.word	0x080031bd
 80031e0:	080031bd 	.word	0x080031bd
 80031e4:	080031bd 	.word	0x080031bd
 80031e8:	080031bd 	.word	0x080031bd
 80031ec:	08003241 	.word	0x08003241
 80031f0:	080031bd 	.word	0x080031bd
 80031f4:	080031bd 	.word	0x080031bd
 80031f8:	080031bd 	.word	0x080031bd
 80031fc:	080031bd 	.word	0x080031bd
 8003200:	08003345 	.word	0x08003345
 8003204:	0800326d 	.word	0x0800326d
 8003208:	080032ff 	.word	0x080032ff
 800320c:	080031bd 	.word	0x080031bd
 8003210:	080031bd 	.word	0x080031bd
 8003214:	08003367 	.word	0x08003367
 8003218:	080031bd 	.word	0x080031bd
 800321c:	0800326d 	.word	0x0800326d
 8003220:	080031bd 	.word	0x080031bd
 8003224:	080031bd 	.word	0x080031bd
 8003228:	08003307 	.word	0x08003307
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	602a      	str	r2, [r5, #0]
 8003234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800323c:	2301      	movs	r3, #1
 800323e:	e09f      	b.n	8003380 <_printf_i+0x1ec>
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	682b      	ldr	r3, [r5, #0]
 8003244:	0607      	lsls	r7, r0, #24
 8003246:	f103 0104 	add.w	r1, r3, #4
 800324a:	6029      	str	r1, [r5, #0]
 800324c:	d501      	bpl.n	8003252 <_printf_i+0xbe>
 800324e:	681e      	ldr	r6, [r3, #0]
 8003250:	e003      	b.n	800325a <_printf_i+0xc6>
 8003252:	0646      	lsls	r6, r0, #25
 8003254:	d5fb      	bpl.n	800324e <_printf_i+0xba>
 8003256:	f9b3 6000 	ldrsh.w	r6, [r3]
 800325a:	2e00      	cmp	r6, #0
 800325c:	da03      	bge.n	8003266 <_printf_i+0xd2>
 800325e:	232d      	movs	r3, #45	; 0x2d
 8003260:	4276      	negs	r6, r6
 8003262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003266:	485a      	ldr	r0, [pc, #360]	; (80033d0 <_printf_i+0x23c>)
 8003268:	230a      	movs	r3, #10
 800326a:	e012      	b.n	8003292 <_printf_i+0xfe>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	1d19      	adds	r1, r3, #4
 8003272:	6029      	str	r1, [r5, #0]
 8003274:	0605      	lsls	r5, r0, #24
 8003276:	d501      	bpl.n	800327c <_printf_i+0xe8>
 8003278:	681e      	ldr	r6, [r3, #0]
 800327a:	e002      	b.n	8003282 <_printf_i+0xee>
 800327c:	0641      	lsls	r1, r0, #25
 800327e:	d5fb      	bpl.n	8003278 <_printf_i+0xe4>
 8003280:	881e      	ldrh	r6, [r3, #0]
 8003282:	4853      	ldr	r0, [pc, #332]	; (80033d0 <_printf_i+0x23c>)
 8003284:	2f6f      	cmp	r7, #111	; 0x6f
 8003286:	bf0c      	ite	eq
 8003288:	2308      	moveq	r3, #8
 800328a:	230a      	movne	r3, #10
 800328c:	2100      	movs	r1, #0
 800328e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003292:	6865      	ldr	r5, [r4, #4]
 8003294:	60a5      	str	r5, [r4, #8]
 8003296:	2d00      	cmp	r5, #0
 8003298:	bfa2      	ittt	ge
 800329a:	6821      	ldrge	r1, [r4, #0]
 800329c:	f021 0104 	bicge.w	r1, r1, #4
 80032a0:	6021      	strge	r1, [r4, #0]
 80032a2:	b90e      	cbnz	r6, 80032a8 <_printf_i+0x114>
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	d04b      	beq.n	8003340 <_printf_i+0x1ac>
 80032a8:	4615      	mov	r5, r2
 80032aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80032ae:	fb03 6711 	mls	r7, r3, r1, r6
 80032b2:	5dc7      	ldrb	r7, [r0, r7]
 80032b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032b8:	4637      	mov	r7, r6
 80032ba:	42bb      	cmp	r3, r7
 80032bc:	460e      	mov	r6, r1
 80032be:	d9f4      	bls.n	80032aa <_printf_i+0x116>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d10b      	bne.n	80032dc <_printf_i+0x148>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	07de      	lsls	r6, r3, #31
 80032c8:	d508      	bpl.n	80032dc <_printf_i+0x148>
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	6861      	ldr	r1, [r4, #4]
 80032ce:	4299      	cmp	r1, r3
 80032d0:	bfde      	ittt	le
 80032d2:	2330      	movle	r3, #48	; 0x30
 80032d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032dc:	1b52      	subs	r2, r2, r5
 80032de:	6122      	str	r2, [r4, #16]
 80032e0:	f8cd a000 	str.w	sl, [sp]
 80032e4:	464b      	mov	r3, r9
 80032e6:	aa03      	add	r2, sp, #12
 80032e8:	4621      	mov	r1, r4
 80032ea:	4640      	mov	r0, r8
 80032ec:	f7ff fee4 	bl	80030b8 <_printf_common>
 80032f0:	3001      	adds	r0, #1
 80032f2:	d14a      	bne.n	800338a <_printf_i+0x1f6>
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	b004      	add	sp, #16
 80032fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	f043 0320 	orr.w	r3, r3, #32
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	4833      	ldr	r0, [pc, #204]	; (80033d4 <_printf_i+0x240>)
 8003308:	2778      	movs	r7, #120	; 0x78
 800330a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	6829      	ldr	r1, [r5, #0]
 8003312:	061f      	lsls	r7, r3, #24
 8003314:	f851 6b04 	ldr.w	r6, [r1], #4
 8003318:	d402      	bmi.n	8003320 <_printf_i+0x18c>
 800331a:	065f      	lsls	r7, r3, #25
 800331c:	bf48      	it	mi
 800331e:	b2b6      	uxthmi	r6, r6
 8003320:	07df      	lsls	r7, r3, #31
 8003322:	bf48      	it	mi
 8003324:	f043 0320 	orrmi.w	r3, r3, #32
 8003328:	6029      	str	r1, [r5, #0]
 800332a:	bf48      	it	mi
 800332c:	6023      	strmi	r3, [r4, #0]
 800332e:	b91e      	cbnz	r6, 8003338 <_printf_i+0x1a4>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	f023 0320 	bic.w	r3, r3, #32
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	2310      	movs	r3, #16
 800333a:	e7a7      	b.n	800328c <_printf_i+0xf8>
 800333c:	4824      	ldr	r0, [pc, #144]	; (80033d0 <_printf_i+0x23c>)
 800333e:	e7e4      	b.n	800330a <_printf_i+0x176>
 8003340:	4615      	mov	r5, r2
 8003342:	e7bd      	b.n	80032c0 <_printf_i+0x12c>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	6826      	ldr	r6, [r4, #0]
 8003348:	6961      	ldr	r1, [r4, #20]
 800334a:	1d18      	adds	r0, r3, #4
 800334c:	6028      	str	r0, [r5, #0]
 800334e:	0635      	lsls	r5, r6, #24
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	d501      	bpl.n	8003358 <_printf_i+0x1c4>
 8003354:	6019      	str	r1, [r3, #0]
 8003356:	e002      	b.n	800335e <_printf_i+0x1ca>
 8003358:	0670      	lsls	r0, r6, #25
 800335a:	d5fb      	bpl.n	8003354 <_printf_i+0x1c0>
 800335c:	8019      	strh	r1, [r3, #0]
 800335e:	2300      	movs	r3, #0
 8003360:	6123      	str	r3, [r4, #16]
 8003362:	4615      	mov	r5, r2
 8003364:	e7bc      	b.n	80032e0 <_printf_i+0x14c>
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	1d1a      	adds	r2, r3, #4
 800336a:	602a      	str	r2, [r5, #0]
 800336c:	681d      	ldr	r5, [r3, #0]
 800336e:	6862      	ldr	r2, [r4, #4]
 8003370:	2100      	movs	r1, #0
 8003372:	4628      	mov	r0, r5
 8003374:	f7fc ff34 	bl	80001e0 <memchr>
 8003378:	b108      	cbz	r0, 800337e <_printf_i+0x1ea>
 800337a:	1b40      	subs	r0, r0, r5
 800337c:	6060      	str	r0, [r4, #4]
 800337e:	6863      	ldr	r3, [r4, #4]
 8003380:	6123      	str	r3, [r4, #16]
 8003382:	2300      	movs	r3, #0
 8003384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003388:	e7aa      	b.n	80032e0 <_printf_i+0x14c>
 800338a:	6923      	ldr	r3, [r4, #16]
 800338c:	462a      	mov	r2, r5
 800338e:	4649      	mov	r1, r9
 8003390:	4640      	mov	r0, r8
 8003392:	47d0      	blx	sl
 8003394:	3001      	adds	r0, #1
 8003396:	d0ad      	beq.n	80032f4 <_printf_i+0x160>
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	079b      	lsls	r3, r3, #30
 800339c:	d413      	bmi.n	80033c6 <_printf_i+0x232>
 800339e:	68e0      	ldr	r0, [r4, #12]
 80033a0:	9b03      	ldr	r3, [sp, #12]
 80033a2:	4298      	cmp	r0, r3
 80033a4:	bfb8      	it	lt
 80033a6:	4618      	movlt	r0, r3
 80033a8:	e7a6      	b.n	80032f8 <_printf_i+0x164>
 80033aa:	2301      	movs	r3, #1
 80033ac:	4632      	mov	r2, r6
 80033ae:	4649      	mov	r1, r9
 80033b0:	4640      	mov	r0, r8
 80033b2:	47d0      	blx	sl
 80033b4:	3001      	adds	r0, #1
 80033b6:	d09d      	beq.n	80032f4 <_printf_i+0x160>
 80033b8:	3501      	adds	r5, #1
 80033ba:	68e3      	ldr	r3, [r4, #12]
 80033bc:	9903      	ldr	r1, [sp, #12]
 80033be:	1a5b      	subs	r3, r3, r1
 80033c0:	42ab      	cmp	r3, r5
 80033c2:	dcf2      	bgt.n	80033aa <_printf_i+0x216>
 80033c4:	e7eb      	b.n	800339e <_printf_i+0x20a>
 80033c6:	2500      	movs	r5, #0
 80033c8:	f104 0619 	add.w	r6, r4, #25
 80033cc:	e7f5      	b.n	80033ba <_printf_i+0x226>
 80033ce:	bf00      	nop
 80033d0:	08003607 	.word	0x08003607
 80033d4:	08003618 	.word	0x08003618

080033d8 <memmove>:
 80033d8:	4288      	cmp	r0, r1
 80033da:	b510      	push	{r4, lr}
 80033dc:	eb01 0402 	add.w	r4, r1, r2
 80033e0:	d902      	bls.n	80033e8 <memmove+0x10>
 80033e2:	4284      	cmp	r4, r0
 80033e4:	4623      	mov	r3, r4
 80033e6:	d807      	bhi.n	80033f8 <memmove+0x20>
 80033e8:	1e43      	subs	r3, r0, #1
 80033ea:	42a1      	cmp	r1, r4
 80033ec:	d008      	beq.n	8003400 <memmove+0x28>
 80033ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033f6:	e7f8      	b.n	80033ea <memmove+0x12>
 80033f8:	4402      	add	r2, r0
 80033fa:	4601      	mov	r1, r0
 80033fc:	428a      	cmp	r2, r1
 80033fe:	d100      	bne.n	8003402 <memmove+0x2a>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800340a:	e7f7      	b.n	80033fc <memmove+0x24>

0800340c <_sbrk_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4d06      	ldr	r5, [pc, #24]	; (8003428 <_sbrk_r+0x1c>)
 8003410:	2300      	movs	r3, #0
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	602b      	str	r3, [r5, #0]
 8003418:	f7ff fa44 	bl	80028a4 <_sbrk>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_sbrk_r+0x1a>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	b103      	cbz	r3, 8003426 <_sbrk_r+0x1a>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	200041b8 	.word	0x200041b8

0800342c <_realloc_r>:
 800342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003430:	4680      	mov	r8, r0
 8003432:	4614      	mov	r4, r2
 8003434:	460e      	mov	r6, r1
 8003436:	b921      	cbnz	r1, 8003442 <_realloc_r+0x16>
 8003438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800343c:	4611      	mov	r1, r2
 800343e:	f7ff bc57 	b.w	8002cf0 <_malloc_r>
 8003442:	b92a      	cbnz	r2, 8003450 <_realloc_r+0x24>
 8003444:	f7ff fbe8 	bl	8002c18 <_free_r>
 8003448:	4625      	mov	r5, r4
 800344a:	4628      	mov	r0, r5
 800344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003450:	f000 f81b 	bl	800348a <_malloc_usable_size_r>
 8003454:	4284      	cmp	r4, r0
 8003456:	4607      	mov	r7, r0
 8003458:	d802      	bhi.n	8003460 <_realloc_r+0x34>
 800345a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800345e:	d812      	bhi.n	8003486 <_realloc_r+0x5a>
 8003460:	4621      	mov	r1, r4
 8003462:	4640      	mov	r0, r8
 8003464:	f7ff fc44 	bl	8002cf0 <_malloc_r>
 8003468:	4605      	mov	r5, r0
 800346a:	2800      	cmp	r0, #0
 800346c:	d0ed      	beq.n	800344a <_realloc_r+0x1e>
 800346e:	42bc      	cmp	r4, r7
 8003470:	4622      	mov	r2, r4
 8003472:	4631      	mov	r1, r6
 8003474:	bf28      	it	cs
 8003476:	463a      	movcs	r2, r7
 8003478:	f7ff fbc0 	bl	8002bfc <memcpy>
 800347c:	4631      	mov	r1, r6
 800347e:	4640      	mov	r0, r8
 8003480:	f7ff fbca 	bl	8002c18 <_free_r>
 8003484:	e7e1      	b.n	800344a <_realloc_r+0x1e>
 8003486:	4635      	mov	r5, r6
 8003488:	e7df      	b.n	800344a <_realloc_r+0x1e>

0800348a <_malloc_usable_size_r>:
 800348a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800348e:	1f18      	subs	r0, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	bfbc      	itt	lt
 8003494:	580b      	ldrlt	r3, [r1, r0]
 8003496:	18c0      	addlt	r0, r0, r3
 8003498:	4770      	bx	lr
	...

0800349c <_init>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	bf00      	nop
 80034a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a2:	bc08      	pop	{r3}
 80034a4:	469e      	mov	lr, r3
 80034a6:	4770      	bx	lr

080034a8 <_fini>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr
